<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.DynamoDBv2</name>
    </assembly>
    <members>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException">
            <summary>
             Common exception for the DynamoDBStreams service.
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonDynamoDBStreamsException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonDynamoDBStreamsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonDynamoDBStreamsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonDynamoDBStreamsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonDynamoDBStreamsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonClientException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.ConversionSchema">
            <summary>
            Available conversion schemas.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ConversionSchema.V1">
            <summary>
            Default schema before 2014 L, M, BOOL, NULL support
            
            The following .NET types are converted into the following DynamoDB types:
            Number types (byte, int, float, decimal, etc.) are converted to N
            String and char are converted to S
            Bool is converted to N (0=false, 1=true)
            DateTime and Guid are converto to S
            MemoryStream and byte[] are converted to B
            List, HashSet, and array of numerics types are converted to NS
            List, HashSet, and array of string-based types are converted to SS
            List, HashSet, and array of binary-based types are converted to BS
            Dictionary{string,object} are converted to M
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ConversionSchema.V2">
            <summary>
            Schema fully supporting 2014 L, M, BOOL, NULL additions
            
            The following .NET types are converted into the following DynamoDB types:
            Number types (byte, int, float, decimal, etc.) are converted to N
            String and char are converted to S
            Bool is converted to BOOL
            DateTime and Guid are converto to S
            MemoryStream and byte[] are converted to B
            HashSet of numerics types are converted to NS
            HashSet of string-based types are converted to SS
            HashSet of binary-based types are converted to BS
            List and array of numerics, string-based types, and binary-based types
            are converted to L type.
            Dictionary{string,object} are converted to M
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DynamoDBEntryConversion">
            <summary>
            A collection of converters capable of converting between
            .NET and DynamoDB objects.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DynamoDBEntryConversion.V1">
            <summary>
            Default conversion before 2014 L, M, BOOL, NULL support.
            
            The following .NET types are converted into the following DynamoDB types:
            Number types (byte, int, float, decimal, etc.) are converted to N
            String and char are converted to S
            Bool is converted to N (0=false, 1=true)
            DateTime and Guid are converto to S
            MemoryStream and byte[] are converted to B
            List, HashSet, and array of numerics types are converted to NS
            List, HashSet, and array of string-based types are converted to SS
            List, HashSet, and array of binary-based types are converted to BS
            Dictionary{string,object} are converted to M
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DynamoDBEntryConversion.V2">
            <summary>
            Schema fully supporting 2014 L, M, BOOL, NULL additions.
            
            The following .NET types are converted into the following DynamoDB types:
            Number types (byte, int, float, decimal, etc.) are converted to N
            String and char are converted to S
            Bool is converted to BOOL
            DateTime and Guid are converto to S
            MemoryStream and byte[] are converted to B
            HashSet of numerics types are converted to NS
            HashSet of string-based types are converted to SS
            HashSet of binary-based types are converted to BS
            List and array of numerics, string-based types, and binary-based types
            are converted to L type.
            Dictionary{string,object} are converted to M
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.GetConversion(Amazon.DynamoDBv2.ConversionSchema)">
            <summary>
            Returns a DynamoDBEntryConversion corresponding to the ConversionSchema.
            The returned conversion is immutable. The conversion must be cloned
            before it can be modified.
            </summary>
            <param name="schema">Conversion to return.</param>
            <returns>DynamoDBEntryConversion corresponding to the ConversionSchema.</returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DynamoDBEntryConversion.CurrentConversion">
            <summary>
            Conversion corresponding to AWSConfigs.DynamoDBConfig.ConversionSchema
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.#ctor">
            <summary>
            Creates an empty, mutable conversion.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.ConvertToEntry``1(``0)">
            <summary>
            Convert value to DynamoDBEntry
            </summary>
            <typeparam name="TInput"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.TryConvertToEntry``1(``0,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry@)">
            <summary>
            Try to convert value to DynamoDBEntry. If it fails the method returns false.
            </summary>
            <typeparam name="TInput"></typeparam>
            <param name="value"></param>
            <param name="entry"></param>
            <returns>True if successfully converted, otherwise false.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.ConvertFromEntry``1(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Convert the DynamoDBEntry to the specified type.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DynamoDBEntryConversion.TryConvertFromEntry``1(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry,``0@)">
            <summary>
            Try to convert the DynamoDBEntry to the specified type. If it fails the method returns false.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="entry"></param>
            <param name="output"></param>
            <returns>True if successfully converted, otherwise false.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Converter.GetTargetTypes">
            <summary>
            Returns all types for which it can be used.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Converter.Conversion">
            <summary>
            Conversion that this converter is part of.
            This field is set by DynamoDBEntryConversion when the Converter
            is added to that DynamoDBEntryConversion.
            
            This conversion should be used if the Converter needs to
            make sub-conversions (for instance, a collection converter).
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.BoolConverterV1">
            <summary>
            A boolean converter which reads booleans as N or BOOL types,
            but writes out N type (1 if true, 0 if false).
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.PrimitiveCollectionConverterV1">
            <summary>
            A collection converter which reads both sets of collections (sets and lists)
            and writes out sets (NS, SS, BS)
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DictionaryConverterV1">
            <summary>
            Dictionary converter.
            Converts from Dictionary{string,object} to DynamoDBEntry.
            Does NOT convert from DynamoDBEntry to Dictionary{string,object}.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.BoolConverterV2">
            <summary>
            A boolean converter which reads booleans as N or BOOL types,
            but writes out BOOL type.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.CollectionConverterV2">
            <summary>
            A collection converter which reads both sets of collections (sets and lists)
            but writes out different types depending on input:
            HashSet input - converts to a DynamoDB set (NS, SS, BS)
            Any other IEnumerable input - converts to a DynamoDB list (L)
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.CollectionConverterV2.TryTo(System.Object,Amazon.DynamoDBv2.DocumentModel.PrimitiveList@)">
            <summary>
            If value is HashSet{T}, converts the items to PrimitiveList
            </summary>
            <param name="value"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.CollectionConverterV2.TryTo(System.Object,Amazon.DynamoDBv2.DocumentModel.DynamoDBList@)">
            <summary>
            If value implements IEnumerable{T}, converts the items to DynamoDBList
            This method is called after the PrimitiveList version of TryTo, so this will
            never work on a HashSet{T}.
            </summary>
            <param name="value"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.SetPropertyConverter`2">
            <summary>
            Class that implements IPropertyConverter to convert collections
            to PrimitiveList types, which are then stored as sets (NS, SS, BS)
            in DynamoDB.
            
            Use this converter to bypass the default schema behavior for a particular
            property.
            The Conversion property can be customized in the constructor of a subclass
            to use a different conversion scheme for converting individual elements.
            The default value for this field is the standard V1 conversion.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SetPropertyConverter`2.collectionType">
            <summary>
            Reference to the type object for the TCollection generic.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SetPropertyConverter`2.elementType">
            <summary>
            Reference to the type object for the TElement generic.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.SetPropertyConverter`2.Conversion">
            <summary>
            Gets and sets the Conversion property.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.SetPropertyConverter`2.#ctor">
            <summary>
            Set the conversion to V1.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.SetPropertyConverter`2.ToEntry(System.Object)">
            <summary>
            Convert object to DynamoDBEntry using the V1 converter rules.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.SetPropertyConverter`2.FromEntry(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Convert DyanmoDBEntry to object using the V1 converter rules.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ListToSetPropertyConverter`1">
            <summary>
            Class that implements IPropertyConverter to convert collections
            to PrimitiveList types, which are then stored as sets (NS, SS, BS)
            in DynamoDB.
            This converter assumes that the target is of type List{TElement}.
            
            Use this converter to bypass the default schema behavior for a particular
            property.
            The Conversion property can be customized in the constructor of a subclass
            to use a different conversion scheme for converting individual elements.
            The default value for this field is the standard V1 conversion.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="T:Amazon.DynamoDBv2.BoolAsNConverter">
            <summary>
            Class that implements IPropertyConverter to convert bool/Boolean .NET
            types to DynamoDB numeric (N) type, where true is stored as N:1, false as N:0.
            
            Use this converter to bypass the default schema behavior for a particular
            property.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.BoolAsNConverter.ToEntry(System.Object)">
            <summary>
            Converts object to DynamoDBEntry
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.BoolAsNConverter.FromEntry(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Converts DynamoDBEntry to object
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.AsyncSearch`1">
            <summary>
            A strongly-typed object for retrieving search results (Query or Scan)
            from DynamoDB.
            </summary>
            <summary>
            A strongly-typed object for retrieving search results (Query or Scan)
            from DynamoDB.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.AsyncSearch`1.IsDone">
            <summary>
            Flag that, if true, indicates that the search is done
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.AsyncSearch`1.GetNextSetAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution to get the next set of results from DynamoDB.
            
            If there are more items in the Scan/Query, PaginationToken will be
            set and can be consumed in a new Scan/Query operation to resume
            retrieving items from this point.
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>
            A Task that can be used to poll or wait for results, or both.
            Results will include the next set of result items from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.AsyncSearch`1.GetRemainingAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution to get all the remaining results from DynamoDB.
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>
            A Task that can be used to poll or wait for results, or both.
            Results will include the remaining result items from DynamoDB.
            </returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBAttribute">
            <summary>
            Base DynamoDB attribute.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBTableAttribute">
            <summary>
            DynamoDB attribute that marks a class.
            Specifies that this object can be stored in DynamoDB, the name
            of the target table, and if attribute names must be automatically
            converted to lowerCamelCase.
            
            Need not be declared on subclasses if present on base class.
            Can be defined on subclasses to specify different target table
            or specify different attribute casing.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBTableAttribute.TableName">
            <summary>
            Gets and sets the TableName property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBTableAttribute.LowerCamelCaseProperties">
            <summary>
            Gets and sets the LowerCamelCaseProperties property.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBTableAttribute.#ctor(System.String)">
            <summary>
            Construct an instance of DynamoDBTableAttribute
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBTableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Construct an instance of DynamoDBTableAttribute
            </summary>
            <param name="tableName"></param>
            <param name="lowerCamelCaseProperties"></param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBIgnoreAttribute">
            <summary>
            DynamoDB attribute that directs the specified attribute not to
            be included when saving or loading objects.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBRenamableAttribute">
            <summary>
            DynamoDB property attribute.
            Can be used to specify an alternative attribute name or configure
            a custom converter.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRenamableAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRenamableAttribute.#ctor(System.String)">
            <summary>
            Constructor that specifies an alternate attribute name
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBRenamableAttribute.AttributeName">
            <summary>
            Name of attribute that is associated with this member.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBVersionAttribute">
            <summary>
            DynamoDB property that marks up current member as item version.
            At most one member in a class may be marked with this attribute.
            
            Members that are marked as version must be of primitive,
            numeric, integer, nullable type (e.g. int?, long?, byte?)
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute">
            <summary>
            DynamoDB property attribute.
            Can be used to specify an alternative attribute name or configure
            a custom converter.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor that specifies an alternate attribute name
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor(System.Type)">
            <summary>
            Constructor that specifies a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor that specifies that this type should be stored as epoch seconds.
            </summary>
            <param name="storeAsEpoch">
            Whether the data should be stored as epoch seconds.
            If false, data is stored as ISO-8601 string.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor that specifies an alternate attribute name and a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor that specifies an alternate attribute name and that this type should
            be stored as epoch seconds.
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
            <param name="storeAsEpoch">
            Whether the data should be stored as epoch seconds.
            If false, data is stored as ISO-8601 string.
            </param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.Converter">
            <summary>
            Type of the custom converter.
            Cannot be set at the same time as StoreAsEpoch.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBPropertyAttribute.StoreAsEpoch">
            <summary>
            Flag that directs DynamoDBContext to store this data as epoch seconds integer.
            If false, data is stored as ISO-8601 string.
            Cannot be set at the same time as Converter.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBHashKeyAttribute">
            <summary>
            DynamoDB property that marks up current member as a hash key element.
            Exactly one member in a class must be marked with this attribute.
            
            Members that are marked as hash key must be convertible to
            a Primitive object.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBHashKeyAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBHashKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor that specifies an alternate attribute name
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBHashKeyAttribute.#ctor(System.Type)">
            <summary>
            Constructor that specifies a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBHashKeyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor that specifies an alternate attribute name and a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBRangeKeyAttribute">
            <summary>
            DynamoDB property that marks up current member as range key element (for a hash-and-range primary key).
            At most one member in a class may be marked with this attribute.
            
            Members that are marked as a range key element must be convertible to
            a Primitive object.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRangeKeyAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRangeKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor that specifies an alternate attribute name
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRangeKeyAttribute.#ctor(System.Type)">
            <summary>
            Constructor that specifies a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBRangeKeyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor that specifies an alternate attribute name and a custom converter.
            
            Converter must be the type of a class that implements IPropertyConverter.
            </summary>
            <param name="attributeName">
            Name of attribute to be associated with property or field.
            </param>
            <param name="converter">Custom converter type.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexHashKeyAttribute">
            DynamoDB property attribute that marks up current member as a hash key element for a Global Secondary Index on a table.
            
            Members that are marked as a Global Secondary Index hash key element must be convertible to a Primitive object.
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexHashKeyAttribute.IndexNames">
            <summary>
            Index associated with this range key
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexHashKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts a single inde name.
            </summary>
            <param name="indexName">Name of the Local Secondary Index this range key belongs to.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexHashKeyAttribute.#ctor(System.String[])">
            <summary>
            Constructor that accepts multiple index names.
            </summary>
            <param name="indexNames">Names of the Local Secondary Indexes this range key belongs to.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexRangeKeyAttribute">
            DynamoDB property attribute that marks up current member as range key element for a Global Secondary Index on a table.
            
            Members that are marked as a Global Secondary Index range key element must be convertible to a Primitive object.
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexRangeKeyAttribute.IndexNames">
            <summary>
            Index associated with this range key
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexRangeKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts a single inde name.
            </summary>
            <param name="indexName">Name of the Local Secondary Index this range key belongs to.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBGlobalSecondaryIndexRangeKeyAttribute.#ctor(System.String[])">
            <summary>
            Constructor that accepts multiple index names.
            </summary>
            <param name="indexNames">Names of the Local Secondary Indexes this range key belongs to.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBLocalSecondaryIndexRangeKeyAttribute">
            <summary>
            DynamoDB property that marks up current member as range key element for a Local Secondary Index on a table.
            
            Members that are marked as a Local Secondary Index range key element must be convertible to a Primitive object.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBLocalSecondaryIndexRangeKeyAttribute.IndexNames">
            <summary>
            Index associated with this range key
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBLocalSecondaryIndexRangeKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts a single inde name.
            </summary>
            <param name="indexName">Name of the Local Secondary Index this range key belongs to.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBLocalSecondaryIndexRangeKeyAttribute.#ctor(System.String[])">
            <summary>
            Constructor that accepts multiple index names.
            </summary>
            <param name="indexNames">Names of the Local Secondary Indexes this range key belongs to.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.BatchGet">
            <summary>
            Represents a non-generic object for retrieving a batch of items
            from a single DynamoDB table
            </summary>
            <summary>
            Represents a non-generic object for retrieving a batch of items
            from a single DynamoDB table
            </summary>
            <summary>
            Represents a non-generic object for retrieving a batch of items
            from a single DynamoDB table
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.BatchGet.UntypedResults">
            <summary>
            Gets and sets the UntypedResults property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.BatchGet.Results">
            <summary>
            List of results retrieved from DynamoDB.
            Populated after Execute is called.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.BatchGet.ConsistentRead">
            <summary>
            If set to true, a consistent read is issued. Otherwise eventually-consistent is used.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet.ExecuteHelper(System.Boolean)">
            <summary>
            Executes a server call to batch-get the items requested.
            Populates Results with the retrieved items.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.BatchGet.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet.Execute">
            <summary>
            Executes a server call to batch-get the items requested.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.BatchGet`1">
            <summary>
            Represents a strongly-typed object for retrieving a batch of items
            from a single DynamoDB table
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.BatchGet`1.Results">
            <summary>
            List of results retrieved from DynamoDB.
            Populated after Execute is called.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet`1.AddKey(System.Object)">
            <summary>
            Add a single item to get, identified by its hash primary key.
            </summary>
            <param name="hashKey">Hash key of the item to get</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet`1.AddKey(System.Object,System.Object)">
            <summary>
            Add a single item to get, identified by its hash-and-range primary key.
            </summary>
            <param name="hashKey">Hash key of the item to get</param>
            <param name="rangeKey">Range key of the item to get</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet`1.AddKey(`0)">
            <summary>
            Add a single item to get.
            </summary>
            <param name="keyObject">Object key of the item to get</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet`1.Combine(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Creates a MultiTableBatchGet object that is a combination
            of the current BatchGet and the specified BatchGets
            </summary>
            <param name="otherBatches">Other BatchGet objects</param>
            <returns>
            MultiTableBatchGet consisting of the multiple BatchGet objects:
            the current batch and the passed-in batches.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchGet`1.ExecuteHelper(System.Boolean)">
            <summary>
            Executes the batch get
            </summary>
            <param name="isAsync"></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.BatchGet`1.TypedResults">
            <summary>
            Gets and sets the TypedResults property.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet">
            <summary>
            Class for retrieving a batch of items from multiple DynamoDB tables,
            using multiple strongly-typed BatchGet objects
            </summary>
            <summary>
            Class for retrieving a batch of items from multiple DynamoDB tables,
            using multiple strongly-typed BatchGet objects
            </summary>
            <summary>
            Class for retrieving a batch of items from multiple DynamoDB tables,
            using multiple strongly-typed BatchGet objects
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.#ctor(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Constructs a MultiTableBatchGet object from a number of
            BatchGet objects
            </summary>
            <param name="batches">Collection of BatchGet objects</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.TotalKeys">
            <summary>
            Gets the total number of primary keys to be loaded from DynamoDB,
            across all batches
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.AddBatch(Amazon.DynamoDBv2.DataModel.BatchGet)">
            <summary>
            Add a BatchGet object to the multi-table batch request
            </summary>
            <param name="batch">BatchGet to add</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchGet.Execute">
            <summary>
            Executes a multi-table batch request against all configured batches.
            Results are stored in the respective BatchGet objects.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.BatchWrite">
            <summary>
            Represents a non-generic object for writing/deleting a batch of items
            in a single DynamoDB table
            </summary>
            <summary>
            Represents a non-generic object for writing/deleting a batch of items
            in a single DynamoDB table
            </summary>
            <summary>
            Represents a non-generic object for writing/deleting a batch of items
            in a single DynamoDB table
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite.ExecuteHelper(System.Boolean)">
            <summary>
            Executes a server call to batch-write/delete the items requested.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.BatchWrite.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite.Execute">
            <summary>
            Executes a server call to batch-write/delete the items requested.
            
            If more than 25 put/delete operations are specified, calls of up to 25
            put/delete items will be made until all items are processed.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.BatchWrite`1">
            <summary>
            Represents a strongly-typed object for writing/deleting a batch of items
            in a single DynamoDB table
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.Combine(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Creates a MultiTableBatchWrite object that is a combination
            of the current BatchWrite and the specified BatchWrites
            </summary>
            <param name="otherBatches">Other BatchWrite objects</param>
            <returns>
            MultiTableBatchWrite consisting of the multiple BatchWrite objects:
            the current batch and the passed-in batches.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddPutItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a number of items to be put in the current batch operation
            </summary>
            <param name="values">Items to put</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddPutItem(`0)">
            <summary>
            Add a single item to be put in the current batch operation
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddDeleteItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a number of items to be deleted in the current batch operation
            </summary>
            <param name="values">Items to be deleted</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddDeleteItem(`0)">
            <summary>
            Add a single item to be deleted in the current batch operation.
            </summary>
            <param name="item">Item to be deleted</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddDeleteKey(System.Object)">
            <summary>
            Add a single item to be deleted in the current batch operation.
            Item is identified by its hash primary key.
            </summary>
            <param name="hashKey">Hash key of the item to delete</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.AddDeleteKey(System.Object,System.Object)">
            <summary>
            Add a single item to be deleted in the current batch operation.
            Item is identified by its hash-and-range primary key.
            </summary>
            <param name="hashKey">Hash key of the item to delete</param>
            <param name="rangeKey">Range key of the item to delete</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.BatchWrite`1.ExecuteHelper(System.Boolean)">
            <summary>
            Execute the batch write.
            </summary>
            <param name="isAsync"></param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite">
            <summary>
            Class for writing/deleting a batch of items in multiple DynamoDB tables,
            using multiple strongly-typed BatchWrite objects
            </summary>
            <summary>
            Class for writing/deleting a batch of items in multiple DynamoDB tables,
            using multiple strongly-typed BatchWrite objects
            </summary>
            <summary>
            Class for writing/deleting a batch of items in multiple DynamoDB tables,
            using multiple strongly-typed BatchWrite objects
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite.#ctor(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Constructs a MultiTableBatchGet object from a number of
            BatchGet objects
            </summary>
            <param name="batches">Collection of BatchGet objects</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite.AddBatch(Amazon.DynamoDBv2.DataModel.BatchWrite)">
            <summary>
            Add a BatchWrite object to the multi-table batch request
            </summary>
            <param name="batch">BatchGet to add</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.MultiTableBatchWrite.Execute">
            <summary>
            Executes a multi-table batch request against all configured batches.
            
            If more than 25 put/delete operations are specified, calls of up to 25
            put/delete items will be made until all items are processed.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.IPropertyConverter">
            <summary>
            Interface for converting arbitrary objects to DynamoDB-supported
            object types.
            
            Implementing type must be public, instantiable, and should have
            a zero-parameter constructor.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IPropertyConverter.ToEntry(System.Object)">
            <summary>
            Convert object to DynamoDBEntry
            </summary>
            <param name="value">Object to be deserialized</param>
            <returns>Object deserialized as DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IPropertyConverter.FromEntry(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Convert DynamoDBEntry to the specified object
            </summary>
            <param name="entry">DynamoDBEntry to be serialized</param>
            <returns>Serialized object</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig">
            <summary>
            Configuration object for setting options on the DynamoDBContext.
            and individual operations.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.ConsistentRead">
            <summary>
            Property that directs DynamoDBContext to use consistent reads.
            If property is not set, behavior defaults to non-consistent reads.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.SkipVersionCheck">
            <summary>
            Property that directs DynamoDBContext to skip version checks
            when saving or deleting an object with a version attribute.
            If property is not set, version checks are performed.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.TableNamePrefix">
            <summary>
            Property that directs DynamoDBContext to prefix all table names
            with a specific string.
            If property is null or empty, no prefix is used and default
            table names are used.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.IgnoreNullValues">
            <summary>
            Property that directs DynamoDBContext to ignore null values
            on attributes during a Save operation.
            If the property is false (or not set), null values will be
            interpreted as directives to delete the specific attribute.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig.Conversion">
            <summary>
            Conversion specification which controls how conversion between
            .NET and DynamoDB types happens.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig">
            <summary>
            Configuration object for setting options for individual operations.
            This will override any settings specified by the DynamoDBContext's DynamoDBContextConfig object.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.OverrideTableName">
            <summary>
            Property that indicates the table to save an object to overriding the DynamoDBTable attribute 
            declared for the type.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.BackwardQuery">
            <summary>
            Property that indicates a query should traverse the index backward.
            If the property is false (or not set), traversal shall be forward.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.IndexName">
            <summary>
            Property indicating the name of the index to query or scan against.
            This value is optional if the index name can be inferred from the call.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.ConditionalOperator">
            <summary>
            A logical operator to apply to the filter conditions:
            AND - If all of the conditions evaluate to true, then the entire filter evaluates to true.
            OR - If at least one of the conditions evaluate to true, then the entire filter evaluates to true.
            
            Default value is AND.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.QueryFilter">
            <summary>
            Query filter for the Query operation operation. Evaluates the query results and returns only
            the matching values. If you specify more than one condition, then by default all of the
            conditions must evaluate to true. To match only some conditions, set ConditionalOperator to Or.
            Note: Conditions must be against non-key properties.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.ScanCondition">
            <summary>
            Class describing a single scan condition
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.ScanCondition.PropertyName">
            <summary>
            Name of the property being tested
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.ScanCondition.Operator">
            <summary>
            Comparison operator
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.ScanCondition.Values">
            <summary>
            Values being tested against.
            
            The values should be of the same type as the property.
            In the cases where the property is a collection, the values
            should be of the same type as the items in the collection.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.ScanCondition.#ctor(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,System.Object[])">
            <summary>
            Initializes a ScanCondition with the target property, the
            comparison operator and values being tested against.
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="op">Comparison operator</param>
            <param name="values">
            Value(s) being tested against.
            
            The values should be of the same type as the property.
            In the cases where the property is a collection, the values
            should be of the same type as the items in the collection.
            </param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.QueryCondition">
            <summary>
            Class describing a single query condition
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.QueryCondition.PropertyName">
            <summary>
            Name of the property being tested
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.QueryCondition.Operator">
            <summary>
            Comparison operator
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.QueryCondition.Values">
            <summary>
            Values being tested against.
            
            The values should be of the same type as the property.
            In the cases where the property is a collection, the values
            should be of the same type as the items in the collection.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.QueryCondition.#ctor(System.String,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Object[])">
            <summary>
            Initializes a ScanCondition with the target property, the
            comparison operator and values being tested against.
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="op">Comparison operator</param>
            <param name="values">
            Value(s) being tested against.
            
            The values should be of the same type as the property.
            In the cases where the property is a collection, the values
            should be of the same type as the items in the collection.
            </param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.ConsistentRead">
            <summary>
            Property that directs DynamoDBContext to use consistent reads.
            If property is not set, behavior defaults to non-consistent reads.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.SkipVersionCheck">
            <summary>
            Property that directs DynamoDBContext to skip version checks
            when saving or deleting an object with a version attribute.
            If property is not set, version checks are performed.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.TableNamePrefix">
            <summary>
            Property that directs DynamoDBContext to prefix all table names
            with a specific string.
            If property is null or empty, no prefix is used and default
            table names are used.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.IgnoreNullValues">
            <summary>
            Property that directs DynamoDBContext to ignore null values
            on attributes during a Save operation.
            If the property is false (or not set), null values will be
            interpreted as directives to delete the specific attribute.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.OverrideTableName">
            <summary>
            Property that indicates the table to save an object to overriding the DynamoDBTable attribute 
            declared for the type.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.BackwardQuery">
            <summary>
            Property that indicates a query should traverse the index backward.
            If the property is false (or not set), traversal shall be forward.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.IndexName">
            <summary>
            Property indicating the name of the index to query or scan against.
            This value is optional if the index name can be inferred from the call.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.ConditionalOperator">
            <summary>
            A logical operator to apply to the filter conditions:
            AND - If all of the conditions evaluate to true, then the entire filter evaluates to true.
            OR - If at least one of the conditions evaluate to true, then the entire filter evaluates to true.
            
            Default value is AND.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.QueryFilter">
            <summary>
            Query filter for the Query operation operation. Evaluates the query results and returns only
            the matching values. If you specify more than one condition, then by default all of the
            conditions must evaluate to true. To match only some conditions, set ConditionalOperator to Or.
            Note: Conditions must be against non-key properties.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBFlatConfig.Conversion">
            <summary>
            Conversion specification which controls how conversion between
            .NET and DynamoDB types happens.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.DynamoDBContext">
            <summary>
            Context object for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>
            <summary>
            Context object for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>
            <summary>
            Context object for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>    class Context
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ConverterCache">
            <summary>
            This cache is a way to store Converters for objects which provides a way to expand Context
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor">
            <summary>
            Constructs a DynamoDBContext object with a default AmazonDynamoDBClient
            client and a default DynamoDBContextConfig object for configuration.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor(Amazon.RegionEndpoint)">
            <summary>
            Constructs a DynamoDBContext object with a default AmazonDynamoDBClient
            client and a default DynamoDBContextConfig object for configuration.
            </summary>
            <param name="region">The region to configure the AmazonDynamoDBClient to use.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor(Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig)">
            <summary>
            Constructs a DynamoDBContext object with the specified configuration.
            Uses a default AmazonDynamoDBClient as the client.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor(Amazon.RegionEndpoint,Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig)">
            <summary>
            Constructs a DynamoDBContext object with the specified configuration.
            Uses a default AmazonDynamoDBClient as the client.
            </summary>
            <param name="region">The region to configure the AmazonDynamoDBClient to use.</param>
            <param name="config"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor(Amazon.DynamoDBv2.IAmazonDynamoDB)">
            <summary>
            Constructs a DynamoDBContext object with the specified DynamoDB client.
            Uses default DynamoDBContextConfig object for configuration.
            </summary>
            <param name="client">Client to use for making calls</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.#ctor(Amazon.DynamoDBv2.IAmazonDynamoDB,Amazon.DynamoDBv2.DataModel.DynamoDBContextConfig)">
            <summary>
            Constructs a DynamoDBContext object with the specified DynamoDB client
            and configuration.
            </summary>
            <param name="client">Client to use for making calls</param>
            <param name="config">Configuration to use</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern
            </summary>
            <param name="disposing">Whether this object is being disposed via a call to Dispose
            or garbage collected.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Dispose">
            <summary>
            Disposes of all managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Finalize">
            <summary>
            The destructor for the client class.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateBatchGet``1">
            <summary>
            Creates a strongly-typed BatchGet object, allowing
            a batch-get operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to get</typeparam>
            <returns>Empty strongly-typed BatchGet object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateBatchGet``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Creates a strongly-typed BatchGet object, allowing
            a batch-get operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to get</typeparam>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Empty strongly-typed BatchGet object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateMultiTableBatchGet(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Creates a MultiTableBatchGet object, composed of multiple
            individual BatchGet objects.
            </summary>
            <param name="batches">Individual BatchGet objects</param>
            <returns>Composite MultiTableBatchGet object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateBatchWrite``1">
            <summary>
            Creates a strongly-typed BatchWrite object, allowing
            a batch-write operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to write</typeparam>
            <returns>Empty strongly-typed BatchWrite object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateBatchWrite``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Creates a strongly-typed BatchWrite object, allowing
            a batch-write operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to write</typeparam>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Empty strongly-typed BatchWrite object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.CreateMultiTableBatchWrite(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Creates a MultiTableBatchWrite object, composed of multiple
            individual BatchWrite objects.
            </summary>
            <param name="batches">Individual BatchWrite objects</param>
            <returns>Composite MultiTableBatchWrite object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ToDocument``1(``0)">
            <summary>
            Serializes an object to a Document.
            </summary>
            <typeparam name="T">Type to serialize as.</typeparam>
            <param name="value">Object to serialize.</param>
            <returns>Document with attributes populated from object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ToDocument``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Serializes an object to a Document.
            </summary>
            <typeparam name="T">Type to serialize as.</typeparam>
            <param name="value">Object to serialize.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Document with attributes populated from object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromDocument``1(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Deserializes a document to an instance of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="document">Document with properties to use.</param>
            <returns>
            Object of type T, populated with properties from the document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromDocument``1(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deserializes a document to an instance of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="document">Document with properties to use.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>
            Object of type T, populated with properties from the document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromDocuments``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DocumentModel.Document})">
            <summary>
            Deserializes a collections of documents to a collection of instances of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="documents">Documents to deserialize.</param>
            <returns>
            Collection of items of type T, each populated with properties from a corresponding document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromDocuments``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DocumentModel.Document},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deserializes a collections of documents to a collection of instances of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="documents">Documents to deserialize.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>
            Collection of items of type T, each populated with properties from a corresponding document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.SaveAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Save operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)"/>
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.SaveAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Save operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)"/>
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.LoadAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.DeleteAsync``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ExecuteBatchGetAsync(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Issues a batch-get request with multiple batches.
            
            Results are stored in the individual batches.
            </summary>
            <param name="batches">
            Configured BatchGet objects
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ExecuteBatchGetAsync(Amazon.DynamoDBv2.DataModel.BatchGet[],System.Threading.CancellationToken)">
            <summary>
            Issues a batch-get request with multiple batches.
            
            Results are stored in the individual batches.
            </summary>
            <param name="batches">
            Configured BatchGet objects
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ExecuteBatchWriteAsync(Amazon.DynamoDBv2.DataModel.BatchWrite[],System.Threading.CancellationToken)">
            <summary>
            Issues a batch-write request with multiple batches.
            </summary>
            <param name="batches">
            Configured BatchWrite objects
            </param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ScanAsync``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DataModel.ScanCondition},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
             Configures an async Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromScanAsync``1(Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
             Configures an async Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="scanConfig">Scan request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.QueryAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified hash primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.QueryAsync``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.IEnumerable{System.Object},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Between, values should be two values.
            </param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromQueryAsync``1(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="queryConfig">Query request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Saves an object to DynamoDB using passed-in configs.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="operationConfig">Overriding configuration.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object,System.Object)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given key and using the given config.
            The keyObject is a partially-specified instance, where the
            hash/range properties are equal to the key of the item you
            want to load.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key object defining the the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)">
            <summary>
            Deletes an item in DynamoDB corresponding to given object.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            If SkipVersionCheck=false, will check version of object before deleting.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to given object.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            If SkipVersionCheck=false, will check version of object before deleting.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="operationConfig">Overriding configuration.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(System.Object)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(System.Object,System.Object)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ExecuteBatchGet(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Issues a batch-get request with multiple batches.
            
            Results are stored in the individual batches.
            </summary>
            <param name="batches">
            Configured BatchGet objects
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.ExecuteBatchWrite(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Issues a batch-write request with multiple batches.
            </summary>
            <param name="batches">
            Configured BatchWrite objects
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Scan``1(Amazon.DynamoDBv2.DataModel.ScanCondition[])">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Scan``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DataModel.ScanCondition},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromScan``1(Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="scanConfig">Scan request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Query``1(System.Object)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified hash primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified hash primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Object[])">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Betwee, values should be two values.
            </param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.IEnumerable{System.Object},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Betwee, values should be two values.
            </param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromQuery``1(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="queryConfig">Query request object.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.FromQuery``1(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="queryConfig">Query request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.GetTargetTable``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Retrieves the target table for the specified type
            </summary>
            <typeparam name="T">Type to retrieve table for</typeparam>
            <returns>Table object</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.IDynamoDBContext">
            <summary>
            Context interface for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>
            <summary>
            Context interface for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>
            <summary>
            Context interface for using the DataModel mode of DynamoDB.
            Used to interact with the service, save/load objects, etc.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ToDocument``1(``0)">
            <summary>
            Serializes an object to a Document.
            </summary>
            <typeparam name="T">Type to serialize as.</typeparam>
            <param name="value">Object to serialize.</param>
            <returns>Document with attributes populated from object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ToDocument``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Serializes an object to a Document.
            </summary>
            <typeparam name="T">Type to serialize as.</typeparam>
            <param name="value">Object to serialize.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Document with attributes populated from object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromDocument``1(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Deserializes a document to an instance of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="document">Document with properties to use.</param>
            <returns>
            Object of type T, populated with properties from the document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromDocument``1(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deserializes a document to an instance of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="document">Document with properties to use.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>
            Object of type T, populated with properties from the document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromDocuments``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DocumentModel.Document})">
            <summary>
            Deserializes a collections of documents to a collection of instances of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="documents">Documents to deserialize.</param>
            <returns>
            Collection of items of type T, each populated with properties from a corresponding document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromDocuments``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DocumentModel.Document},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deserializes a collections of documents to a collection of instances of type T.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="documents">Documents to deserialize.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>
            Collection of items of type T, each populated with properties from a corresponding document.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.CreateBatchGet``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Creates a strongly-typed BatchGet object, allowing
            a batch-get operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to get</typeparam>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Empty strongly-typed BatchGet object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.CreateMultiTableBatchGet(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Creates a MultiTableBatchGet object, composed of multiple
            individual BatchGet objects.
            </summary>
            <param name="batches">Individual BatchGet objects</param>
            <returns>Composite MultiTableBatchGet object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.CreateBatchWrite``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Creates a strongly-typed BatchWrite object, allowing
            a batch-write operation against DynamoDB.
            </summary>
            <typeparam name="T">Type of objects to write</typeparam>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Empty strongly-typed BatchWrite object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.CreateMultiTableBatchWrite(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Creates a MultiTableBatchWrite object, composed of multiple
            individual BatchWrite objects.
            </summary>
            <param name="batches">Individual BatchWrite objects</param>
            <returns>Composite MultiTableBatchWrite object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.SaveAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Save operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)"/>
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.SaveAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Save operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)"/>
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key of the target item.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.LoadAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Load operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Load``1(System.Object)"/>
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.DeleteAsync``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Delete operation.
            <seealso cref="M:Amazon.DynamoDBv2.DataModel.DynamoDBContext.Delete``1(``0)"/>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ExecuteBatchGetAsync(Amazon.DynamoDBv2.DataModel.BatchGet[],System.Threading.CancellationToken)">
            <summary>
            Issues a batch-get request with multiple batches.
            
            Results are stored in the individual batches.
            </summary>
            <param name="batches">
            Configured BatchGet objects
            </param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ExecuteBatchWriteAsync(Amazon.DynamoDBv2.DataModel.BatchWrite[],System.Threading.CancellationToken)">
            <summary>
            Issues a batch-write request with multiple batches.
            </summary>
            <param name="batches">
            Configured BatchWrite objects
            </param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ScanAsync``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DataModel.ScanCondition},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
             Configures an async Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromScanAsync``1(Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
             Configures an async Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="scanConfig">Scan request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.QueryAsync``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified hash primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.QueryAsync``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.IEnumerable{System.Object},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Betwee, values should be two values.
            </param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromQueryAsync``1(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Configures an async Query operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="queryConfig">Query request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>AsyncSearch which can be used to retrieve DynamoDB data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Save``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Saves an object to DynamoDB using passed-in configs.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to save as.</typeparam>
            <param name="value">Object to save.</param>
            <param name="operationConfig">Overriding configuration.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Load``1(System.Object)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Load``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Load``1(System.Object,System.Object)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Load``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given hash-and-range primary key and using the given config.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="hashKey">Hash key element of the target item.</param>
            <param name="rangeKey">Range key element of the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Load``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Loads an object from DynamoDB for the given key and using the given config.
            The keyObject is a partially-specified instance, where the
            hash/range properties are equal to the key of the item you
            want to load.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type to populate.</typeparam>
            <param name="keyObject">Key object defining the the target item.</param>
            <param name="operationConfig">Overriding configuration.</param>
            <returns>
            Object of type T, populated with properties of item loaded from DynamoDB.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(``0)">
            <summary>
            Deletes an item in DynamoDB corresponding to given object.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            If SkipVersionCheck=false, will check version of object before deleting.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(``0,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to given object.
            
            Passed-in config overrides DynamoDBContextConfig on the context.
            If SkipVersionCheck=false, will check version of object before deleting.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to delete.</param>
            <param name="operationConfig">Overriding configuration.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(System.Object)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(System.Object,System.Object)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Delete``1(System.Object,System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Deletes an item in DynamoDB corresponding to a given hash-and-range primary key.
            
            No version check is done prior to delete.
            Type must be marked up with DynamoDBTableAttribute and at least
            one public field/property with DynamoDBHashKeyAttribute.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKey">Hash key element of the object to delete.</param>
            <param name="rangeKey">Range key element of the object to delete.</param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ExecuteBatchGet(Amazon.DynamoDBv2.DataModel.BatchGet[])">
            <summary>
            Issues a batch-get request with multiple batches.
            
            Results are stored in the individual batches.
            </summary>
            <param name="batches">
            Configured BatchGet objects
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.ExecuteBatchWrite(Amazon.DynamoDBv2.DataModel.BatchWrite[])">
            <summary>
            Issues a batch-write request with multiple batches.
            </summary>
            <param name="batches">
            Configured BatchWrite objects
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Scan``1(Amazon.DynamoDBv2.DataModel.ScanCondition[])">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Scan``1(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DataModel.ScanCondition},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="conditions">
            Conditions that the results should meet.
            </param>
            <param name="operationConfig">Config object which can be used to override that table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromScan``1(Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Scan operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="scanConfig">Scan request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified hash primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Object[])">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Betwee, values should be two values.
            </param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.Query``1(System.Object,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.IEnumerable{System.Object},Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified range element condition for a hash-and-range primary key.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="hashKeyValue">Hash key of the items to query.</param>
            <param name="op">Operation of the condition.</param>
            <param name="values">
            Value(s) of the condition.
            For all operations except QueryOperator.Between, values should be one value.
            For QueryOperator.Betwee, values should be two values.
            </param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.FromQuery``1(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig,Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Executes a Query operation against DynamoDB, finding items
            that match the specified conditions.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="queryConfig">Query request object.</param>
            <param name="operationConfig">Config object which can be used to override the table used.</param>
            <returns>Lazy-loaded collection of results.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.IDynamoDBContext.GetTargetTable``1(Amazon.DynamoDBv2.DataModel.DynamoDBOperationConfig)">
            <summary>
            Retrieves the target table for the specified type
            </summary>
            <typeparam name="T">Type to retrieve table for</typeparam>
            <returns>Table object</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.SimplePropertyStorage">
            <summary>
            Basic property storage information
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.PropertyStorage">
            <summary>
            DynamoDB property storage information
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.PropertyStorage.Validate(Amazon.DynamoDBv2.DataModel.DynamoDBContext)">
            <summary>
            Validates configurations and sets required fields
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.ItemStorage">
            <summary>
            Storage information for a single item
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.GSIConfig">
            <summary>
            GSI info
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.StorageConfig">
            <summary>
            Storage information for a specific class
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.ItemStorageConfig">
            <summary>
            Storage information for a specific class that is associated with a table
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.ItemStorageConfigCache">
            <summary>
            Cache of ItemStorageConfig objects
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DataModel.S3Link">
            <summary>
            S3Link is an object that provides a connection to an S3 resource
            that can be stored in a DynamoDB field through DynamoDBContext
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.Create(Amazon.DynamoDBv2.DataModel.DynamoDBContext,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Creates an S3Link that can be used to managed an S3 connection
            </summary>
            <param name="context">The context that is handling the S3Link</param>
            <param name="bucket">The bucket the S3Link should manage</param>
            <param name="key">The key that S3Link should store and download from</param>
            <param name="region">The region of the S3 resource</param>
            <returns>A new S3Link object that can upload and download to the target bucket</returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.S3Link.Key">
            <summary>
            The Key that S3Link stores and downloads a resource to and from
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.S3Link.BucketName">
            <summary>
            The name of the target Bucket for the managed resource
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.S3Link.Region">
            <summary>
            The region the S3 resource is in
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DataModel.S3Link.RegionAsEndpoint">
            <summary>
            Looks up RegionEndpoint based on region as a string
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.GetPreSignedURL(System.DateTime)">
            <summary>
            Provides a URL for accessing the S3 object managed by S3Link
            </summary>
            <param name="expiration">The time the link should become invalid</param>
            <returns>A URL directing to the S3 object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.UploadFromAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads the specified file and stores it in the specified bucket with the provided key from construction.
            </summary>
            <param name="sourcePath">Path of the file to be uploaded.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>An asynchronous task of the request</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.UploadStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Uploads the stream and stores it in the specified bucket with the provided key from construction.
            </summary>
            <param name="stream">Stream to be uploaded to Amazon S3.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>An asynchronous task of the request</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.DownloadToAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the file from the S3Link's specified bucket and key then saves it in the given path. 
            Creates directories and the file if they do not already exist.
            </summary>
            <param name="downloadPath">Path to save the file.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>An asynchronous task of the request</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.OpenStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Opens a stream to object stored in Amazon S3.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>An asynchronous task of the request</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.MakeS3ObjectPublic(System.Boolean)">
            <summary>
            If enable is set to true the object will have its permission set to PublicRead otherwise the permissions will be set to Private.
            </summary>
            <param name="enable">If true the object will have its permission set to PublicRead otherwise the permissions will be set to Private.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.UploadFrom(System.String)">
            <summary>
            Uploads the specified file and stores it in the specified bucket with the provided key from construction.
            </summary>
            <param name="sourcePath">Path of the file to be uploaded.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.UploadStream(System.IO.Stream)">
            <summary>
            Uploads the stream and stores it in the specified bucket with the provided key from construction.
            </summary>
            <param name="stream">Stream to upload.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.DownloadTo(System.String)">
            <summary>
            Downloads the file from the S3Link's specified bucket and key then saves it in the given path. 
            Creates directories and the file if they do not already exist.
            </summary>
            <param name="downloadPath">Path to save the file.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DataModel.S3Link.OpenStream">
            <summary>
            Open stream to the data stored in Amazon S3.
            </summary>
            <returns>Stream to the data stored in Amazon S3.</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Document">
            <summary>
            A collection of attribute key-value pairs that defines
            an item in DynamoDB.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.#ctor">
            <summary>
            Constructs an empty Document.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.#ctor(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Constructs a Document with the passed-in values as its attribute values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Document.Item(System.String)">
            <summary>
            Attribute accessor, allows getting or setting of an individual attribute.
            </summary>
            <param name="key">Name of the attribute.</param>
            <returns>Current value of the attribute.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.IsAttributeChanged(System.String)">
            <summary>
            Returns true if the attribute has been changed.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>True if the attribute has been changed.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.IsDirty">
            <summary>
            Returns true if the document contains attributes that have not been saved.
            </summary>
            <returns>True if the document contains attributes that have not been saved.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.TryGetValue(System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry@)">
            <summary>
            Gets the value associated with the specified attribute value.
            </summary>
            <param name="attributeName">Attribute name</param>
            <param name="entry">
            If the specified attribute value is found, returns the value associated with the 
            attribute; otherwise, null.
            </param>
            <returns>True if attribute is found; false otherwise</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Contains(System.String)">
            <summary>
            Determines if a specific attribute is set on the Document.
            </summary>
            <param name="attributeName">Attribute name</param>
            <returns>Returns true if the specified attribute is found; false otherwise.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ForceConversion(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Returns a new instance of Document where all unconverted .NET types
            are converted to DynamoDBEntry types using a specific conversion.
            </summary>
            <param name="conversion"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToJson">
            <summary>
            <para>
            Converts the current Document into a matching JSON string.
            </para>
            <para>
            DynamoDB types are a superset of JSON types, thus the following DynamoDB cannot
            be properly represented as JSON data:
             PrimitiveList (SS, NS, BS types) - these sets will be converted to JSON arrays
             Binary Primitive (B type) - binary data will be converted to Base64 strings
            </para>
            <para>
            If the resultant JSON is passed to Document.FromJson, the binary values will be
            treated as Base64 strings. Invoke Document.DecodeBase64Attributes to decode these
            strings into binary data.
            </para>
            </summary>
            <returns>JSON string corresponding to the current Document.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToJsonPretty">
            <summary>
            <para>
            Converts the current Document into a matching pretty JSON string.
            </para>
            <para>
            DynamoDB types are a superset of JSON types, thus the following DynamoDB cannot
            be properly represented as JSON data:
             PrimitiveList (SS, NS, BS types) - these sets will be converted to JSON arrays
             Binary Primitive (B type) - binary data will be converted to Base64 strings
            </para>
            <para>
            If the resultant JSON is passed to Document.FromJson, the binary values will be
            treated as Base64 strings. Invoke Document.DecodeBase64Attributes to decode these
            strings into binary data.
            </para>
            </summary>
            <returns>JSON string corresponding to the current Document.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToAttributeMap">
            <summary>
            Creates a map of attribute names mapped to AttributeValue objects.
            Converts .NET types using the conversion specified by AWSConfigs.DynamoDBConfig.ConversionSchema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToAttributeMap(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Creates a map of attribute names mapped to AttributeValue objects.
            </summary>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToExpectedAttributeMap">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToExpectedAttributeMap(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            </summary>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToAttributeUpdateMap(System.Boolean)">
            <summary>
            Creates a map of attribute names mapped to AttributeValueUpdate objects.
            </summary>
            <param name="changedAttributesOnly">If true, only attributes that have been changed will be in the map.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ToAttributeUpdateMap(Amazon.DynamoDBv2.DynamoDBEntryConversion,System.Boolean)">
            <summary>
            Creates a map of attribute names mapped to AttributeValueUpdate objects.
            </summary>
            <param name="changedAttributesOnly">If true, only attributes that have been changed will be in the map.</param>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.GetAttributeNames">
            <summary>
            Returns the names of all the attributes.
            </summary>
            <returns>List of attribute names.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.DecodeBase64Attributes(System.String[])">
            <summary>
            <para>
            Decodes root-level Base64-encoded strings to their binary representations.
            Use this method if the Document was constructed from JSON that contains
            base64-encoded binary values, which result from calling ToJson on a Document
            with binary data.
            </para>
            <para>
            Individual strings become binary data.
            List and sets of Base64-encoded strings become lists and sets of binary data.
            </para>
            </summary>
            <param name="attributeNames">Names of root-level attributes to decode.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.FromAttributeMap(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Creates a Document from an attribute map.
            </summary>
            <param name="data">Map of attribute names to attribute values.</param>
            <returns>Document representing the data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.FromJson(System.String)">
            <summary>
            Creates a document from a JSON string.
            The conversion is as follows:
             Objects are converted to DynamoDB M types.
             Arrays are converted to DynamoDB L types.
             Boolean types are converted to DynamoDB BOOL types.
             Null values are converted to DynamoDB NULL types.
             Numerics are converted to DynamoDB N types.
             Strings are converted to DynamoDB S types.
            </summary>
            <param name="json">JSON string.</param>
            <returns>Document representing the JSON data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Add(System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Add value to Doucment.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.ContainsKey(System.String)">
            <summary>
            Check to see if the value is set on the document.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Document.Keys">
            <summary>
            This list of attribute keys for the document.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Remove(System.String)">
            <summary>
            Remove the attribute from the Document.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Document.Values">
            <summary>
            Get a list of all the values in the Document.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Add(System.Collections.Generic.KeyValuePair{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Add attributes to Document.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Clear">
            <summary>
            Clear attributes from document.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Contains(System.Collections.Generic.KeyValuePair{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Check to see if the attributes are in the Document.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry}[],System.Int32)">
            <summary>
            Copies the attributes to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Document.Count">
            <summary>
            Gets the count of attributes.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Document.IsReadOnly">
            <summary>
            Returns true if the document is read only.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Remove(System.Collections.Generic.KeyValuePair{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Removes the attributes from the document.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.GetEnumerator">
            <summary>
            Gets the enumerator for the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Clone">
            <summary>
            Clones the Document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.Equals(System.Object)">
            <summary>
            Compare the document to see if it is equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Document.GetHashCode">
            <summary>
            Implements the GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet">
            <summary>
            Class for retrieving a batch of Documents from a single DynamoDB table.
            </summary>
            <summary>
            Class for retrieving a batch of Documents from a single DynamoDB table.
            </summary>
            <summary>
            Class for retrieving a batch of Documents from a single DynamoDB table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.Results">
            <summary>
            List of results retrieved from DynamoDB.
            Populated after Execute is called.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.AttributesToGet">
            <summary>
            List of attributes to retrieve.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.ConsistentRead">
            <summary>
            If set to true, a consistent read is issued. Otherwise eventually-consistent is used.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.#ctor(Amazon.DynamoDBv2.DocumentModel.Table)">
            <summary>
            Constructs a DocumentBatchGet instance for a specific table.
            </summary>
            <param name="targetTable">Table to get items from.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.AddKey(Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Add a single item to get, identified by its hash primary key.
            </summary>
            <param name="hashKey">Hash key element of the item to get.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.AddKey(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Add a single item to get, identified by its hash-and-range primary key.
            </summary>
            <param name="hashKey">Hash key element of the item to get.</param>
            <param name="rangeKey">Range key element of the item to get.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.AddKey(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Add a single item to get, identified by its key.
            </summary>
            <param name="key">Key of the item to get.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.Combine(Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet)">
            <summary>
            Creates a MultiTableDocumentBatchGet object that is a combination
            of the current DocumentBatchGet and the specified DocumentBatchGet.
            </summary>
            <param name="otherBatch">Other DocumentBatchGet object.</param>
            <returns>
            MultiTableDocumentBatchGet consisting of the two DocumentBatchGet
            objects.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet.Execute">
            <summary>
            Executes a server call to batch-get the documents requested.
            Populates Results with the retrieved items.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet">
            <summary>
            Class for retrieving a batch of Documents from multiple DynamoDB tables.
            </summary>
            <summary>
            Class for retrieving a batch of Documents from multiple DynamoDB tables.
            </summary>
            <summary>
            Class for retrieving a batch of Documents from multiple DynamoDB tables.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.Batches">
            <summary>
            List of DocumentBatchGet objects to include in the multi-table
            batch request.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.TotalKeys">
            <summary>
            Total number of primary keys in the multi-table batch request.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.#ctor(Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet[])">
            <summary>
            Constructs a MultiTableDocumentBatchGet object from a number of
            DocumentBatchGet objects.
            </summary>
            <param name="batches">Collection of DocumentBatchGet objects.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.AddBatch(Amazon.DynamoDBv2.DocumentModel.DocumentBatchGet)">
            <summary>
            Add a DocumentBatchGet object to the multi-table batch request.
            </summary>
            <param name="batch">DocumentBatchGet to add.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchGet.Execute">
            <summary>
            Executes a multi-table batch request against all configured batches.
            Results are stored in the respective DocumentBatchGet objects.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.MultiBatchGet">
            <summary>
            Internal class for handling multi-table batch gets.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.MultiBatchGet.Batches">
            <summary>
            Batches that comprise the current BatchGet operation
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.MultiBatchGet.MaxItemsPerCall">
            <summary>
            Maximum number of items that can be sent in a single BatchGet request
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiBatchGet.GetItems">
            <summary>
            Gets items ocnfigured in Batches from the server
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite">
            <summary>
            Class for putting and/or deleting a batch of items in a single DynamoDB table.
            </summary>
            <summary>
            Class for putting and/or deleting a batch of items in a single DynamoDB table.
            </summary>
            <summary>
            Class for putting and/or deleting a batch of items in a single DynamoDB table.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.#ctor(Amazon.DynamoDBv2.DocumentModel.Table)">
            <summary>
            Constructs a DocumentBatchWrite instance for a specific table.
            </summary>
            <param name="targetTable">Table to get items from.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.AddKeyToDelete(Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Add a single item to delete, identified by its hash primary key.
            </summary>
            <param name="hashKey">Hash key element of the item to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.AddKeyToDelete(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Add a single item to delete, identified by its hash-and-range primary key.
            </summary>
            <param name="hashKey">Hash key element of the item to delete.</param>
            <param name="rangeKey">Range key element of the item to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.AddKeyToDelete(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Add a single item to delete, identified by its key.
            </summary>
            <param name="key">Key of the item to delete.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.AddItemToDelete(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Add a single item to delete, identified by a Document object.
            </summary>
            <param name="document">Document representing the item to be deleted.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.AddDocumentToPut(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Add a single Document to put.
            </summary>
            <param name="document">Document to put.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.Combine(Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite)">
            <summary>
            Creates a MultiTableDocumentBatchWrite object that is a combination
            of the current DocumentBatchWrite and the specified DocumentBatchWrite.
            </summary>
            <param name="otherBatch">Other DocumentBatchWrite object.</param>
            <returns>
            MultiTableDocumentBatchWrite consisting of the two DocumentBatchWrite
            objects.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite.Execute">
            <summary>
            Executes a server call to batch-put/delete the item specified.
            
            If more than 25 put/delete operations are specified, calls of up to 25
            put/delete items will be made until all items are processed.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite">
            <summary>
            Class for putting and/or deleting a batch of items in multiple DynamoDB tables.
            </summary>
            <summary>
            Class for putting and/or deleting a batch of items in multiple DynamoDB tables.
            </summary>
            <summary>
            Class for putting and/or deleting a batch of items in multiple DynamoDB tables.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.Batches">
            <summary>
            List of DocumentBatchWrite objects to include in the multi-table
            batch request.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.#ctor(Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite[])">
            <summary>
            Constructs a MultiTableDocumentBatchWrite object from a number of
            DocumentBatchWrite objects.
            </summary>
            <param name="batches">Collection of DocumentBatchWrite objects.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.AddBatch(Amazon.DynamoDBv2.DocumentModel.DocumentBatchWrite)">
            <summary>
            Add a DocumentBatchWrite object to the multi-table batch request.
            </summary>
            <param name="batch">DocumentBatchWrite to add.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Execute operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.Execute"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiTableDocumentBatchWrite.Execute">
            <summary>
            Executes a multi-table batch put/delete against all configured batches.
            
            If more than 25 put/delete operations are specified, calls of up to 25
            put/delete items will be made until all items are processed.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.MultiBatchWrite">
            <summary>
            Internal class for handling multi-table batch writes.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.MultiBatchWrite.tableMap">
            <summary>
            Map which stores tables by its name.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.MultiBatchWrite.MaxItemsPerCall">
            <summary>
            Maximum number of items that can be sent in a single BatchWrite request
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.MultiBatchWrite.Batches">
            <summary>
            Batches that comprise the current BatchWrite operation
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.MultiBatchWrite.WriteItems(System.Boolean)">
            <summary>
            Pushes items configured in Batches to the server
            </summary>
            <param name="isAsync"></param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool">
            <summary>
            A DynamoDBEntry that represents a DynamoDB bool (BOOL) type.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.#ctor(System.Boolean)">
            <summary>
            Construct an instance of DynamnDBBool
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.Value">
            <summary>
            Gets and sets the Value property.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.True">
            <summary>
            Constant DynamoDBBool for the true value
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.False">
            <summary>
            Constant DynamoDBBool for the false value
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.Clone">
            <summary>
            Implement the Clone method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.AsBoolean">
            <summary>
            Explicitly convert DynamoDBBool to Boolean
            </summary>
            <returns>Boolean value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.op_Implicit(System.Boolean)~Amazon.DynamoDBv2.DocumentModel.DynamoDBBool">
            <summary>
            Implicitly convert Boolean to DynamoDBBool
            </summary>
            <param name="data">Boolean data to convert</param>
            <returns>DynamoDBBool representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBBool)~System.Boolean">
            <summary>
            Explicitly convert DynamoDBBool to Boolean
            </summary>
            <param name="p">DynamoDBBool to convert</param>
            <returns>Boolean value of DynamoDBBool</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.Equals(System.Object)">
            <summary>
            Implement the Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBBool.GetHashCode">
            <summary>
            Implement the GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Abstract class representing an arbitrary DynamoDB attribute value
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsPrimitive">
            <summary>
            Convert DynamoDBEntry to Primitive
            </summary>
            <returns>
            Primitive if DynamoDBEntry is of Primitive type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsPrimitiveList">
            <summary>
            Convert DynamoDBEntry to PrimitiveList
            </summary>
            <returns>
            PrimitiveList if DynamoDBEntry is of PrimitiveList type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDynamoDBList">
            <summary>
            Convert DynamoDBEntry to DynamoDBList
            </summary>
            <returns>
            DynamoDBList if DynamoDBEntry is of DynamoDBList type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDynamoDBBool">
            <summary>
            Convert DynamoDBEntry to DynamoDBBool
            </summary>
            <returns>
            DynamoDBBool if DynamoDBEntry is of DynamoDBBool type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDynamoDBNull">
            <summary>
            Convert DynamoDBEntry to DynamoDBNull
            </summary>
            <returns>
            DynamoDBNull if DynamoDBEntry is of DynamoDBNull type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDocument">
            <summary>
            Convert DynamoDBEntry to Document
            </summary>
            <returns>
            Document if DynamoDBEntry is of Document type; otherwise null
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsBoolean">
            <summary>
            Explicitly convert DynamoDBEntry to Boolean
            </summary>
            <returns>Boolean value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Boolean)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Boolean to DynamoDBEntry
            </summary>
            <param name="data">Boolean data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Boolean">
            <summary>
            Explicitly convert DynamoDBEntry to Boolean
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Boolean value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsByte">
            <summary>
            Explicitly convert DynamoDBEntry to Byte
            </summary>
            <returns>Byte value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Byte)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Byte to DynamoDBEntry
            </summary>
            <param name="data">Byte data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Byte">
            <summary>
            Explicitly convert DynamoDBEntry to Byte
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Byte value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsSByte">
            <summary>
            Explicitly convert DynamoDBEntry to SByte
            </summary>
            <returns>SByte value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.SByte)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert SByte to DynamoDBEntry
            </summary>
            <param name="data">SByte data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.SByte">
            <summary>
            Explicitly convert DynamoDBEntry to SByte
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>SByte value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsUShort">
            <summary>
            Explicitly convert DynamoDBEntry to UInt16
            </summary>
            <returns>UInt16 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.UInt16)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert UInt16 to DynamoDBEntry
            </summary>
            <param name="data">UInt16 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.UInt16">
            <summary>
            Explicitly convert DynamoDBEntry to UInt16
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>UInt16 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsShort">
            <summary>
            Explicitly convert DynamoDBEntry to Int16
            </summary>
            <returns>Int16 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Int16)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Int16 to DynamoDBEntry
            </summary>
            <param name="data">Int16 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Int16">
            <summary>
            Explicitly convert DynamoDBEntry to Int16
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Int16 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsUInt">
            <summary>
            Explicitly convert DynamoDBEntry to UInt32
            </summary>
            <returns>UInt32 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.UInt32)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert UInt32 to DynamoDBEntry
            </summary>
            <param name="data">UInt32 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.UInt32">
            <summary>
            Explicitly convert DynamoDBEntry to UInt32
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>UInt32 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsInt">
            <summary>
            Explicitly convert DynamoDBEntry to Int32
            </summary>
            <returns>Int32 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Int32)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Int32 to DynamoDBEntry
            </summary>
            <param name="data">Int32 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Int32">
            <summary>
            Explicitly convert DynamoDBEntry to Int32
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Int32 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsULong">
            <summary>
            Explicitly convert DynamoDBEntry to UInt64
            </summary>
            <returns>UInt64 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.UInt64)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert UInt64 to DynamoDBEntry
            </summary>
            <param name="data">UInt64 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.UInt64">
            <summary>
            Explicitly convert DynamoDBEntry to UInt64
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>UInt64 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsLong">
            <summary>
            Explicitly convert DynamoDBEntry to Int64
            </summary>
            <returns>Int64 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Int64)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Int64 to DynamoDBEntry
            </summary>
            <param name="data">Int64 data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Int64">
            <summary>
            Explicitly convert DynamoDBEntry to Int64
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Int64 value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsSingle">
            <summary>
            Explicitly convert DynamoDBEntry to Single
            </summary>
            <returns>Single value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Single)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Single to DynamoDBEntry
            </summary>
            <param name="data">Single data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Single">
            <summary>
            Explicitly convert DynamoDBEntry to Single
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Single value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDouble">
            <summary>
            Explicitly convert DynamoDBEntry to Double
            </summary>
            <returns>Double value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Double)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Double to DynamoDBEntry
            </summary>
            <param name="data">Double data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Double">
            <summary>
            Explicitly convert DynamoDBEntry to Double
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Double value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDecimal">
            <summary>
            Explicitly convert DynamoDBEntry to Decimal
            </summary>
            <returns>Decimal value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Decimal)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Decimal to DynamoDBEntry
            </summary>
            <param name="data">Decimal data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Decimal">
            <summary>
            Explicitly convert DynamoDBEntry to Decimal
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Decimal value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsChar">
            <summary>
            Explicitly convert DynamoDBEntry to Char
            </summary>
            <returns>Char value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Char)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Char to DynamoDBEntry
            </summary>
            <param name="data">Char data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Char">
            <summary>
            Explicitly convert DynamoDBEntry to Char
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Char value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsString">
            <summary>
            Explicitly convert DynamoDBEntry to String
            </summary>
            <returns>String value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.String)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert String to DynamoDBEntry
            </summary>
            <param name="data">String data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.String">
            <summary>
            Explicitly convert DynamoDBEntry to String
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>String value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsDateTime">
            <summary>
            Explicitly convert DynamoDBEntry to DateTime
            </summary>
            <returns>DateTime value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.DateTime)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert DateTime to DynamoDBEntry
            </summary>
            <param name="data">DateTime data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.DateTime">
            <summary>
            Explicitly convert DynamoDBEntry to DateTime
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>DateTime value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsGuid">
            <summary>
            Explicitly convert DynamoDBEntry to Guid
            </summary>
            <returns>Guid value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Guid)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Guid to DynamoDBEntry
            </summary>
            <param name="data">Guid data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Guid">
            <summary>
            Explicitly convert DynamoDBEntry to Guid
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Guid value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsByteArray">
            <summary>
            Explicitly convert DynamoDBEntry to byte[]
            </summary>
            <returns>byte[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Byte[])~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert byte[] to DynamoDBEntry
            </summary>
            <param name="data">byte[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Byte[]">
            <summary>
            Explicitly convert DynamoDBEntry to byte[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>byte[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsMemoryStream">
            <summary>
            Explicitly convert DynamoDBEntry to MemoryStream
            </summary>
            <returns>MemoryStream value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.IO.MemoryStream)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert MemoryStream to DynamoDBEntry
            </summary>
            <param name="data">MemoryStream data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.IO.MemoryStream">
            <summary>
            Explicitly convert DynamoDBEntry to MemoryStream
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>MemoryStream value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsArrayOfDynamoDBEntry">
            <summary>
            Explicitly convert DynamoDBEntry to DynamoDBEntry[]
            </summary>
            <returns>DynamoDBEntry[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfDynamoDBEntry">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;DynamoDBEntry&gt;
            </summary>
            <returns>List&lt;DynamoDBEntry&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsHashSetOfDynamoDBEntry">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;DynamoDBEntry&gt;
            </summary>
            <returns>HashSet&lt;DynamoDBEntry&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsArrayOfPrimitive">
            <summary>
            Explicitly convert DynamoDBEntry to Primitive[]
            </summary>
            <returns>Primitive[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(Amazon.DynamoDBv2.DocumentModel.Primitive[])~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert Primitive[] to DynamoDBEntry
            </summary>
            <param name="data">Primitive[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~Amazon.DynamoDBv2.DocumentModel.Primitive[]">
            <summary>
            Explicitly convert DynamoDBEntry to Primitive[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Primitive[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfPrimitive">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;Primitive&gt;
            </summary>
            <returns>List&lt;Primitive&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Primitive})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert List&lt;Primitive&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;Primitive&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Primitive}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;Primitive&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;Primitive&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsHashSetOfPrimitive">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;Primitive&gt;
            </summary>
            <returns>HashSet&lt;Primitive&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.HashSet{Amazon.DynamoDBv2.DocumentModel.Primitive})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert HashSet&lt;Primitive&gt; to DynamoDBEntry
            </summary>
            <param name="data">HashSet&lt;Primitive&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.HashSet{Amazon.DynamoDBv2.DocumentModel.Primitive}">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;Primitive&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>HashSet&lt;Primitive&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfDocument">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;Document&gt;
            </summary>
            <returns>List&lt;Document&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Document})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert List&lt;Document&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;Document&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Document}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;Document&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;Document&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsArrayOfString">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <returns>String[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.String[])~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert String[] to DynamoDBEntry
            </summary>
            <param name="data">String[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.String[]">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>String[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfString">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.List{System.String})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert List&lt;String&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;String&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.List{System.String}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;String&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;String&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsHashSetOfString">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.HashSet{System.String})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert HashSet&lt;String&gt; to DynamoDBEntry
            </summary>
            <param name="data">HashSet&lt;String&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.HashSet{System.String}">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;String&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>HashSet&lt;String&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfByteArray">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;byte[]&gt;
            </summary>
            <returns>List&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.List{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert List&lt;byte[]&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;byte[]&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.List{System.Byte[]}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;byte[]&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;byte[]&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsHashSetOfByteArray">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;byte[]&gt;
            </summary>
            <returns>HashSet&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.HashSet{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert HashSet&lt;byte[]&gt; to DynamoDBEntry
            </summary>
            <param name="data">HashSet&lt;byte[]&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.HashSet{System.Byte[]}">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;byte[]&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>HashSet&lt;byte[]&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsListOfMemoryStream">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;MemoryStream&gt;
            </summary>
            <returns>List&lt;MemoryStream&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.List{System.IO.MemoryStream})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert List&lt;MemoryStream&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;MemoryStream&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.List{System.IO.MemoryStream}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;MemoryStream&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;MemoryStream&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.AsHashSetOfMemoryStream">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;MemoryStream&gt;
            </summary>
            <returns>HashSet&lt;MemoryStream&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Implicit(System.Collections.Generic.HashSet{System.IO.MemoryStream})~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry">
            <summary>
            Implicitly convert HashSet&lt;MemoryStream&gt; to DynamoDBEntry
            </summary>
            <param name="data">HashSet&lt;MemoryStream&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)~System.Collections.Generic.HashSet{System.IO.MemoryStream}">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;MemoryStream&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>HashSet&lt;MemoryStream&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry.Clone">
            <summary>
            Declare the Clone method must be implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry">
            <summary>
            A DynamoDBEntry holding an unconverted object.
            The entry is converted to a converted DynamoDBEntry either by the
            consuming Document or Table.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.#ctor(System.Object)">
            <summary>
            Construct instance of UnconvertedDynamoDBEntry
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.Convert(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Perform conversion with the given converter.
            </summary>
            <param name="conversion"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.Clone">
            <summary>
            Implememnt the Clone method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsBoolean">
            <summary>
            Return the value as a boolean.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsByte">
            <summary>
            Return the value as a byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsString">
            <summary>
            Return the value as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsChar">
            <summary>
            Return the value as a char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsDateTime">
            <summary>
            Return the value as a DateTime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsDecimal">
            <summary>
            Return the value as a Decimal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsDouble">
            <summary>
            Return the value as a double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsInt">
            <summary>
            Return the value as int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsLong">
            <summary>
            Return the value as a long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsSByte">
            <summary>
            Return the value as a sbyte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsShort">
            <summary>
            Return the value as a short.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsSingle">
            <summary>
            Return the value as single.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsUInt">
            <summary>
            Return the value as uint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsULong">
            <summary>
            Return the value as ulong.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsUShort">
            <summary>
            Return the value as ushort.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsArrayOfString">
            <summary>
            Return the value as array of strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsByteArray">
            <summary>
            Return value as byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsGuid">
            <summary>
            Return value as Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsMemoryStream">
            <summary>
            Return value as MemoryStream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsListOfString">
            <summary>
            Return value as List of strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsHashSetOfByteArray">
            <summary>
            Return value as HashSet of byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsHashSetOfMemoryStream">
            <summary>
            Return value as HashSet of MemoryStream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsHashSetOfString">
            <summary>
            Return value as HashSet of string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsListOfByteArray">
            <summary>
            Return value as List of byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.UnconvertedDynamoDBEntry.AsListOfMemoryStream">
            <summary>
            Return value as List of MemoryStream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            A DynamoDBEntry that represents a DynamoDB list (L) type.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.#ctor">
            <summary>
            Constructs an empty DynamoDBList.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.#ctor(System.Collections.Generic.IEnumerable{Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Construct an instance DynamoDBList.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a DynamODBList from an IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Entries">
            <summary>
            Collection of DynamoDB entries
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Item(System.Int32)">
            <summary>
            Gets or sets DynamoDB at a specific location in the list.
            </summary>
            <param name="i">Index of the DynamoDB in question.</param>
            <returns>DynamoDB in question.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Add(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry)">
            <summary>
            Adds a DynamoDB to the end of the list.
            </summary>
            <param name="value">DynamoDB to add.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.ForceConversion(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Returns a new instance of Document where all unconverted .NET types
            are converted to DynamoDBEntry types using a specific conversion.
            </summary>
            <param name="conversion"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Clone">
            <summary>
            Implement the Clone method.s
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.Equals(System.Object)">
            <summary>
            Implement the Equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.GetHashCode">
            <summary>
            Implement the GetHashCode method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsArrayOfDynamoDBEntry">
            <summary>
            Explicitly convert DynamoDBList to DynamoDBEntry[]
            </summary>
            <returns>DynamoDBEntry[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert DynamoDBEntry[] to DynamoDBList
            </summary>
            <param name="data">DynamoDBEntry[] data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[]">
            <summary>
            Explicitly convert DynamoDBList to DynamoDBEntry[]
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>DynamoDBEntry[] value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsListOfDynamoDBEntry">
            <summary>
            Explicitly convert DynamoDBList to List&lt;DynamoDBEntry&gt;
            </summary>
            <returns>List&lt;DynamoDBEntry&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert List&lt;DynamoDBEntry&gt; to DynamoDBList
            </summary>
            <param name="data">List&lt;DynamoDBEntry&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry}">
            <summary>
            Explicitly convert DynamoDBList to List&lt;DynamoDBEntry&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>List&lt;DynamoDBEntry&gt; value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsListOfDocument">
            <summary>
            Explicitly convert DynamoDBList to List&lt;Document&gt;
            </summary>
            <returns>List&lt;Document&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Document})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert List&lt;Document&gt; to DynamoDBEntry
            </summary>
            <param name="data">List&lt;Document&gt; data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Document}">
            <summary>
            Explicitly convert DynamoDBEntry to List&lt;Document&gt;
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>List&lt;Document&gt; value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsArrayOfString">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <returns>String[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.String[])~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert String[] to DynamoDBEntry
            </summary>
            <param name="data">String[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.String[]">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>String[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsListOfString">
            <summary>
            Explicitly convert DynamoDBList to List&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.List{System.String})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert List&lt;String&gt; to DynamoDBList
            </summary>
            <param name="data">List&lt;String&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.List{System.String}">
            <summary>
            Explicitly convert DynamoDBList to List&lt;String&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>List&lt;String&gt; value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsHashSetOfString">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.HashSet{System.String})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert HashSet&lt;String&gt; to DynamoDBList
            </summary>
            <param name="data">HashSet&lt;String&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.HashSet{System.String}">
            <summary>
            Explicitly convert DynamoDBList to HashSet&lt;String&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>HashSet&lt;String&gt; value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsListOfByteArray">
            <summary>
            Explicitly convert DynamoDBList to byte[]
            </summary>
            <returns>List&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.List{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert List&lt;byte[]&gt; to DynamoDBList
            </summary>
            <param name="data">List&lt;byte[]&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.List{System.Byte[]}">
            <summary>
            Explicitly convert DynamoDBList to List&lt;byte[]&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>List&lt;byte[]&gt; value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsHashSetOfByteArray">
            <summary>
            Explicitly convert DynamoDBList to HashSet&lt;byte[]&gt;
            </summary>
            <returns>HashSet&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.HashSet{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert HashSet&lt;byte[]&gt; to DynamoDBList
            </summary>
            <param name="data">HashSet&lt;byte[]&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.HashSet{System.Byte[]}">
            <summary>
            Explicitly convert DynamoDBList to HashSet&lt;byte[]&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>HashSet&lt;byte[]&gt; value of DynamoDBList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.AsListOfMemoryStream">
            <summary>
            Explicitly convert DynamoDBList to List&lt;MemoryStream&gt;
            </summary>
            <returns>List&lt;MemoryStream&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Implicit(System.Collections.Generic.List{System.IO.MemoryStream})~Amazon.DynamoDBv2.DocumentModel.DynamoDBList">
            <summary>
            Implicitly convert List&lt;MemoryStream&gt; to DynamoDBList
            </summary>
            <param name="data">List&lt;MemoryStream&gt; data to convert</param>
            <returns>DynamoDBList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.DynamoDBList)~System.Collections.Generic.List{System.IO.MemoryStream}">
            <summary>
            Explicitly convert DynamoDBList to List&lt;MemoryStream&gt;
            </summary>
            <param name="p">DynamoDBList to convert</param>
            <returns>List&lt;MemoryStream&gt; value of DynamoDBList</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull">
            <summary>
            A DynamoDBEntry that represents a DynamoDB null (NULL) type.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull.Null">
            <summary>
            Constant DynamoDBNull for the Null value.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull.Clone">
            <summary>
            Implement the Clone method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull.Equals(System.Object)">
            <summary>
            Implement the Equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.DynamoDBNull.GetHashCode">
            <summary>
            Implement the GetHashCode method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ExpectedValue">
            <summary>
            Expected state of an attribute in DynamoDB.
            Exists cannot be set at the same time as Comparison and Values.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.Exists">
            <summary>
            Flag whether the attribute should exist or not.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.Comparison">
            <summary>
            Comparison operator for the expected value.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.Values">
            <summary>
            Values to compare the attribute against.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.#ctor(System.Boolean)">
            <summary>
            Constructs an ExpectedValue with a given Exists value.
            </summary>
            <param name="exists">
            Flag whether the attribute should exist or not.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.#ctor(Amazon.DynamoDBv2.DocumentModel.ScanOperator,Amazon.DynamoDBv2.DocumentModel.Primitive[])">
            <summary>
            Constructs an ExpectedValue with a given comparison and value(s).
            </summary>
            <param name="comparison"></param>
            <param name="values"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.ToExpectedAttributeValue">
            <summary>
            Converts this ExpectedValue instance to Amazon.DynamoDBv2.Model.ExpectedAttributeValue
            This call will use the conversion specified by AWSConfigs.DynamoDBConfig.ConversionSchema
            </summary>
            <returns>Amazon.DynamoDBv2.Model.ExpectedAttributeValue</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedValue.ToExpectedAttributeValue(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Converts this ExpectedValue instance to Amazon.DynamoDBv2.Model.ExpectedAttributeValue
            </summary>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns>Amazon.DynamoDBv2.Model.ExpectedAttributeValue</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ExpectedState">
            <summary>
            Expected state of an item in DynamoDB.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.#ctor">
            <summary>
            Constructs an empty ExpectedState with ConditionalOeprator set to AND.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ExpectedState.ExpectedValues">
            <summary>
            Attribute name to ExpectedValue mapping.
            Represents the expected state of a number of attributes of a DynamoDB item.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ExpectedState.ConditionalOperator">
            <summary>
            Operator dictating whether ALL or SOME of the expected values must be true to
            satisfy the overall expected state.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.AddExpected(System.String,System.Boolean)">
            <summary>
            Adds an ExpectedValue with the specific Exists value for the attribute.
            </summary>
            <param name="attributeName">Attribute that is being tested</param>
            <param name="exists">Flag whether the attribute should exist or not.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.AddExpected(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,Amazon.DynamoDBv2.DocumentModel.Primitive[])">
            <summary>
            Adds an ExpectedValue with the specific Comparison and Values for the attribute.
            </summary>
            <param name="attributeName">Attribute that is being tested</param>
            <param name="comparison">Comparison operator for the expected value.</param>
            <param name="values">Values to compare the attribute against.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.ToExpectedAttributeMap">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            This call will use the conversion specified by AWSConfigs.DynamoDBConfig.ConversionSchema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.ToExpectedAttributeMap(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            </summary>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ExpectedState.ToExpectedAttributeMap(Amazon.DynamoDBv2.DocumentModel.Table)">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            This call will use the conversion specified in the table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Expression">
            <summary>
            Expressions are used for conditional deletes and filtering for query and scan operations.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Expression.ExpressionStatement">
            <summary>
            Gets and sets the property ExpressionStatement. "Price > :price" is an example expression statement. 
            :price is a variable which gets its value from the ExpressionAttributeValues collection. If this is used
            for deletes then it prevents the delete from happening if the Price attribute on the item is less then the passed
            in price. For query and scan it will only return back items where the Price attribute is greater then passed
            in price.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Expression.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. This collection contains attribute names from the item
            that should be substituted in the expression when it is evaluated. For example the expression "#C &lt; #U" will 
            expect the attribute names to be added to this collection.
            <code>
            expression.ExpressionAttributeNames["#C"] = "CriticRating"
            expression.ExpressionAttributeNames["#U"] = "UserRating"
            </code>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Expression.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. This collection contains the values to be substituted in the expression. 
            For example the expression "Price > :price" will contain one entry in this collection a key of ":price". 
            <para>
            DynamoDBEntry contains many common implicit cast operations so assignment can be done with the basic .NET types.
            In the price example shown above the value to be used for the expression can be provided using the following code snippet:
            <code>
            expression.ExpressionAttributeValues[":price"] = 3.99;
            </code>
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Filter">
            <summary>
            Filter for use with scan and query operations
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition">
            <summary>
            Filter conditions
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.AttributeValues">
            <summary>
            Gets the AttributeValues property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.DynamoDBEntries">
            <summary>
            Gets the DynamoDBEntries property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.ComparisonOperator">
            <summary>
            Gets the ComparisonOperator property.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.#ctor(Amazon.DynamoDBv2.ComparisonOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Construct instance of FilterCondition
            </summary>
            <param name="comparisonOperator"></param>
            <param name="attributeValues"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.#ctor(Amazon.DynamoDBv2.ComparisonOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Construct instance of FilterCondition
            </summary>
            <param name="comparisonOperator"></param>
            <param name="dynamoDBEntries"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.#ctor(Amazon.DynamoDBv2.Model.Condition)">
            <summary>
            Construct instance of FilterCondition
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.ToCondition(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Converts the FilterCondition to the Amazon.DynamoDBv2.Model.Condition object.
            </summary>
            <param name="conversion"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition.ToCondition(Amazon.DynamoDBv2.DynamoDBEntryConversion,System.Boolean,System.String)">
            <summary>
            Converts the FilterCondition to the Amazon.DynamoDBv2.Model.Condition object.
            </summary>
            <param name="conversion"></param>
            <param name="shouldConvertToEpochSeconds"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Filter.Conditions">
            <summary>
            Gets the Conditions for the filter.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.ToConditions">
            <summary>
            Converts filter to a map of conditions
            This call will use the conversion specified by AWSConfigs.DynamoDBConfig.ConversionSchema
            </summary>
            <returns>Map from attribute name to condition</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.ToConditions(Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Converts filter to a map of conditions
            </summary>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns>Map from attribute name to condition</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.ToConditions(Amazon.DynamoDBv2.DocumentModel.Table)">
            <summary>
            Converts filter to a map of conditions
            </summary>
            <param name="table">Table to use for converting .NET values to DynamoDB values.</param>
            <returns>Map from attribute name to condition</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.FromConditions(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition})">
            <summary>
            Creates a Filter from a conditions map
            </summary>
            <param name="conditions">Map from attribute name to condition</param>
            <returns>Equivalent Filter</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.ConvertToAttributeValues(Amazon.DynamoDBv2.DynamoDBEntryConversion,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])">
            <summary>
            Creates a list of AttributeValues from a list of DynamoDBEntry items 
            </summary>
            <param name="conversion"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.AddCondition(System.String,Amazon.DynamoDBv2.Model.Condition)">
            <summary>
            Adds a condition for a specified attribute.
            
            If a condition for the attribute already exists,
            it will be replaced with the new condition.
            </summary>
            <param name="attributeName">Target attribute name</param>
            <param name="condition">Condition to be added</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.AddCondition(System.String,Amazon.DynamoDBv2.ComparisonOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry})">
            <summary>
            Adds a condition 
            </summary>
            <param name="attributeName"></param>
            <param name="comparisonOperator"></param>
            <param name="values"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.Filter.FilterCondition)">
            <summary>
            Adds a condition
            </summary>
            <param name="attributeName"></param>
            <param name="filterCondition"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Filter.RemoveCondition(System.String)">
            <summary>
            Removes a condition for a specific attribute name.
            </summary>
            <param name="attributeName">Target attribute</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ScanFilter">
            <summary>
            Scan filter.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ScanFilter.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ScanFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Adds a condition for a specified attribute that consists
            of an operator and any number of AttributeValues.
            </summary>
            <param name="attributeName">Target attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">AttributeValues to compare to</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ScanFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])">
            <summary>
            Adds a condition for a specified attribute that consists
            of an operator and any number of values
            </summary>
            <param name="attributeName">Target attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">Values to compare to</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.QueryFilter">
            <summary>
            Query filter.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.#ctor">
            <summary>
            Constructs an empty QueryFilter instance
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.#ctor(System.String,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Constructs an instance of QueryFilter with a single condition.
            More conditions can be added after initialization.
            </summary>
            <param name="attributeName">Target attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">Attributes to compare</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.#ctor(System.String,Amazon.DynamoDBv2.DocumentModel.QueryOperator,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])">
            <summary>
            Constructs an instance of QueryFilter with a single condition.
            More conditions can be added after initialization.
            </summary>
            <param name="attributeName">Target attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">Attributes to compare</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.QueryOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Adds a condition for a specified key attribute that consists
            of an operator and any number of AttributeValues.
            </summary>
            <param name="keyAttributeName">Target key attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">AttributeValues to compare to</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.QueryOperator,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])">
            <summary>
            Adds a condition for a specified key attribute that consists
            of an operator and any number of values
            </summary>
            <param name="keyAttributeName">Target key attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">Values to compare to</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Adds a condition for a specified non-key attribute that consists
            of an operator and any number of AttributeValues.
            </summary>
            <param name="nonKeyAttributeName">Target non-key attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">AttributeValues to compare to</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryFilter.AddCondition(System.String,Amazon.DynamoDBv2.DocumentModel.ScanOperator,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry[])">
            <summary>
            Adds a condition for a specified non-key attribute that consists
            of an operator and any number of values
            </summary>
            <param name="nonKeyAttributeName">Target non-key attribute name</param>
            <param name="op">Comparison operator</param>
            <param name="values">Values to compare to</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.JsonUtils">
            <summary>
            Utility methods to handle conversion from/to JSON
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.JsonUtils.FromJson(System.String)">
            <summary>
            Parses JSON text to produce Document.
            </summary>
            <param name="jsonText"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.JsonUtils.ToJson(Amazon.DynamoDBv2.DocumentModel.Document,System.Boolean)">
            <summary>
            Creates JSON text for a given Document
            </summary>
            <param name="document"></param>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.JsonUtils.DecodeBase64Attributes(Amazon.DynamoDBv2.DocumentModel.Document,System.String[])">
            <summary>
            Decodes specific attributes from base64 to their binary representation.
            </summary>
            <param name="document"></param>
            <param name="attributeNames"></param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntryType">
            <summary>
            Enumerator describing type of DynamoDB data in a Primitive or PrimitiveList
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntryType.String">
            <summary>
            DynamoDB String type.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntryType.Numeric">
            <summary>
            DynamoDB Numeric type.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.DynamoDBEntryType.Binary">
            <summary>
            DynamoDB Binary type.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            A DynamoDBEntry that represents a scalar DynamoDB type
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.#ctor">
            <summary>
            Constructs an empty Primitive
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.#ctor(System.String)">
            <summary>
            Constructs a Primitive with the specified value.
            Value is stored as a string, not numeric.
            </summary>
            <param name="value">Value of the Primitive</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a Primitive with the specified value
            and specifies whether it should be stored as a number or not.
            </summary>
            <param name="value">Value of the Primitive</param>
            <param name="saveAsNumeric">
            Flag, set to true if value should be treated as a number instead of a string
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.#ctor(System.IO.MemoryStream)">
            <summary>
            Constructs a Binary Primitive with the specified MemoryStream value.
            Note: Primitive's Value is set to the stream's ToArray() response.
            </summary>
            <param name="value">Value of the Primitive</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.#ctor(System.Byte[])">
            <summary>
            Constructs a Binary Primitive with the specified byte[] value.
            </summary>
            <param name="value">Value of the Primitive</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Primitive.Value">
            <summary>
            Value of the Primitive.
            If Type is String or Numeric, this property is a string.
            If Type is Binary, this property is a byte array.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Primitive.Type">
            <summary>
            Type of this primitive object
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsBoolean">
            <summary>
            Explicitly convert Primitive to Boolean
            </summary>
            <returns>Boolean value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Boolean)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Boolean to Primitive
            </summary>
            <param name="data">Boolean data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Boolean">
            <summary>
            Explicitly convert Primitive to Boolean
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Boolean value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsByte">
            <summary>
            Explicitly convert Primitive to Byte
            </summary>
            <returns>Byte value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Byte)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Byte to Primitive
            </summary>
            <param name="data">Byte data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Byte">
            <summary>
            Explicitly convert Primitive to Byte
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Byte value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsSByte">
            <summary>
            Explicitly convert Primitive to SByte
            </summary>
            <returns>SByte value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.SByte)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert SByte to Primitive
            </summary>
            <param name="data">SByte data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.SByte">
            <summary>
            Explicitly convert Primitive to SByte
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>SByte value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsUShort">
            <summary>
            Explicitly convert Primitive to UInt16
            </summary>
            <returns>UInt16 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.UInt16)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert UInt16 to Primitive
            </summary>
            <param name="data">UInt16 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.UInt16">
            <summary>
            Explicitly convert Primitive to UInt16
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>UInt16 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsShort">
            <summary>
            Explicitly convert Primitive to Int16
            </summary>
            <returns>Int16 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Int16)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Int16 to Primitive
            </summary>
            <param name="data">Int16 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Int16">
            <summary>
            Explicitly convert Primitive to Int16
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Int16 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsUInt">
            <summary>
            Explicitly convert Primitive to UInt32
            </summary>
            <returns>UInt32 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.UInt32)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert UInt32 to Primitive
            </summary>
            <param name="data">UInt32 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.UInt32">
            <summary>
            Explicitly convert Primitive to UInt32
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>UInt32 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsInt">
            <summary>
            Explicitly convert Primitive to Int32
            </summary>
            <returns>Int32 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Int32)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Int32 to Primitive
            </summary>
            <param name="data">Int32 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Int32">
            <summary>
            Explicitly convert Primitive to Int32
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Int32 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsULong">
            <summary>
            Explicitly convert Primitive to UInt64
            </summary>
            <returns>UInt64 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.UInt64)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert UInt64 to Primitive
            </summary>
            <param name="data">UInt64 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.UInt64">
            <summary>
            Explicitly convert Primitive to UInt64
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>UInt64 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsLong">
            <summary>
            Explicitly convert Primitive to Int64
            </summary>
            <returns>Int64 value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Int64)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Int64 to Primitive
            </summary>
            <param name="data">Int64 data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Int64">
            <summary>
            Explicitly convert Primitive to Int64
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Int64 value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsSingle">
            <summary>
            Explicitly convert Primitive to Single
            </summary>
            <returns>Single value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Single)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Single to Primitive
            </summary>
            <param name="data">Single data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Single">
            <summary>
            Explicitly convert Primitive to Single
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Single value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsDouble">
            <summary>
            Explicitly convert Primitive to Double
            </summary>
            <returns>Double value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Double)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Double to Primitive
            </summary>
            <param name="data">Double data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Double">
            <summary>
            Explicitly convert Primitive to Double
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Double value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsDecimal">
            <summary>
            Explicitly convert Primitive to Decimal
            </summary>
            <returns>Decimal value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Decimal)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Decimal to Primitive
            </summary>
            <param name="data">Decimal data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Decimal">
            <summary>
            Explicitly convert Primitive to Decimal
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Decimal value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsChar">
            <summary>
            Explicitly convert Primitive to Char
            </summary>
            <returns>Char value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Char)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Char to Primitive
            </summary>
            <param name="data">Char data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Char">
            <summary>
            Explicitly convert Primitive to Char
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Char value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsString">
            <summary>
            Explicitly convert Primitive to String
            </summary>
            <returns>String value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.String)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert String to Primitive
            </summary>
            <param name="data">String data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.String">
            <summary>
            Explicitly convert Primitive to String
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>String value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsDateTime">
            <summary>
            Explicitly convert Primitive to DateTime
            </summary>
            <returns>DateTime value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.DateTime)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert DateTime to Primitive
            </summary>
            <param name="data">DateTime data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.DateTime">
            <summary>
            Explicitly convert Primitive to DateTime
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>DateTime value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsGuid">
            <summary>
            Explicitly convert Primitive to Guid
            </summary>
            <returns>Guid value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Guid)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert Guid to Primitive
            </summary>
            <param name="data">Guid data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Guid">
            <summary>
            Explicitly convert Primitive to Guid
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>Guid value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsByteArray">
            <summary>
            Explicitly convert Primitive to byte[]
            </summary>
            <returns>byte[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.Byte[])~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert byte[] to Primitive
            </summary>
            <param name="data">byte[] data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.Byte[]">
            <summary>
            Explicitly convert Primitive to byte[]
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>byte[] value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.AsMemoryStream">
            <summary>
            Explicitly convert Primitive to MemoryStream
            </summary>
            <returns>MemoryStream value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Implicit(System.IO.MemoryStream)~Amazon.DynamoDBv2.DocumentModel.Primitive">
            <summary>
            Implicitly convert MemoryStream to Primitive
            </summary>
            <param name="data">MemoryStream data to convert</param>
            <returns>Primitive representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.op_Explicit(Amazon.DynamoDBv2.DocumentModel.Primitive)~System.IO.MemoryStream">
            <summary>
            Explicitly convert Primitive to MemoryStream
            </summary>
            <param name="p">Primitive to convert</param>
            <returns>MemoryStream value of Primitive</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.ToString">
            <summary>
            Implement the ToString method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.Clone">
            <summary>
            Implement the Clone method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.GetHashCode">
            <summary>
            Implement the GetHashCode method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.Equals(System.Object)">
            <summary>
            Implement the Equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Primitive.Equals(Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Implement the Equals method from the IEquatable interface.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            A DynamoDBEntry that represents a primitive list DynamoDB type
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.#ctor">
            <summary>
            Constructs an empty PrimitiveList.
            Values are configured to be saved as strings.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.#ctor(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntryType)">
            <summary>
            Constructs an empty PrimitiveList and specifies
            the type of its elements.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Entries">
            <summary>
            Collection of Primitive entries
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Type">
            <summary>
            Type of Primitive items in the list
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Item(System.Int32)">
            <summary>
            Gets or sets Primitive at a specific location in the list.
            </summary>
            <param name="i">Index of the Primitive in question.</param>
            <returns>Primitive in question.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Add(Amazon.DynamoDBv2.DocumentModel.Primitive)">
            <summary>
            Adds a Primitive to the end of the list.
            </summary>
            <param name="value">Primitive to add.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsArrayOfPrimitive">
            <summary>
            Explicitly convert DynamoDBEntry to Primitive[]
            </summary>
            <returns>Primitive[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(Amazon.DynamoDBv2.DocumentModel.Primitive[])~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert Primitive[] to DynamoDBEntry
            </summary>
            <param name="data">Primitive[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~Amazon.DynamoDBv2.DocumentModel.Primitive[]">
            <summary>
            Explicitly convert DynamoDBEntry to Primitive[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>Primitive[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsListOfPrimitive">
            <summary>
            Explicitly convert PrimitiveList to List&lt;Primitive&gt;
            </summary>
            <returns>List&lt;Primitive&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Primitive})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert List&lt;Primitive&gt; to PrimitiveList
            </summary>
            <param name="data">List&lt;Primitive&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.List{Amazon.DynamoDBv2.DocumentModel.Primitive}">
            <summary>
            Explicitly convert PrimitiveList to List&lt;Primitive&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>List&lt;Primitive&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsHashSetOfPrimitive">
            <summary>
            Explicitly convert PrimitiveList to HashSet&lt;Primitive&gt;
            </summary>
            <returns>HashSet&lt;Primitive&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.HashSet{Amazon.DynamoDBv2.DocumentModel.Primitive})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert HashSet&lt;Primitive&gt; to PrimitiveList
            </summary>
            <param name="data">HashSet&lt;Primitive&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.HashSet{Amazon.DynamoDBv2.DocumentModel.Primitive}">
            <summary>
            Explicitly convert PrimitiveList to HashSet&lt;Primitive&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>HashSet&lt;Primitive&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsArrayOfString">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <returns>String[] value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.String[])~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert String[] to DynamoDBEntry
            </summary>
            <param name="data">String[] data to convert</param>
            <returns>DynamoDBEntry representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.String[]">
            <summary>
            Explicitly convert DynamoDBEntry to String[]
            </summary>
            <param name="p">DynamoDBEntry to convert</param>
            <returns>String[] value of DynamoDBEntry</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsListOfString">
            <summary>
            Explicitly convert PrimitiveList to List&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.List{System.String})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert List&lt;String&gt; to PrimitiveList
            </summary>
            <param name="data">List&lt;String&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.List{System.String}">
            <summary>
            Explicitly convert PrimitiveList to List&lt;String&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>List&lt;String&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsHashSetOfString">
            <summary>
            Explicitly convert DynamoDBEntry to HashSet&lt;String&gt;
            </summary>
            <returns>List&lt;String&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.HashSet{System.String})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert HashSet&lt;String&gt; to PrimitiveList
            </summary>
            <param name="data">HashSet&lt;String&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.HashSet{System.String}">
            <summary>
            Explicitly convert PrimitiveList to HashSet&lt;String&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>HashSet&lt;String&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsListOfByteArray">
            <summary>
            Explicitly convert PrimitiveList to byte[]
            </summary>
            <returns>List&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.List{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert List&lt;byte[]&gt; to PrimitiveList
            </summary>
            <param name="data">List&lt;byte[]&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.List{System.Byte[]}">
            <summary>
            Explicitly convert PrimitiveList to List&lt;byte[]&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>List&lt;byte[]&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsHashSetOfByteArray">
            <summary>
            Explicitly convert PrimitiveList to HashSet&lt;byte[]&gt;
            </summary>
            <returns>HashSet&lt;byte[]&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.HashSet{System.Byte[]})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert HashSet&lt;byte[]&gt; to PrimitiveList
            </summary>
            <param name="data">HashSet&lt;byte[]&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.HashSet{System.Byte[]}">
            <summary>
            Explicitly convert PrimitiveList to HashSet&lt;byte[]&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>HashSet&lt;byte[]&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.AsListOfMemoryStream">
            <summary>
            Explicitly convert PrimitiveList to List&lt;MemoryStream&gt;
            </summary>
            <returns>List&lt;MemoryStream&gt; value of this object</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Implicit(System.Collections.Generic.List{System.IO.MemoryStream})~Amazon.DynamoDBv2.DocumentModel.PrimitiveList">
            <summary>
            Implicitly convert List&lt;MemoryStream&gt; to PrimitiveList
            </summary>
            <param name="data">List&lt;MemoryStream&gt; data to convert</param>
            <returns>PrimitiveList representing the data</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.op_Explicit(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)~System.Collections.Generic.List{System.IO.MemoryStream}">
            <summary>
            Explicitly convert PrimitiveList to List&lt;MemoryStream&gt;
            </summary>
            <param name="p">PrimitiveList to convert</param>
            <returns>List&lt;MemoryStream&gt; value of PrimitiveList</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Clone">
            <summary>
            Implement the Clone method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.GetHashCode">
            <summary>
            Implement the GetHashCode method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Equals(System.Object)">
            <summary>
            Implement the Equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.PrimitiveList.Equals(Amazon.DynamoDBv2.DocumentModel.PrimitiveList)">
            <summary>
            Implement the Equals method from IEquatable
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Search">
            <summary>
            Search response object
            </summary>
            <summary>
            Search response object
            </summary>
            <summary>
            Search response object
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.TableName">
            <summary>
            Name of the table being searched
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.CollectResults">
            <summary>
            Whether to collect GetNextSet and GetRemaining results in Matches property.
            Default is true. If set to false, Matches will always be empty.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Limit">
            <summary>
            Upper limit on the number of items returned.
            For Queries: upper limit on the number of items returned.
            For Scan: limit on the number of items scanned.
            
            Maps directly to Limit property on Query and Scan operations.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.KeyExpression">
            <summary>
            The key expression that is evaluated for each item of a query.
            This applies only to Query operations.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.FilterExpression">
            <summary>
            The filter expression that is evaluated for each item.
            This applies to Query and Scan operations.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Filter">
            <summary>
            Filter for the search operation
            This applies to Query and Scan operations.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.ConditionalOperator">
            <summary>
            Conditional operator for the search operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.AttributesToGet">
            <summary>
            List of attribute names to retrieve
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.IsConsistentRead">
            <summary>
            Flag that, if true, indicates that the search is operating in consistent-read mode
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.IsBackwardSearch">
            <summary>
            Flag that, if true, indicates that the search is traversing backwards
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.IsDone">
            <summary>
            Flag that, if true, indicates that the search is done
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.NextKey">
            <summary>
            Key denoting the starting point of the next set of results
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.PaginationToken">
            <summary>
            Pagination token corresponding to the item where the search operation stopped,
            inclusive of the previous result set. Use this value to start a new
            operation to resume search from the next item.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Matches">
            <summary>
            List of currently found items
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.TotalSegments">
            <summary>
            For parallel <i>Scan</i> requests, <i>TotalSegments</i>represents the total number of segments for a table that is being scanned. Segments
            are a way to logically divide a table into equally sized portions, for the duration of the <i>Scan</i> request. The value of
            <i>TotalSegments</i> corresponds to the number of application "workers" (such as threads or processes) that will perform the parallel
            <i>Scan</i>. For example, if you want to scan a table using four application threads, you would specify a <i>TotalSegments</i> value of 4.
            The value for <i>TotalSegments</i> must be greater than or equal to 1, and less than or equal to 4096. If you specify a <i>TotalSegments</i>
            value of 1, the <i>Scan</i> will be sequential rather than parallel. If you specify <i>TotalSegments</i>, you must also specify
            <i>Segment</i>.
             
            <para>
            <b>Constraints:</b>
            <list type="definition">
                <item>
                    <term>Range</term>
                    <description>1 - 4096</description>
                </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Segment">
            <summary>
            For parallel <i>Scan</i> requests, <i>Segment</i> identifies an individual segment to be scanned by an application "worker" (such as a
            thread or a process). Each worker issues a <i>Scan</i> request with a distinct value for the segment it will scan. Segment IDs are
            zero-based, so the first segment is always 0. For example, if you want to scan a table using four application threads, the first thread
            would specify a <i>Segment</i> value of 0, the second thread would specify 1, and so on. LastEvaluatedKey returned from a parallel scan
            request must be used with same Segment id in a subsequent operation. The value for <i>Segment</i> must be less than or equal to 0, and less
            than the value provided for <i>TotalSegments</i>. If you specify <i>Segment</i>, you must also specify <i>TotalSegments</i>.
             
            <para>
            <b>Constraints:</b>
            <list type="definition">
                <item>
                    <term>Range</term>
                    <description>0 - 4095</description>
                </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Count">
            <summary>
            Gets the total number of items that match the search parameters.
            
            If IsDone is true and CollectResults is true, returns Matches.Count.
            Otherwise, makes a call to DynamoDB to find out the number of
            matching items, without retrieving the items. Count is then cached.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.IndexName">
            <summary>
            Name of the index to query or scan against.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Search.Select">
            <summary>
            Enum specifying what data to return from query.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Search.Reset">
            <summary>
            Resets the Search object to default state.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Search.GetNextSetAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetNextSet operation.
            
            If there are more items in the Scan/Query, PaginationToken will be
            set and can be consumed in a new Scan/Query operation to resume
            retrieving items from this point.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Search.GetNextSet"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Search.GetRemainingAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetRemaining operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Search.GetRemaining"/>
            </summary>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Search.GetNextSet">
            <summary>
            Retrieves the next set (page) of results
            
            If there are more items in the Scan/Query, PaginationToken will be
            set and can be consumed in a new Scan/Query operation to resume
            retrieving items from this point.
            </summary>
            <returns>Next set of Documents matching the search parameters</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Search.GetRemaining">
            <summary>
            Retrieves all the remaining results
            </summary>
            <returns>List of Documents matching the search parameters</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.Table">
            <summary>
            The Table class is the starting object when using the Document API. It is used to Get documents from the DynamnoDB table
            and write documents back to the DynamoDB table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.TableName">
            <summary>
            Name of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.Keys">
            <summary>
            Keys of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.GlobalSecondaryIndexes">
            <summary>
            Global secondary indexes of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.LocalSecondaryIndexes">
            <summary>
            Local secondary indexes of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.LocalSecondaryIndexNames">
            <summary>
            Names of the local secondary indexes of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.GlobalSecondaryIndexNames">
            <summary>
            Names of the global secondary indexes of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.HashKeys">
            <summary>
            List of keys on the table marked HASH
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.RangeKeys">
            <summary>
            List of keys on the table marked RANGE
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.Table.Attributes">
            <summary>
            List of key attributes on the table.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.ValidateConditional(Amazon.DynamoDBv2.DocumentModel.IConditionalOperationConfig)">
            <summary>
            Validates that the conditional properties on the config object are correctly set.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
            <param name="config"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.ClearTableCache">
            <summary>
            Clears current table cache. Next time a Table is created, its information
            will be loaded from DynamoDB.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.LoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,Amazon.DynamoDBv2.DocumentModel.TableConfig)">
            <summary>
            Creates a Table object with the specified configuration, using the
            passed-in client to load the table definition.
            
            This method will throw an exception if the table does not exist.
            </summary>
            <param name="ddbClient">Client to use to access DynamoDB.</param>
            <param name="config">Configuration to use for the table.</param>
            <returns>Table object representing the specified table.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.LoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,System.String)">
            <summary>
            Creates a Table object with the specified name, using the
            passed-in client to load the table definition.
            The returned table will use the conversion specified by
            AWSConfigs.DynamoDBConfig.ConversionSchema
            
            This method will throw an exception if the table does not exist.
            </summary>
            <param name="ddbClient">Client to use to access DynamoDB.</param>
            <param name="tableName">Name of the table.</param>
            <returns>Table object representing the specified table.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.LoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,System.String,Amazon.DynamoDBv2.DynamoDBEntryConversion)">
            <summary>
            Creates a Table object with the specified name, using the
            passed-in client to load the table definition.
            
            This method will throw an exception if the table does not exist.
            </summary>
            <param name="ddbClient">Client to use to access DynamoDB.</param>
            <param name="tableName">Name of the table.</param>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <returns>Table object representing the specified table.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryLoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,System.String,Amazon.DynamoDBv2.DocumentModel.Table@)">
             <summary>
             Creates a Table object with the specified name, using the
             passed-in client to load the table definition.
             The returned table will use the conversion specified by
             AWSConfigs.DynamoDBConfig.ConversionSchema
            
             This method will return false if the table does not exist.
             </summary>
             <param name="ddbClient">Client to use to access DynamoDB.</param>
             <param name="tableName">Name of the table.</param>
             <param name="table">Loaded table.</param>
             <returns>
             True if table was successfully loaded; otherwise false.
             </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryLoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,System.String,Amazon.DynamoDBv2.DynamoDBEntryConversion,Amazon.DynamoDBv2.DocumentModel.Table@)">
            <summary>
            Creates a Table object with the specified name, using the
            passed-in client to load the table definition.
            
            This method will return false if the table does not exist.
            </summary>
            <param name="ddbClient">Client to use to access DynamoDB.</param>
            <param name="tableName">Name of the table.</param>
            <param name="conversion">Conversion to use for converting .NET values to DynamoDB values.</param>
            <param name="table">Loaded table.</param>
            <returns>
            True if table was successfully loaded; otherwise false.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryLoadTable(Amazon.DynamoDBv2.IAmazonDynamoDB,Amazon.DynamoDBv2.DocumentModel.TableConfig,Amazon.DynamoDBv2.DocumentModel.Table@)">
            <summary>
            Creates a Table object with the specified configuration, using the
            passed-in client to load the table definition.
            
            This method will return false if the table does not exist.
            </summary>
            <param name="ddbClient">Client to use to access DynamoDB.</param>
            <param name="config">Configuration to use for the table.</param>
            <param name="table">Loaded table.</param>
            <returns>
            True if table was successfully loaded; otherwise false.
            </returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.FromAttributeMap(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Creates a Document from an attribute map.
            </summary>
            <param name="data">Map of attribute names to attribute values.</param>
            <returns>Document representing the data.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.ToAttributeMap(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Creates a map of attribute names mapped to AttributeValue objects.
            Converts .NET types using the conversion specified in this Table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.ToExpectedAttributeMap(Amazon.DynamoDBv2.DocumentModel.Document)">
            <summary>
            Creates a map of attribute names mapped to ExpectedAttributeValue objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.ToAttributeUpdateMap(Amazon.DynamoDBv2.DocumentModel.Document,System.Boolean)">
            <summary>
            Creates a map of attribute names mapped to AttributeValueUpdate objects.
            </summary>
            <param name="doc"></param>
            <param name="changedAttributesOnly">If true, only attributes that have been changed will be in the map.</param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Scan(Amazon.DynamoDBv2.DocumentModel.ScanFilter)">
            <summary>
            Initiates a Search object to Scan a DynamoDB table, with the
            specified filter.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="filter">Filter to apply to the scan.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Scan(Amazon.DynamoDBv2.DocumentModel.Expression)">
            <summary>
            Initiates a Search object to Scan a DynamoDB table, with the
            specified expression.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="filterExpression">Expression to apply to the scan.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Scan(Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig)">
            <summary>
            Initiates a Search object to Scan a DynamoDB table, with the
            specified config.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="config">Configuration to use.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Query(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.QueryFilter)">
            <summary>
            Initiates a Search object to Query a DynamoDB table, with the
            specified hash primary key and filter.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="hashKey">Value of the hash key for the query operation.</param>
            <param name="filter">Filter to use.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Query(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Expression)">
            <summary>
            Initiates a Search object to Query a DynamoDB table, with the
            specified hash primary key and expression.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="hashKey">Value of the hash key for the query operation.</param>
            <param name="filterExpression">Expression to use.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Query(Amazon.DynamoDBv2.DocumentModel.QueryFilter)">
            <summary>
            Initiates a Search object to Query a DynamoDB table, with the
            specified filter.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="filter">Filter to use.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.Query(Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig)">
            <summary>
            Initiates a Search object to Query a DynamoDB table, with the
            specified config.
            
            No calls are made until the Search object is used.
            </summary>
            <param name="config">Configuration to use.</param>
            <returns>Resultant Search container.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.CreateBatchGet">
            <summary>
            Creates a DocumentBatchGet object for the current table, allowing
            a batch-get operation against DynamoDB.
            </summary>
            <returns>Empty DocumentBatchGet object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.CreateBatchWrite">
            <summary>
            Creates a DocumentBatchWrite object for the current table, allowing
            a batch-put/delete operation against DynamoDB.
            </summary>
            <returns>Empty DocumentBatchWrite object.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.PutItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.PutItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig)"/>
            </summary>
            <param name="doc">Document to save.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.PutItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.PutItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig)"/>
            </summary>
            <param name="doc">Document to save.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="key">Ley of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItemAsync(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)"/>
            </summary>
            <param name="key">Ley of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="key">Key of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)"/>
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="document">Document to delete.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="document">Document to delete.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="key">Key of the document.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItemAsync(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            <seealso cref="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)"/>
            </summary>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <param name="cancellationToken">Token which can be used to cancel the task.</param>
            <returns>A Task that can be used to poll or wait for results, or both.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.PutItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig)">
            <summary>
            Puts a document into DynamoDB, using optional configs.
            </summary>
            <param name="doc">Document to save.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or updated attributes, depending on config.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryPutItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig)">
            <summary>
            Puts a document into DynamoDB, using optional configs.
            </summary>
            <param name="doc">Document to save.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if put is successful or false if the condition in the config was not met.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)">
            <summary>
            Gets a document from DynamoDB by hash primary key, using specified configs.
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Document from DynamoDB.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)">
            <summary>
            Gets a document from DynamoDB by hash-and-range primary key,
            using specified configs.
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Document from DynamoDB.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.GetItem(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig)">
            <summary>
            Gets a document from DynamoDB by key, using specified configs.
            </summary>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Document from DynamoDB.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, using specified config.
            </summary>
            <param name="doc">Document to update.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or updated attributes, depending on config.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryUpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, using specified config.
            </summary>
            <param name="doc">Document to update.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if updated or false if the condition in the config was not met.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a key to identify the
            document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or updated attributes, depending on config.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryUpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a key to identify the
            document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if updated or false if the condition in the config was not met.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a hash primary key to identify
            the document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or updated attributes, depending on config.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryUpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a hash primary key to identify
            the document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if updated or false if the condition in the config was not met.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.UpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a hash-and-range primary key to identify
            the document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or updated attributes, depending on config.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryUpdateItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig)">
            <summary>
            Update a document in DynamoDB, with a hash-and-range primary key to identify
            the document, and using the specified config.
            </summary>
            <param name="doc">Attributes to update.</param>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if updated or false if the condition in the config was not met.</returns>
            <seealso cref="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig"/>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, using specified configs.
            </summary>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">If the condition set on the config fails.</exception>
            <param name="document">Document to delete.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or old attributes, depending on config.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryDeleteItem(Amazon.DynamoDBv2.DocumentModel.Document,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, using specified configs.
            </summary>
            <param name="document">Document to delete.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if deleted or false if the condition in the config was not met.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by hash-key,
            using the specified configs.
            </summary>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">If the condition set on the config fails.</exception>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or old attributes, depending on config.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryDeleteItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by a hash primary key,
            using specified configs.
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if deleted or false if the condition in the config was not met.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by hash-and-range primary key,
            using the specified configs.
            </summary>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">If the condition set on the config fails.</exception>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or old attributes, depending on config.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryDeleteItem(Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.Primitive,Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by hash-and-range primary key,
            using the specified configs.
            </summary>
            <param name="hashKey">Hash key element of the document.</param>
            <param name="rangeKey">Range key element of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if deleted or false if the condition in the config was not met.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.DeleteItem(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by a key, using specified configs.
            </summary>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">If the condition set on the config fails.</exception>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>Null or old attributes, depending on config.</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.Table.TryDeleteItem(System.Collections.Generic.IDictionary{System.String,Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry},Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig)">
            <summary>
            Delete a document in DynamoDB, identified by a key, using specified configs.
            </summary>
            <param name="key">Key of the document.</param>
            <param name="config">Configuration to use.</param>
            <returns>True if deleted or false if the condition in the config was not met.</returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.TableConfig">
            <summary>
            Configuration for the Table.PutItem operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.TableConfig.TableName">
            <summary>
            Name of the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.TableConfig.Conversion">
            <summary>
            Conversion to use for converting .NET values to DynamoDB values.
            Default is AWSConfigs.DynamoDBConfig.ConversionSchema.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.TableConfig.AttributesToStoreAsEpoch">
            <summary>
            List of DateTime attributes that should be converted to epoch seconds
            before they are stored in DynamoDB.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.TableConfig.#ctor(System.String)">
            <summary>
            Constructs TableConfig for a given table.
            Uses conversions schema AWSConfigs.DynamoDBConfig.ConversionSchema.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig">
            <summary>
            Configuration for the Table.PutItem operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig.ConditionalExpression">
            <summary>
            The expression that is evaluated before the put is performed. If the expression evaluates to false the put
            will fail and a ConditionalCheckFailedException exception will be thrown.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig.ExpectedState">
            <summary>
            The expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must match the conditions
            specified in the ExpectedState.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig.Expected">
            <summary>
            Document representing the expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must be equal
            to the attributes in Expected. If an attribute in Expected
            is set to null, that attribute must not be preset on the item in DynamoDB.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.PutItemOperationConfig.ReturnValues">
            <summary>
            Flag specifying what values should be returned.
            
            PutItem only supports ReturnValues.AllOldAttributes and ReturnValues.None
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig">
            <summary>
            Configuration for the Table.GetItem operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig.AttributesToGet">
            <summary>
            List of attributes to retrieve
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.GetItemOperationConfig.ConsistentRead">
            <summary>
            If set to true, this flag ensures that the most recently written data is
            returned.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig">
            <summary>
            Configuration for the Table.UpdateItem operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig.ConditionalExpression">
            <summary>
            The expression that is evaluated before the update is performed. If the expression evaluates to false the update
            will fail and a ConditionalCheckFailedException exception will be thrown.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig.ExpectedState">
            <summary>
            The expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must match the conditions
            specified in the ExpectedState.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig.Expected">
            <summary>
            Document representing the expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must be equal
            to the attributes in Expected. If an attribute in Expected
            is set to null, that attribute must not be preset on the item in DynamoDB.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.UpdateItemOperationConfig.ReturnValues">
            <summary>
            Flag specifying what values should be returned.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig">
            <summary>
            Configuration for the Table.DeleteItem operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig.ConditionalExpression">
            <summary>
            The expression that is evaluated before the delete is performed. If the expression evaluates to false the delete
            will fail and a ConditionalCheckFailedException exception will be thrown.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig.ExpectedState">
            <summary>
            The expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must match the conditions
            specified in the ExpectedState.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig.Expected">
            <summary>
            Document representing the expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must be equal
            to the attributes in Expected. If an attribute in Expected
            is set to null, that attribute must not be preset on the item in DynamoDB.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.DeleteItemOperationConfig.ReturnValues">
            <summary>
            Flag specifying what values should be returned.
            
            DeleteItem only supports ReturnValues.AllOldAttributes and ReturnValues.None
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig">
            <summary>
            Configuration for the Table.Scan operation
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.#ctor">
            <summary>
            Initializes a default Table.Scan config object
            Filter is empty, Limit is Int32.MaxValue
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.AttributesToGet">
            <summary>
            List of attributes to retrieve as part of the search
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.ConsistentRead">
            <summary>
            If set to true, this flag ensures that the most recently written data is
            returned.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.Limit">
            <summary>
            Upper limit on the number of items scanned per request
            for matching conditions.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.FilterExpression">
            <summary>
            The expression that is evaluated for each item. Only items that pass the expression are returned.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.Filter">
            <summary>
            Filter for the search operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.IndexName">
            <summary>
            Name of the index to scan against.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.Select">
            <summary>
            Enum specifying what data to return from query.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.TotalSegments">
            <summary>
            For parallel <i>Scan</i> requests, <i>TotalSegments</i>represents the total number of segments for a table that is being scanned. Segments
            are a way to logically divide a table into equally sized portions, for the duration of the <i>Scan</i> request. The value of
            <i>TotalSegments</i> corresponds to the number of application "workers" (such as threads or processes) that will perform the parallel
            <i>Scan</i>. For example, if you want to scan a table using four application threads, you would specify a <i>TotalSegments</i> value of 4.
            The value for <i>TotalSegments</i> must be greater than or equal to 1, and less than or equal to 4096. If you specify a <i>TotalSegments</i>
            value of 1, the <i>Scan</i> will be sequential rather than parallel. If you specify <i>TotalSegments</i>, you must also specify
            <i>Segment</i>.
             
            <para>
            <b>Constraints:</b>
            <list type="definition">
                <item>
                    <term>Range</term>
                    <description>1 - 4096</description>
                </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.Segment">
            <summary>
            For parallel <i>Scan</i> requests, <i>Segment</i> identifies an individual segment to be scanned by an application "worker" (such as a
            thread or a process). Each worker issues a <i>Scan</i> request with a distinct value for the segment it will scan. Segment IDs are
            zero-based, so the first segment is always 0. For example, if you want to scan a table using four application threads, the first thread
            would specify a <i>Segment</i> value of 0, the second thread would specify 1, and so on. LastEvaluatedKey returned from a parallel scan
            request must be used with same Segment id in a subsequent operation. The value for <i>Segment</i> must be less than or equal to 0, and less
            than the value provided for <i>TotalSegments</i>. If you specify <i>Segment</i>, you must also specify <i>TotalSegments</i>.
             
            <para>
            <b>Constraints:</b>
            <list type="definition">
                <item>
                    <term>Range</term>
                    <description>0 - 4095</description>
                </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.CollectResults">
            <summary>
            Whether to collect GetNextSet and GetRemaining results in Matches property.
            Default is true. If set to false, Matches will always be empty.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.ConditionalOperator">
            <summary>
            A logical operator to apply to the conditions in the Filter property:
            AND - If all of the conditions evaluate to true, then the entire filter evaluates to true.
            OR - If at least one of the conditions evaluate to true, then the entire filter evaluates to true.
            
            Default value is AND.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig.PaginationToken">
            <summary>
            Pagination token corresponding to the item where the last Scan operation
            stopped, inclusive of the previous result set. Set this value to resume
            Scan operation from the next item.
            This token should be retrieved from a Search object.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig">
            <summary>
            Configuration for the Table.Query operation
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.#ctor">
            <summary>
            Initializes a default Table.Query config object
            Filter is empty, Limit is Int32.MaxValue
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.KeyExpression">
            <summary>
            The key expression that is evaluated for each item. Only items that pass the expression are returned.
            <para>
            Both KeyExpression and FilterExpression contain ExpressionAttributeNames and ExpressionAttributeValues.
            Attribute names or values can be added to either expression and can be referenced in either expression
            statement. Conflicting attribute names or values will lead to an exception being thrown.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.FilterExpression">
            <summary>
            The expression that is evaluated for each item. Only items that pass the expression are returned.
            <para>
            Both KeyExpression and FilterExpression contain ExpressionAttributeNames and ExpressionAttributeValues.
            Attribute names or values can be added to either expression and can be referenced in either expression
            statement. Conflicting attribute names or values will lead to an exception being thrown.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.Filter">
            <summary>
            Filter for the search operation
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.ConsistentRead">
            <summary>
            If set to true, this flag ensures that the most recently written data is
            returned.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.AttributesToGet">
            <summary>
            List of attributes to retrieve as part of the search
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.Limit">
            <summary>
            Upper limit on the number of items to return per request
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.BackwardSearch">
            <summary>
            Flag that signals if the search is traversing backwards
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.IndexName">
            <summary>
            Name of the index to query against.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.Select">
            <summary>
            Enum specifying what data to return from query.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.CollectResults">
            <summary>
            Whether to collect GetNextSet and GetRemaining results in Matches property.
            Default is true. If set to false, Matches will always be empty.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.ConditionalOperator">
            <summary>
            A logical operator to apply to the conditions in the Filter property:
            AND - If all of the conditions evaluate to true, then the entire filter evaluates to true.
            OR - If at least one of the conditions evaluate to true, then the entire filter evaluates to true.
            
            Default value is AND.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.QueryOperationConfig.PaginationToken">
            <summary>
            Pagination token corresponding to the item where the last Query operation
            stopped, inclusive of the previous result set. Set this value to resume
            Query operation from the next item.
            This token should be retrieved from a Search object.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.IConditionalOperationConfig">
            <summary>
            Interface for operations that support conditional behavior.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.IConditionalOperationConfig.ConditionalExpression">
            <summary>
            An expression that is evaluated before the operation. If the expression evaluates to false then the operation
            will fail with a ConditionalCheckFailedException exception.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.IConditionalOperationConfig.ExpectedState">
            <summary>
            The expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must match the conditions
            specified in the ExpectedState.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.DocumentModel.IConditionalOperationConfig.Expected">
            <summary>
            Document representing the expected state of data in DynamoDB.
            
            For the operation to succeed, the data in DynamoDB must be equal
            to the attributes in Expected. If an attribute in Expected
            is set to null, that attribute must not be preset on the item in DynamoDB.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ReturnValues">
            <summary>
            An enumeration of all supported return value directives
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ScanOperator">
            <summary>
            An enumeration of all supported scan operator directives
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.QueryOperator">
            <summary>
            An enumeration of all supported query operator directives
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.SelectValues">
            <summary>
            An enumeration of all supported Select values for Query and Scan.
            Value of Count will force service to return the number of items,
            not the items themselves.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.DocumentModel.ConditionalOperatorValues">
            <summary>
            An enumeration of all supported ConditionalOperator values.
            Value of And for an operation will require that all conditions match.
            Value of Or for an operation will require that at least one of the conditons match.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.ConditionalOperatorValues.And">
            <summary>
            And condition
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.DocumentModel.ConditionalOperatorValues.Or">
            <summary>
            Or Condition
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Internal.DynamoDBRetryPolicy">
            <summary>
            Custom DynamoDB retry policy.
            This policy has a slightly different exponential backoff logic compared
            to the default retry policy.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Internal.DynamoDBRetryPolicy.#ctor(Amazon.Runtime.IClientConfig)">
            <summary>
            Constructor for DynamoDBRRetryPolicy.
            </summary>
            <param name="config">The IClientConfig object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Internal.DynamoDBRetryPolicy.WaitBeforeRetry(Amazon.Runtime.IExecutionContext)">
            <summary>
            Overriden to cause a pause between retries.
            </summary>
            <param name="executionContext"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Internal.DynamoDBRetryPolicy.pauseExponentially(System.Int32)">
            <summary>
            Override the pausing function so retries would happen more frequent then the default operation.
            </summary>
            <param name="retries">Current number of retries.</param>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBConfig">
            <summary>
            Configuration for accessing Amazon DynamoDB service
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBException">
            <summary>
             Common exception for the DynamoDB service.
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonDynamoDBException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonDynamoDBException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonDynamoDBException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonDynamoDBException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonDynamoDBException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonDynamoDBException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig">
            <summary>
            Configuration for accessing Amazon DynamoDBStreams service
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBRequest">
            <summary>
            Base class for DynamoDB operation requests.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBStreamsRequest">
            <summary>
            Base class for DynamoDBStreams operation requests.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.AttributeDefinition">
            <summary>
            Represents an attribute for describing the key schema for the table and indexes.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeDefinition.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeDefinition.#ctor(System.String,Amazon.DynamoDBv2.ScalarAttributeType)">
            <summary>
            Instantiates AttributeDefinition with the parameterized properties
            </summary>
            <param name="attributeName">A name for the attribute.</param>
            <param name="attributeType">The data type for the attribute, where: <ul> <li>  <code>S</code> - the attribute is of type String </li> <li>  <code>N</code> - the attribute is of type Number </li> <li>  <code>B</code> - the attribute is of type Binary </li> </ul></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeDefinition.AttributeName">
            <summary>
            Gets and sets the property AttributeName. 
            <para>
            A name for the attribute.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeDefinition.AttributeType">
            <summary>
            Gets and sets the property AttributeType. 
            <para>
            The data type for the attribute, where:
            </para>
             <ul> <li> 
            <para>
             <code>S</code> - the attribute is of type String
            </para>
             </li> <li> 
            <para>
             <code>N</code> - the attribute is of type Number
            </para>
             </li> <li> 
            <para>
             <code>B</code> - the attribute is of type Binary
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.AttributeValue">
            <summary>
            Represents the data for an attribute.
            
             
            <para>
            Each attribute value is described as a name-value pair. The name is the data type,
            and the value is the data itself.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data
            Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeValue.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeValue.#ctor(System.String)">
            <summary>
            Instantiates AttributeValue with the parameterized properties
            </summary>
            <param name="s">An attribute of type String. For example:  <code>"S": "Hello"</code> </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeValue.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Instantiates AttributeValue with the parameterized properties
            </summary>
            <param name="ss">An attribute of type String Set. For example:  <code>"SS": ["Giraffe", "Hippo" ,"Zebra"]</code> </param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.B">
            <summary>
            Gets and sets the property B. 
            <para>
            An attribute of type Binary. For example:
            </para>
             
            <para>
             <code>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.BOOL">
            <summary>
            Gets and sets the property BOOL. 
            <para>
            An attribute of type Boolean. For example:
            </para>
             
            <para>
             <code>"BOOL": true</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.IsBOOLSet">
            <summary>
            This property is set to true if the property <seealso cref="P:Amazon.DynamoDBv2.Model.AttributeValue.BOOL"/>
            is set; false otherwise.
            This property can be used to determine if the related property
            was returned by a service response or if the related property
            should be sent to the service during a service call.
            </summary>
            <returns>
            True if the related property was set or will be sent to a service; false otherwise.
            </returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.BS">
            <summary>
            Gets and sets the property BS. 
            <para>
            An attribute of type Binary Set. For example:
            </para>
             
            <para>
             <code>"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.L">
            <summary>
            Gets and sets the property L. 
            <para>
            An attribute of type List. For example:
            </para>
             
            <para>
             <code>"L": ["Cookies", "Coffee", 3.14159]</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.IsLSet">
            <summary>
            This property is set to true if the property <seealso cref="P:Amazon.DynamoDBv2.Model.AttributeValue.L"/>
            is set; false otherwise.
            This property can be used to determine if the related property
            was returned by a service response or if the related property
            should be sent to the service during a service call.
            </summary>
            <returns>
            True if the related property was set or will be sent to a service; false otherwise.
            </returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.M">
            <summary>
            Gets and sets the property M. 
            <para>
            An attribute of type Map. For example:
            </para>
             
            <para>
             <code>"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.IsMSet">
            <summary>
            This property is set to true if the property <seealso cref="P:Amazon.DynamoDBv2.Model.AttributeValue.M"/>
            is set; false otherwise.
            This property can be used to determine if the related property
            was returned by a service response or if the related property
            should be sent to the service during a service call.
            </summary>
            <returns>
            True if the related property was set or will be sent to a service; false otherwise.
            </returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.N">
            <summary>
            Gets and sets the property N. 
            <para>
            An attribute of type Number. For example:
            </para>
             
            <para>
             <code>"N": "123.45"</code> 
            </para>
             
            <para>
            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.NS">
            <summary>
            Gets and sets the property NS. 
            <para>
            An attribute of type Number Set. For example:
            </para>
             
            <para>
             <code>"NS": ["42.2", "-19", "7.5", "3.14"]</code> 
            </para>
             
            <para>
            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.NULL">
            <summary>
            Gets and sets the property NULL. 
            <para>
            An attribute of type Null. For example:
            </para>
             
            <para>
             <code>"NULL": true</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.S">
            <summary>
            Gets and sets the property S. 
            <para>
            An attribute of type String. For example:
            </para>
             
            <para>
             <code>"S": "Hello"</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValue.SS">
            <summary>
            Gets and sets the property SS. 
            <para>
            An attribute of type String Set. For example:
            </para>
             
            <para>
             <code>"SS": ["Giraffe", "Hippo" ,"Zebra"]</code> 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.AttributeValueUpdate">
            <summary>
            For the <code>UpdateItem</code> operation, represents the attributes to be modified,
            the action to perform on each, and the new value for each.
            
             <note> 
            <para>
            You cannot use <code>UpdateItem</code> to update any primary key attributes. Instead,
            you will need to delete the item, and then use <code>PutItem</code> to create a new
            item with new attributes.
            </para>
             </note> 
            <para>
            Attribute values cannot be null; string and binary type attributes must have lengths
            greater than zero; and set type attributes must not be empty. Requests with empty
            values will be rejected with a <code>ValidationException</code> exception.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeValueUpdate.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.AttributeValueUpdate.#ctor(Amazon.DynamoDBv2.Model.AttributeValue,Amazon.DynamoDBv2.AttributeAction)">
            <summary>
            Instantiates AttributeValueUpdate with the parameterized properties
            </summary>
            <param name="value">Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>. </param>
            <param name="action">Specifies how to perform the update. Valid values are <code>PUT</code> (default), <code>DELETE</code>, and <code>ADD</code>. The behavior depends on whether the specified primary key already exists in the table.  <b>If an item with the specified <i>Key</i> is found in the table:</b>  <ul> <li>  <code>PUT</code> - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.  </li> <li>  <code>DELETE</code> - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type. If a <i>set</i> of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set <code>[a,b,c]</code> and the <code>DELETE</code> action specified <code>[a,c]</code>, then the final attribute value would be <code>[b]</code>. Specifying an empty set is an error. </li> <li>  <code>ADD</code> - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of <code>ADD</code> depends on the data type of the attribute: <ul> <li> If the existing attribute is a number, and if <code>Value</code> is also a number, then the <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a negative number, then it is subtracted from the existing attribute. <note>  If you use <code>ADD</code> to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use <code>ADD</code> to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses <code>0</code> as the initial value. For example, suppose that the item you want to update does not yet have an attribute named <i>itemcount</i>, but you decide to <code>ADD</code> the number <code>3</code> to this attribute anyway, even though it currently does not exist. DynamoDB will create the <i>itemcount</i> attribute, set its initial value to <code>0</code>, and finally add <code>3</code> to it. The result will be a new <i>itemcount</i> attribute in the item, with a value of <code>3</code>. </note> </li> <li> If the existing data type is a set, and if the <code>Value</code> is also a set, then the <code>Value</code> is added to the existing set. (This is a <i>set</i> operation, not mathematical addition.) For example, if the attribute value was the set <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute value would be <code>[1,2,3]</code>. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type.  Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the <code>Value</code> must also be a set of strings. The same holds true for number sets and binary sets. </li> </ul> This action is only valid for an existing attribute whose data type is number or is a set. Do not use <code>ADD</code> for any other data types. </li> </ul>  <b>If no item with the specified <i>Key</i> is found:</b>  <ul> <li>  <code>PUT</code> - DynamoDB creates a new item with the specified primary key, and then adds the attribute.  </li> <li>  <code>DELETE</code> - Nothing happens; there is no attribute to delete. </li> <li>  <code>ADD</code> - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified. </li> </ul></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValueUpdate.Action">
            <summary>
            Gets and sets the property Action. 
            <para>
            Specifies how to perform the update. Valid values are <code>PUT</code> (default),
            <code>DELETE</code>, and <code>ADD</code>. The behavior depends on whether the specified
            primary key already exists in the table.
            </para>
             
            <para>
             <b>If an item with the specified <i>Key</i> is found in the table:</b> 
            </para>
             <ul> <li> 
            <para>
             <code>PUT</code> - Adds the specified attribute to the item. If the attribute already
            exists, it is replaced by the new value. 
            </para>
             </li> <li> 
            <para>
             <code>DELETE</code> - If no value is specified, the attribute and its value are removed
            from the item. The data type of the specified value must match the existing value's
            data type.
            </para>
             
            <para>
            If a <i>set</i> of values is specified, then those values are subtracted from the
            old set. For example, if the attribute value was the set <code>[a,b,c]</code> and
            the <code>DELETE</code> action specified <code>[a,c]</code>, then the final attribute
            value would be <code>[b]</code>. Specifying an empty set is an error.
            </para>
             </li> <li> 
            <para>
             <code>ADD</code> - If the attribute does not already exist, then the attribute and
            its values are added to the item. If the attribute does exist, then the behavior of
            <code>ADD</code> depends on the data type of the attribute:
            </para>
             <ul> <li> 
            <para>
            If the existing attribute is a number, and if <code>Value</code> is also a number,
            then the <code>Value</code> is mathematically added to the existing attribute. If
            <code>Value</code> is a negative number, then it is subtracted from the existing attribute.
            </para>
             <note> 
            <para>
             If you use <code>ADD</code> to increment or decrement a number value for an item
            that doesn't exist before the update, DynamoDB uses 0 as the initial value.
            </para>
             
            <para>
            In addition, if you use <code>ADD</code> to update an existing item, and intend to
            increment or decrement an attribute value which does not yet exist, DynamoDB uses
            <code>0</code> as the initial value. For example, suppose that the item you want to
            update does not yet have an attribute named <i>itemcount</i>, but you decide to <code>ADD</code>
            the number <code>3</code> to this attribute anyway, even though it currently does
            not exist. DynamoDB will create the <i>itemcount</i> attribute, set its initial value
            to <code>0</code>, and finally add <code>3</code> to it. The result will be a new
            <i>itemcount</i> attribute in the item, with a value of <code>3</code>.
            </para>
             </note> </li> <li> 
            <para>
            If the existing data type is a set, and if the <code>Value</code> is also a set, then
            the <code>Value</code> is added to the existing set. (This is a <i>set</i> operation,
            not mathematical addition.) For example, if the attribute value was the set <code>[1,2]</code>,
            and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute
            value would be <code>[1,2,3]</code>. An error occurs if an Add action is specified
            for a set attribute and the attribute type specified does not match the existing set
            type. 
            </para>
             
            <para>
            Both sets must have the same primitive data type. For example, if the existing data
            type is a set of strings, the <code>Value</code> must also be a set of strings. The
            same holds true for number sets and binary sets.
            </para>
             </li> </ul> 
            <para>
            This action is only valid for an existing attribute whose data type is number or is
            a set. Do not use <code>ADD</code> for any other data types.
            </para>
             </li> </ul> 
            <para>
             <b>If no item with the specified <i>Key</i> is found:</b> 
            </para>
             <ul> <li> 
            <para>
             <code>PUT</code> - DynamoDB creates a new item with the specified primary key, and
            then adds the attribute. 
            </para>
             </li> <li> 
            <para>
             <code>DELETE</code> - Nothing happens; there is no attribute to delete.
            </para>
             </li> <li> 
            <para>
             <code>ADD</code> - DynamoDB creates an item with the supplied primary key and number
            (or set of numbers) for the attribute value. The only data types allowed are number
            and number set; no other data types can be specified.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.AttributeValueUpdate.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            Represents the data for an attribute.
            </para>
             
            <para>
            Each attribute value is described as a name-value pair. The name is the data type,
            and the value is the data itself.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data
            Types</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BackupDescription">
            <summary>
            Contains the description of the backup created for the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDescription.BackupDetails">
            <summary>
            Gets and sets the property BackupDetails. 
            <para>
            Contains the details of the backup created for the table. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDescription.SourceTableDetails">
            <summary>
            Gets and sets the property SourceTableDetails. 
            <para>
            Contains the details of the table when the backup was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDescription.SourceTableFeatureDetails">
            <summary>
            Gets and sets the property SourceTableFeatureDetails. 
            <para>
            Contains the details of the features enabled on the table when the backup was created.
            For example, LSIs, GSIs, streams, TTL.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BackupDetails">
            <summary>
            Contains the details of the backup created for the table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDetails.BackupArn">
            <summary>
            Gets and sets the property BackupArn. 
            <para>
            ARN associated with the backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDetails.BackupCreationDateTime">
            <summary>
            Gets and sets the property BackupCreationDateTime. 
            <para>
            Time at which the backup was created. This is the request time of the backup. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDetails.BackupName">
            <summary>
            Gets and sets the property BackupName. 
            <para>
            Name of the requested backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDetails.BackupSizeBytes">
            <summary>
            Gets and sets the property BackupSizeBytes. 
            <para>
            Size of the backup in bytes.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupDetails.BackupStatus">
            <summary>
            Gets and sets the property BackupStatus. 
            <para>
            Backup can be in one of the following states: CREATING, ACTIVE, DELETED. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.String)">
            <summary>
            Constructs a new BackupInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of BackupInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of BackupInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BackupInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BackupInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the BackupInUseException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new BackupNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of BackupNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of BackupNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BackupNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BackupNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BackupNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the BackupNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BackupSummary">
            <summary>
            Contains details for the backup.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.BackupArn">
            <summary>
            Gets and sets the property BackupArn. 
            <para>
            ARN associated with the backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.BackupCreationDateTime">
            <summary>
            Gets and sets the property BackupCreationDateTime. 
            <para>
            Time at which the backup was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.BackupName">
            <summary>
            Gets and sets the property BackupName. 
            <para>
            Name of the specified backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.BackupSizeBytes">
            <summary>
            Gets and sets the property BackupSizeBytes. 
            <para>
            Size of the backup in bytes.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.BackupStatus">
            <summary>
            Gets and sets the property BackupStatus. 
            <para>
            Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.TableArn">
            <summary>
            Gets and sets the property TableArn. 
            <para>
            ARN associated with the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.TableId">
            <summary>
            Gets and sets the property TableId. 
            <para>
            Unique identifier for the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BackupSummary.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            Name of the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BatchGetItemRequest">
            <summary>
            Container for the parameters to the BatchGetItem operation.
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BatchGetItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BatchGetItemRequest.#ctor(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes})">
            <summary>
            Instantiates BatchGetItemRequest with the parameterized properties
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BatchGetItemRequest.#ctor(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},Amazon.DynamoDBv2.ReturnConsumedCapacity)">
            <summary>
            Instantiates BatchGetItemRequest with the parameterized properties
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="returnConsumedCapacity">Sets the BatchGetItemRequest ReturnConsumedCapacity property</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchGetItemRequest.RequestItems">
            <summary>
            Gets and sets the property RequestItems. 
            <para>
            A map of one or more table names and, for each table, a map that describes one or
            more items to retrieve from that table. Each table name can be used only once per
            <code>BatchGetItem</code> request.
            </para>
             
            <para>
            Each element in the map of items to retrieve consists of the following:
            </para>
             <ul> <li> 
            <para>
             <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is
            used; if <code>false</code> (the default), an eventually consistent read is used.
            </para>
             </li> <li> 
            <para>
             <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute
            names in the <code>ProjectionExpression</code> parameter. The following are some use
            cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
             <code>Keys</code> - An array of primary key attribute values that define specific
            items in the table. For each primary key, you must provide <i>all</i> of the key attributes.
            For example, with a simple primary key, you only need to provide the partition key
            value. For a composite key, you must provide <i>both</i> the partition key value and
            the sort key value.
            </para>
             </li> <li> 
            <para>
             <code>ProjectionExpression</code> - A string that identifies one or more attributes
            to retrieve from the table. These attributes can include scalars, sets, or elements
            of a JSON document. The attributes in the expression must be separated by commas.
            </para>
             
            <para>
            If no attribute names are specified, then all attributes will be returned. If any
            of the requested attributes are not found, they will not appear in the result.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
             <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code>
            instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a>
            in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchGetItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BatchGetItemResponse">
            <summary>
            Represents the output of a <code>BatchGetItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchGetItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The read capacity units consumed by the entire <code>BatchGetItem</code> operation.
            </para>
             
            <para>
            Each element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>TableName</code> - The table that consumed the provisioned throughput.
            </para>
             </li> <li> 
            <para>
             <code>CapacityUnits</code> - The total number of capacity units consumed.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchGetItemResponse.Responses">
            <summary>
            Gets and sets the property Responses. 
            <para>
            A map of table name to a list of items. Each object in <code>Responses</code> consists
            of a table name, along with a map of attribute data consisting of the data type and
            attribute value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchGetItemResponse.UnprocessedKeys">
            <summary>
            Gets and sets the property UnprocessedKeys. 
            <para>
            A map of tables and their respective keys that were not processed with the current
            response. The <code>UnprocessedKeys</code> value is in the same form as <code>RequestItems</code>,
            so the value can be provided directly to a subsequent <code>BatchGetItem</code> operation.
            For more information, see <code>RequestItems</code> in the Request Parameters section.
            </para>
             
            <para>
            Each element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>Keys</code> - An array of primary key attribute values that define specific
            items in the table.
            </para>
             </li> <li> 
            <para>
             <code>ProjectionExpression</code> - One or more attributes to be retrieved from the
            table or index. By default, all attributes are returned. If a requested attribute
            is not found, it does not appear in the result.
            </para>
             </li> <li> 
            <para>
             <code>ConsistentRead</code> - The consistency of a read operation. If set to <code>true</code>,
            then a strongly consistent read is used; otherwise, an eventually consistent read
            is used.
            </para>
             </li> </ul> 
            <para>
            If there are no unprocessed keys remaining, the response contains an empty <code>UnprocessedKeys</code>
            map.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BatchWriteItemRequest">
            <summary>
            Container for the parameters to the BatchWriteItem operation.
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BatchWriteItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.BatchWriteItemRequest.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.WriteRequest}})">
            <summary>
            Instantiates BatchWriteItemRequest with the parameterized properties
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following: <ul> <li>  <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement: <ul> <li>  <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key. </li> </ul> </li> <li>  <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement: <ul> <li>  <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. </li> </ul> </li> </ul></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemRequest.RequestItems">
            <summary>
            Gets and sets the property RequestItems. 
            <para>
            A map of one or more table names and, for each table, a list of operations to be performed
            (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists
            of the following:
            </para>
             <ul> <li> 
            <para>
             <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified
            item. The item to be deleted is identified by a <code>Key</code> subelement:
            </para>
             <ul> <li> 
            <para>
             <code>Key</code> - A map of primary key attribute values that uniquely identify the
            item. Each entry in this map consists of an attribute name and an attribute value.
            For each primary key, you must provide <i>all</i> of the key attributes. For example,
            with a simple primary key, you only need to provide a value for the partition key.
            For a composite primary key, you must provide values for <i>both</i> the partition
            key and the sort key.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified
            item. The item to be put is identified by an <code>Item</code> subelement:
            </para>
             <ul> <li> 
            <para>
             <code>Item</code> - A map of attributes and their values. Each entry in this map
            consists of an attribute name and an attribute value. Attribute values must not be
            null; string and binary type attributes must have lengths greater than zero; and set
            type attributes must not be empty. Requests that contain empty values will be rejected
            with a <code>ValidationException</code> exception.
            </para>
             
            <para>
            If you specify any attributes that are part of an index key, then the data types for
            those attributes must match those of the schema in the table's attribute definition.
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemRequest.ReturnItemCollectionMetrics">
            <summary>
            Gets and sets the property ReturnItemCollectionMetrics. 
            <para>
            Determines whether item collection metrics are returned. If set to <code>SIZE</code>,
            the response includes statistics about item collections, if any, that were modified
            during the operation are returned in the response. If set to <code>NONE</code> (the
            default), no statistics are returned.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.BatchWriteItemResponse">
            <summary>
            Represents the output of a <code>BatchWriteItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the entire <code>BatchWriteItem</code> operation.
            </para>
             
            <para>
            Each element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>TableName</code> - The table that consumed the provisioned throughput.
            </para>
             </li> <li> 
            <para>
             <code>CapacityUnits</code> - The total number of capacity units consumed.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemResponse.ItemCollectionMetrics">
            <summary>
            Gets and sets the property ItemCollectionMetrics. 
            <para>
            A list of tables that were processed by <code>BatchWriteItem</code> and, for each
            table, information about any item collections that were affected by individual <code>DeleteItem</code>
            or <code>PutItem</code> operations.
            </para>
             
            <para>
            Each entry consists of the following subelements:
            </para>
             <ul> <li> 
            <para>
             <code>ItemCollectionKey</code> - The partition key value of the item collection.
            This is the same as the partition key value of the item.
            </para>
             </li> <li> 
            <para>
             <code>SizeEstimateRangeGB</code> - An estimate of item collection size, expressed
            in GB. This is a two-element array containing a lower bound and an upper bound for
            the estimate. The estimate includes the size of all the items in the table, plus the
            size of all attributes projected into all of the local secondary indexes on the table.
            Use this estimate to measure whether a local secondary index is approaching its size
            limit.
            </para>
             
            <para>
            The estimate is subject to change over time; therefore, do not rely on the precision
            or accuracy of the estimate.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.BatchWriteItemResponse.UnprocessedItems">
            <summary>
            Gets and sets the property UnprocessedItems. 
            <para>
            A map of tables and requests against those tables that were not processed. The <code>UnprocessedItems</code>
            value is in the same form as <code>RequestItems</code>, so you can provide this value
            directly to a subsequent <code>BatchGetItem</code> operation. For more information,
            see <code>RequestItems</code> in the Request Parameters section.
            </para>
             
            <para>
            Each <code>UnprocessedItems</code> entry consists of a table name and, for that table,
            a list of operations to perform (<code>DeleteRequest</code> or <code>PutRequest</code>).
            </para>
             <ul> <li> 
            <para>
             <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified
            item. The item to be deleted is identified by a <code>Key</code> subelement:
            </para>
             <ul> <li> 
            <para>
             <code>Key</code> - A map of primary key attribute values that uniquely identify the
            item. Each entry in this map consists of an attribute name and an attribute value.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified
            item. The item to be put is identified by an <code>Item</code> subelement:
            </para>
             <ul> <li> 
            <para>
             <code>Item</code> - A map of attributes and their values. Each entry in this map
            consists of an attribute name and an attribute value. Attribute values must not be
            null; string and binary type attributes must have lengths greater than zero; and set
            type attributes must not be empty. Requests that contain empty values will be rejected
            with a <code>ValidationException</code> exception.
            </para>
             
            <para>
            If you specify any attributes that are part of an index key, then the data types for
            those attributes must match those of the schema in the table's attribute definition.
            </para>
             </li> </ul> </li> </ul> 
            <para>
            If there are no unprocessed items remaining, the response contains an empty <code>UnprocessedItems</code>
            map.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Capacity">
            <summary>
            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Capacity.CapacityUnits">
            <summary>
            Gets and sets the property CapacityUnits. 
            <para>
            The total number of capacity units consumed on a table or an index.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Condition">
            <summary>
            Represents the selection criteria for a <code>Query</code> or <code>Scan</code> operation:
            
             <ul> <li> 
            <para>
            For a <code>Query</code> operation, <code>Condition</code> is used for specifying
            the <code>KeyConditions</code> to use when querying a table or an index. For <code>KeyConditions</code>,
            only the following comparison operators are supported:
            </para>
             
            <para>
             <code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code> 
            </para>
             
            <para>
             <code>Condition</code> is also used in a <code>QueryFilter</code>, which evaluates
            the query results and returns only the desired values.
            </para>
             </li> <li> 
            <para>
            For a <code>Scan</code> operation, <code>Condition</code> is used in a <code>ScanFilter</code>,
            which evaluates the scan results and returns only the desired values.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Condition.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Condition.AttributeValueList">
            <summary>
            Gets and sets the property AttributeValueList. 
            <para>
            One or more values to evaluate against the supplied attribute. The number of values
            in the list depends on the <code>ComparisonOperator</code> being used.
            </para>
             
            <para>
            For type Number, value comparisons are numeric.
            </para>
             
            <para>
            String value comparisons for greater than, equals, or less than are based on ASCII
            character code values. For example, <code>a</code> is greater than <code>A</code>,
            and <code>a</code> is greater than <code>B</code>. For a list of code values, see
            <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
            </para>
             
            <para>
            For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares
            binary values.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Condition.ComparisonOperator">
            <summary>
            Gets and sets the property ComparisonOperator. 
            <para>
            A comparator for evaluating attributes. For example, equals, greater than, less than,
            etc.
            </para>
             
            <para>
            The following comparison operators are available:
            </para>
             
            <para>
             <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
            | IN | BETWEEN</code> 
            </para>
             
            <para>
            The following are descriptions of each comparison operator.
            </para>
             <ul> <li> 
            <para>
             <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including
            lists and maps.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, Binary, String Set, Number Set, or Binary Set. If
            an item contains an <code>AttributeValue</code> element of a different type than the
            one provided in the request, the value does not match. For example, <code>{"S":"6"}</code>
            does not equal <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not equal
            <code>{"NS":["6", "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including
            lists and maps.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item
            contains an <code>AttributeValue</code> of a different type than the one provided
            in the request, the value does not match. For example, <code>{"S":"6"}</code> does
            not equal <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not equal <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>LE</code> : Less than or equal. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>LT</code> : Less than. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code>
            element of a different type than the one provided in the request, the value does not
            match. For example, <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>.
            Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>GE</code> : Greater than or equal. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>GT</code> : Greater than. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported
            for all data types, including lists and maps.
            </para>
             <note> 
            <para>
            This operator tests for the existence of an attribute, not its data type. If the data
            type of attribute "<code>a</code>" is null, and you evaluate it using <code>NOT_NULL</code>,
            the result is a Boolean <code>true</code>. This result is because the attribute "<code>a</code>"
            exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.
            </para>
             </note> </li> <li> 
            <para>
             <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported
            for all data types, including lists and maps.
            </para>
             <note> 
            <para>
            This operator tests for the nonexistence of an attribute, not its data type. If the
            data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NULL</code>,
            the result is a Boolean <code>false</code>. This is because the attribute "<code>a</code>"
            exists; its data type is not relevant to the <code>NULL</code> comparison operator.
            </para>
             </note> </li> <li> 
            <para>
             <code>CONTAINS</code> : Checks for a subsequence, or value in a set.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If the target attribute
            of the comparison is of type String, then the operator checks for a substring match.
            If the target attribute of the comparison is of type Binary, then the operator looks
            for a subsequence of the target that matches the input. If the target attribute of
            the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"),
            then the operator evaluates to true if it finds an exact match with any member of
            the set.
            </para>
             
            <para>
            CONTAINS is supported for lists: When evaluating "<code>a CONTAINS b</code>", "<code>a</code>"
            can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.
            </para>
             </li> <li> 
            <para>
             <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a
            value in a set.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If the target attribute
            of the comparison is a String, then the operator checks for the absence of a substring
            match. If the target attribute of the comparison is Binary, then the operator checks
            for the absence of a subsequence of the target that matches the input. If the target
            attribute of the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"),
            then the operator evaluates to true if it <i>does not</i> find an exact match with
            any member of the set.
            </para>
             
            <para>
            NOT_CONTAINS is supported for lists: When evaluating "<code>a NOT CONTAINS b</code>",
            "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map,
            or a list.
            </para>
             </li> <li> 
            <para>
             <code>BEGINS_WITH</code> : Checks for a prefix. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String or Binary (not a Number or a set type). The target attribute of the
            comparison must be of type String or Binary (not a Number or a set type).
            </para>
              </li> <li> 
            <para>
             <code>IN</code> : Checks for matching elements in a list.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code>
            elements of type String, Number, or Binary. These attributes are compared against
            an existing attribute of an item. If any elements of the input are equal to the item
            attribute, the expression evaluates to true.
            </para>
             </li> <li> 
            <para>
             <code>BETWEEN</code> : Greater than or equal to the first value, and less than or
            equal to the second value. 
            </para>
             
            <para>
             <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements
            of the same type, either String, Number, or Binary (not a set type). A target attribute
            matches if the target value is greater than, or equal to, the first element and less
            than, or equal to, the second element. If an item contains an <code>AttributeValue</code>
            element of a different type than the one provided in the request, the value does not
            match. For example, <code>{"S":"6"}</code> does not compare to <code>{"N":"6"}</code>.
            Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>
            
            </para>
             </li> </ul> 
            <para>
            For usage examples of <code>AttributeValueList</code> and <code>ComparisonOperator</code>,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy
            Conditional Parameters</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.String)">
            <summary>
            Constructs a new ConditionalCheckFailedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ConditionalCheckFailedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.Exception)">
            <summary>
            Construct instance of ConditionalCheckFailedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConditionalCheckFailedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConditionalCheckFailedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ConditionalCheckFailedException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ConsumedCapacity">
            <summary>
            The capacity units consumed by an operation. The data returned includes the total
            provisioned throughput consumed, along with statistics for the table and any indexes
            involved in the operation. <code>ConsumedCapacity</code> is only returned if the request
            asked for it. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ConsumedCapacity.CapacityUnits">
            <summary>
            Gets and sets the property CapacityUnits. 
            <para>
            The total number of capacity units consumed by the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ConsumedCapacity.GlobalSecondaryIndexes">
            <summary>
            Gets and sets the property GlobalSecondaryIndexes. 
            <para>
            The amount of throughput consumed on each global index affected by the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ConsumedCapacity.LocalSecondaryIndexes">
            <summary>
            Gets and sets the property LocalSecondaryIndexes. 
            <para>
            The amount of throughput consumed on each local index affected by the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ConsumedCapacity.Table">
            <summary>
            Gets and sets the property Table. 
            <para>
            The amount of throughput consumed on the table affected by the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ConsumedCapacity.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table that was affected by the operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ContinuousBackupsDescription">
            <summary>
            Represents the backup and restore settings on the table when the backup was created.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ContinuousBackupsDescription.ContinuousBackupsStatus">
            <summary>
            Gets and sets the property ContinuousBackupsStatus. 
            <para>
            ContinuousBackupsStatus can be one of the following states : ENABLED, DISABLED
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.String)">
            <summary>
            Constructs a new ContinuousBackupsUnavailableException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ContinuousBackupsUnavailableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.Exception)">
            <summary>
            Construct instance of ContinuousBackupsUnavailableException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ContinuousBackupsUnavailableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ContinuousBackupsUnavailableException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ContinuousBackupsUnavailableException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateBackupRequest">
            <summary>
            Container for the parameters to the CreateBackup operation.
            Creates a backup for an existing table.
            
             
            <para>
             Each time you create an On-Demand Backup, the entire table data is backed up. There
            is no limit to the number of on-demand backups that can be taken. 
            </para>
             
            <para>
             When you create an On-Demand Backup, a time marker of the request is cataloged, and
            the backup is created asynchronously, by applying all changes until the time of the
            request to the last full table snapshot. Backup requests are processed instantaneously
            and become available for restore within minutes. 
            </para>
             
            <para>
            You can call <code>CreateBackup</code> at a maximum rate of 50 times per second.
            </para>
             
            <para>
            All backups in DynamoDB work without consuming any provisioned throughput on the table.
            </para>
             
            <para>
             If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed
            to contain all data committed to the table up to 14:24:00, and data committed after
            14:26:00 will not be. The backup may or may not contain data modifications made between
            14:24:00 and 14:26:00. On-Demand Backup does not support causal consistency. 
            </para>
             
            <para>
             Along with data, the following are also included on the backups: 
            </para>
             <ul> <li> 
            <para>
            Global secondary indexes (GSIs)
            </para>
             </li> <li> 
            <para>
            Local secondary indexes (LSIs)
            </para>
             </li> <li> 
            <para>
            Streams
            </para>
             </li> <li> 
            <para>
            Provisioned read and write capacity
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateBackupRequest.BackupName">
            <summary>
            Gets and sets the property BackupName. 
            <para>
            Specified name for the backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateBackupRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateBackupResponse">
            <summary>
            This is the response object from the CreateBackup operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateBackupResponse.BackupDetails">
            <summary>
            Gets and sets the property BackupDetails. 
            <para>
            Contains the details of the backup created for the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction">
            <summary>
            Represents a new global secondary index to be added to an existing table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index to be created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The key schema for the global secondary index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into an index. These
            are in addition to the primary key attributes and index key attributes, which are
            automatically projected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for the specified global secondary
            index.
            </para>
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateGlobalTableRequest">
            <summary>
            Container for the parameters to the CreateGlobalTable operation.
            Creates a global table from an existing table. A global table creates a replication
            relationship between two or more DynamoDB tables with the same table name in the provided
            regions. 
            
             
            <para>
             Tables can only be added as the replicas of a global table group under the following
            conditions: 
            </para>
             <ul> <li> 
            <para>
             The tables must have the same name. 
            </para>
             </li> <li> 
            <para>
             The tables must contain no items. 
            </para>
             </li> <li> 
            <para>
             The tables must have the same hash key and sort key (if present). 
            </para>
             </li> <li> 
            <para>
             The tables must have DynamoDB Streams enabled (NEW_AND_OLD_IMAGES). 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalTableRequest.GlobalTableName">
            <summary>
            Gets and sets the property GlobalTableName. 
            <para>
            The global table name.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalTableRequest.ReplicationGroup">
            <summary>
            Gets and sets the property ReplicationGroup. 
            <para>
            The regions where the global table needs to be created.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateGlobalTableResponse">
            <summary>
            This is the response object from the CreateGlobalTable operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateGlobalTableResponse.GlobalTableDescription">
            <summary>
            Gets and sets the property GlobalTableDescription. 
            <para>
            Contains the details of the global table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateReplicaAction">
            <summary>
            Represents a replica to be added.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateReplicaAction.RegionName">
            <summary>
            Gets and sets the property RegionName. 
            <para>
            The region of the replica to be added.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateTableRequest">
            <summary>
            Container for the parameters to the CreateTable operation.
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.CreateTableRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.CreateTableRequest.#ctor(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement})">
            <summary>
            Instantiates CreateTableRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.CreateTableRequest.#ctor(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            Instantiates CreateTableRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="attributeDefinitions">An array of attributes that describe the key schema for the table and indexes.</param>
            <param name="provisionedThroughput">Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation. For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.AttributeDefinitions">
            <summary>
            Gets and sets the property AttributeDefinitions. 
            <para>
            An array of attributes that describe the key schema for the table and indexes.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.GlobalSecondaryIndexes">
            <summary>
            Gets and sets the property GlobalSecondaryIndexes. 
            <para>
            One or more global secondary indexes (the maximum is five) to be created on the table.
            Each global secondary index in the array includes the following:
            </para>
             <ul> <li> 
            <para>
             <code>IndexName</code> - The name of the global secondary index. Must be unique only
            for this table.
            </para>
              </li> <li> 
            <para>
             <code>KeySchema</code> - Specifies the key schema for the global secondary index.
            </para>
             </li> <li> 
            <para>
             <code>Projection</code> - Specifies attributes that are copied (projected) from the
            table into the index. These are in addition to the primary key attributes and index
            key attributes, which are automatically projected. Each attribute specification is
            composed of:
            </para>
             <ul> <li> 
            <para>
             <code>ProjectionType</code> - One of the following:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.
            </para>
             </li> <li> 
            <para>
             <code>INCLUDE</code> - Only the specified table attributes are projected into the
            index. The list of projected attributes are in <code>NonKeyAttributes</code>.
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> - All of the table attributes are projected into the index.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that
            are projected into the secondary index. The total count of attributes provided in
            <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not
            exceed 20. If you project the same attribute into two different indexes, this counts
            as two distinct attributes when determining the total.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>ProvisionedThroughput</code> - The provisioned throughput settings for the
            global secondary index, consisting of read and write capacity units.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            Specifies the attributes that make up the primary key for a table or an index. The
            attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code>
            array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data
            Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            Each <code>KeySchemaElement</code> in the array is composed of:
            </para>
             <ul> <li> 
            <para>
             <code>AttributeName</code> - The name of this key attribute.
            </para>
             </li> <li> 
            <para>
             <code>KeyType</code> - The role that the key attribute will assume:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note> 
            <para>
            For a simple primary key (partition key), you must provide exactly one element with
            a <code>KeyType</code> of <code>HASH</code>.
            </para>
             
            <para>
            For a composite primary key (partition key and sort key), you must provide exactly
            two elements, in this order: The first element must have a <code>KeyType</code> of
            <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying
            the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.LocalSecondaryIndexes">
            <summary>
            Gets and sets the property LocalSecondaryIndexes. 
            <para>
            One or more local secondary indexes (the maximum is five) to be created on the table.
            Each index is scoped to a given partition key value. There is a 10 GB size limit per
            partition key value; otherwise, the size of a local secondary index is unconstrained.
            </para>
             
            <para>
            Each local secondary index in the array includes the following:
            </para>
             <ul> <li> 
            <para>
             <code>IndexName</code> - The name of the local secondary index. Must be unique only
            for this table.
            </para>
              </li> <li> 
            <para>
             <code>KeySchema</code> - Specifies the key schema for the local secondary index.
            The key schema must begin with the same partition key as the table.
            </para>
             </li> <li> 
            <para>
             <code>Projection</code> - Specifies attributes that are copied (projected) from the
            table into the index. These are in addition to the primary key attributes and index
            key attributes, which are automatically projected. Each attribute specification is
            composed of:
            </para>
             <ul> <li> 
            <para>
             <code>ProjectionType</code> - One of the following:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.
            </para>
             </li> <li> 
            <para>
             <code>INCLUDE</code> - Only the specified table attributes are projected into the
            index. The list of projected attributes are in <code>NonKeyAttributes</code>.
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> - All of the table attributes are projected into the index.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that
            are projected into the secondary index. The total count of attributes provided in
            <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not
            exceed 20. If you project the same attribute into two different indexes, this counts
            as two distinct attributes when determining the total.
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for a specified table or index. The
            settings can be modified using the <code>UpdateTable</code> operation.
            </para>
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.SSESpecification">
            <summary>
            Gets and sets the property SSESpecification. 
            <para>
            Represents the settings used to enable server-side encryption.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.StreamSpecification">
            <summary>
            Gets and sets the property StreamSpecification. 
            <para>
            The settings for DynamoDB Streams on the table. These settings consist of:
            </para>
             <ul> <li> 
            <para>
             <code>StreamEnabled</code> - Indicates whether Streams is to be enabled (true) or
            disabled (false).
            </para>
             </li> <li> 
            <para>
             <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code>
            determines what information is written to the table's stream. Valid values for <code>StreamViewType</code>
            are:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written
            to the stream.
            </para>
             </li> <li> 
            <para>
             <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is
            written to the stream.
            </para>
             </li> <li> 
            <para>
             <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified,
            is written to the stream.
            </para>
             </li> <li> 
            <para>
             <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item
            are written to the stream.
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to create.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.CreateTableResponse">
            <summary>
            Represents the output of a <code>CreateTable</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.CreateTableResponse.TableDescription">
            <summary>
            Gets and sets the property TableDescription. 
            <para>
            Represents the properties of the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteBackupRequest">
            <summary>
            Container for the parameters to the DeleteBackup operation.
            Deletes an existing backup of a table.
            
             
            <para>
            You can call <code>DeleteBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteBackupRequest.BackupArn">
            <summary>
            Gets and sets the property BackupArn. 
            <para>
            The ARN associated with the backup.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteBackupResponse">
            <summary>
            This is the response object from the DeleteBackup operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteBackupResponse.BackupDescription">
            <summary>
            Gets and sets the property BackupDescription. 
            <para>
            Contains the description of the backup created for the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteGlobalSecondaryIndexAction">
            <summary>
            Represents a global secondary index to be deleted from an existing table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteGlobalSecondaryIndexAction.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index to be deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteItemRequest">
            <summary>
            Container for the parameters to the DeleteItem operation.
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Instantiates DeleteItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Instantiates DeleteItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - The content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ConditionalOperator">
            <summary>
            Gets and sets the property ConditionalOperator. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ConditionExpression">
            <summary>
            Gets and sets the property ConditionExpression. 
            <para>
            A condition that must be satisfied in order for a conditional <code>DeleteItem</code>
            to succeed.
            </para>
             
            <para>
            An expression can contain any of the following:
            </para>
             <ul> <li> 
            <para>
            Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains
            | begins_with | size</code> 
            </para>
             
            <para>
            These function names are case-sensitive.
            </para>
             </li> <li> 
            <para>
            Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN |
            IN </code> 
            </para>
             </li> <li> 
            <para>
             Logical operators: <code>AND | OR | NOT</code> 
            </para>
             </li> </ul> 
            <para>
            For more information on condition expressions, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.Expected">
            <summary>
            Gets and sets the property Expected. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. 
            <para>
            One or more values that can be substituted in an expression.
            </para>
             
            <para>
            Use the <b>:</b> (colon) character in an expression to dereference an attribute value.
            For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i>
            attribute was one of the following: 
            </para>
             
            <para>
             <code>Available | Backordered | Discontinued</code> 
            </para>
             
            <para>
            You would first need to specify <code>ExpressionAttributeValues</code> as follows:
            </para>
             
            <para>
             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"}
            }</code> 
            </para>
             
            <para>
            You could then use these values in an expression, such as this:
            </para>
             
            <para>
             <code>ProductStatus IN (:avail, :back, :disc)</code> 
            </para>
             
            <para>
            For more information on expression attribute values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            A map of attribute names to <code>AttributeValue</code> objects, representing the
            primary key of the item to delete.
            </para>
             
            <para>
            For the primary key, you must provide all of the attributes. For example, with a simple
            primary key, you only need to provide a value for the partition key. For a composite
            primary key, you must provide values for both the partition key and the sort key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ReturnItemCollectionMetrics">
            <summary>
            Gets and sets the property ReturnItemCollectionMetrics. 
            <para>
            Determines whether item collection metrics are returned. If set to <code>SIZE</code>,
            the response includes statistics about item collections, if any, that were modified
            during the operation are returned in the response. If set to <code>NONE</code> (the
            default), no statistics are returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.ReturnValues">
            <summary>
            Gets and sets the property ReturnValues. 
            <para>
            Use <code>ReturnValues</code> if you want to get the item attributes as they appeared
            before they were deleted. For <code>DeleteItem</code>, the valid values are:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value
            is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)
            </para>
             </li> <li> 
            <para>
             <code>ALL_OLD</code> - The content of the old item is returned.
            </para>
             </li> </ul> <note> 
            <para>
            The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
            <code>DeleteItem</code> does not recognize any values other than <code>NONE</code>
            or <code>ALL_OLD</code>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table from which to delete the item.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteItemResponse">
            <summary>
            Represents the output of a <code>DeleteItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemResponse.Attributes">
            <summary>
            Gets and sets the property Attributes. 
            <para>
            A map of attribute names to <code>AttributeValue</code> objects, representing the
            item as it appeared before the <code>DeleteItem</code> operation. This map appears
            in the response only if <code>ReturnValues</code> was specified as <code>ALL_OLD</code>
            in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>DeleteItem</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteItemResponse.ItemCollectionMetrics">
            <summary>
            Gets and sets the property ItemCollectionMetrics. 
            <para>
            Information about item collections, if any, that were affected by the <code>DeleteItem</code>
            operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code>
            parameter was specified. If the table does not have any local secondary indexes, this
            information is not returned in the response.
            </para>
             
            <para>
            Each <code>ItemCollectionMetrics</code> element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>ItemCollectionKey</code> - The partition key value of the item collection.
            This is the same as the partition key value of the item itself.
            </para>
             </li> <li> 
            <para>
             <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes.
            This value is a two-element array containing a lower bound and an upper bound for
            the estimate. The estimate includes the size of all the items in the table, plus the
            size of all attributes projected into all of the local secondary indexes on that table.
            Use this estimate to measure whether a local secondary index is approaching its size
            limit.
            </para>
             
            <para>
            The estimate is subject to change over time; therefore, do not rely on the precision
            or accuracy of the estimate.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteReplicaAction">
            <summary>
            Represents a replica to be removed.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteReplicaAction.RegionName">
            <summary>
            Gets and sets the property RegionName. 
            <para>
            The region of the replica to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteRequest">
            <summary>
            Represents a request to perform a <code>DeleteItem</code> operation on an item.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteRequest.#ctor(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Instantiates DeleteRequest with the parameterized properties
            </summary>
            <param name="key">A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteRequest.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            A map of attribute name to attribute values, representing the primary key of the item
            to delete. All of the table's primary key attributes must be specified, and their
            data types must match those of the table's key schema.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteTableRequest">
            <summary>
            Container for the parameters to the DeleteTable operation.
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteTableRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DeleteTableRequest.#ctor(System.String)">
            <summary>
            Instantiates DeleteTableRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to delete.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteTableRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DeleteTableResponse">
            <summary>
            Represents the output of a <code>DeleteTable</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DeleteTableResponse.TableDescription">
            <summary>
            Gets and sets the property TableDescription. 
            <para>
            Represents the properties of a table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeBackupRequest">
            <summary>
            Container for the parameters to the DescribeBackup operation.
            Describes an existing backup of a table.
            
             
            <para>
            You can call <code>DescribeBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeBackupRequest.BackupArn">
            <summary>
            Gets and sets the property BackupArn. 
            <para>
            The ARN associated with the backup.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeBackupResponse">
            <summary>
            This is the response object from the DescribeBackup operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeBackupResponse.BackupDescription">
            <summary>
            Gets and sets the property BackupDescription. 
            <para>
            Contains the description of the backup created for the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest">
            <summary>
            Container for the parameters to the DescribeContinuousBackups operation.
            Checks the status of the backup restore settings on the specified table. If backups
            are enabled, <code>ContinuousBackupsStatus</code> will bet set to ENABLED.
            
             
            <para>
            You can call <code>DescribeContinuousBackups</code> at a maximum rate of 10 times
            per second.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            Name of the table for which the customer wants to check the backup and restore settings.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeContinuousBackupsResponse">
            <summary>
            This is the response object from the DescribeContinuousBackups operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeContinuousBackupsResponse.ContinuousBackupsDescription">
            <summary>
            Gets and sets the property ContinuousBackupsDescription. 
            <para>
             <code>ContinuousBackupsDescription</code> can be one of the following : ENABLED,
            DISABLED. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest">
            <summary>
            Container for the parameters to the DescribeGlobalTable operation.
            Returns information about the specified global table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest.GlobalTableName">
            <summary>
            Gets and sets the property GlobalTableName. 
            <para>
            The name of the global table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeGlobalTableResponse">
            <summary>
            This is the response object from the DescribeGlobalTable operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeGlobalTableResponse.GlobalTableDescription">
            <summary>
            Gets and sets the property GlobalTableDescription. 
            <para>
            Contains the details of the global table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeLimitsRequest">
            <summary>
            Container for the parameters to the DescribeLimits operation.
            Returns the current provisioned-capacity limits for your AWS account in a region,
            both for the region as a whole and for any one DynamoDB table that you create there.
            
             
            <para>
            When you establish an AWS account, the account has initial limits on the maximum read
            capacity units and write capacity units that you can provision across all of your
            DynamoDB tables in a given region. Also, there are per-table limits that apply when
            you create a table there. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            page in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            Although you can increase these limits by filing a case at <a href="https://console.aws.amazon.com/support/home#/">AWS
            Support Center</a>, obtaining the increase is not instantaneous. The <code>DescribeLimits</code>
            action lets you write code to compare the capacity you are currently using to those
            limits imposed by your account so that you have enough time to apply for an increase
            before you hit a limit.
            </para>
             
            <para>
            For example, you could use one of the AWS SDKs to do the following:
            </para>
             <ol> <li> 
            <para>
            Call <code>DescribeLimits</code> for a particular region to obtain your current account
            limits on provisioned capacity there.
            </para>
             </li> <li> 
            <para>
            Create a variable to hold the aggregate read capacity units provisioned for all your
            tables in that region, and one to hold the aggregate write capacity units. Zero them
            both.
            </para>
             </li> <li> 
            <para>
            Call <code>ListTables</code> to obtain a list of all your DynamoDB tables.
            </para>
             </li> <li> 
            <para>
            For each table name listed by <code>ListTables</code>, do the following:
            </para>
             <ul> <li> 
            <para>
            Call <code>DescribeTable</code> with the table name.
            </para>
             </li> <li> 
            <para>
            Use the data returned by <code>DescribeTable</code> to add the read capacity units
            and write capacity units provisioned for the table itself to your variables.
            </para>
             </li> <li> 
            <para>
            If the table has one or more global secondary indexes (GSIs), loop over these GSIs
            and add their provisioned capacity values to your variables as well.
            </para>
             </li> </ul> </li> <li> 
            <para>
            Report the account limits for that region returned by <code>DescribeLimits</code>,
            along with the total current provisioned capacity levels you have calculated.
            </para>
             </li> </ol> 
            <para>
            This will let you see whether you are getting close to your account-level limits.
            </para>
             
            <para>
            The per-table limits apply only when you are creating a new table. They restrict the
            sum of the provisioned capacity of the new table itself and all its global secondary
            indexes.
            </para>
             
            <para>
            For existing tables and their GSIs, DynamoDB will not let you increase provisioned
            capacity extremely rapidly, but the only upper limit that applies is that the aggregate
            provisioned capacity over all your tables and GSIs cannot exceed either of the per-account
            limits.
            </para>
             <note> 
            <para>
             <code>DescribeLimits</code> should only be called periodically. You can expect throttling
            errors if you call it more than once in a minute.
            </para>
             </note> 
            <para>
            The <code>DescribeLimits</code> Request element has no content.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeLimitsResponse">
            <summary>
            Represents the output of a <code>DescribeLimits</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeLimitsResponse.AccountMaxReadCapacityUnits">
            <summary>
            Gets and sets the property AccountMaxReadCapacityUnits. 
            <para>
            The maximum total read capacity units that your account allows you to provision across
            all of your tables in this region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeLimitsResponse.AccountMaxWriteCapacityUnits">
            <summary>
            Gets and sets the property AccountMaxWriteCapacityUnits. 
            <para>
            The maximum total write capacity units that your account allows you to provision across
            all of your tables in this region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeLimitsResponse.TableMaxReadCapacityUnits">
            <summary>
            Gets and sets the property TableMaxReadCapacityUnits. 
            <para>
            The maximum read capacity units that your account allows you to provision for a new
            table that you are creating in this region, including the read capacity units provisioned
            for its global secondary indexes (GSIs).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeLimitsResponse.TableMaxWriteCapacityUnits">
            <summary>
            Gets and sets the property TableMaxWriteCapacityUnits. 
            <para>
            The maximum write capacity units that your account allows you to provision for a new
            table that you are creating in this region, including the write capacity units provisioned
            for its global secondary indexes (GSIs).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeStreamRequest">
            <summary>
            Container for the parameters to the DescribeStream operation.
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeStreamRequest.ExclusiveStartShardId">
            <summary>
            Gets and sets the property ExclusiveStartShardId. 
            <para>
            The shard ID of the first item that this operation will evaluate. Use the value that
            was returned for <code>LastEvaluatedShardId</code> in the previous operation. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeStreamRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of shard objects to return. The upper limit is 100.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeStreamRequest.StreamArn">
            <summary>
            Gets and sets the property StreamArn. 
            <para>
            The Amazon Resource Name (ARN) for the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeStreamResponse">
            <summary>
            Represents the output of a <code>DescribeStream</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeStreamResponse.StreamDescription">
            <summary>
            Gets and sets the property StreamDescription. 
            <para>
            A complete description of the stream, including its creation date and time, the DynamoDB
            table associated with the stream, the shard IDs within the stream, and the beginning
            and ending sequence numbers of stream records within the shards.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeTableRequest">
            <summary>
            Container for the parameters to the DescribeTable operation.
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DescribeTableRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.DescribeTableRequest.#ctor(System.String)">
            <summary>
            Instantiates DescribeTableRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to describe.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeTableRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeTableResponse">
            <summary>
            Represents the output of a <code>DescribeTable</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeTableResponse.Table">
            <summary>
            Gets and sets the property Table. 
            <para>
            The properties of the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest">
            <summary>
            Container for the parameters to the DescribeTimeToLive operation.
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to be described.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.DescribeTimeToLiveResponse">
            <summary>
            This is the response object from the DescribeTimeToLive operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.DescribeTimeToLiveResponse.TimeToLiveDescription">
            <summary>
            Gets and sets the property TimeToLiveDescription.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ExpectedAttributeValue">
            <summary>
            Represents a condition to be compared with an attribute value. This condition can
            be used with <code>DeleteItem</code>, <code>PutItem</code> or <code>UpdateItem</code>
            operations; if the comparison evaluates to true, the operation succeeds; if not, the
            operation fails. You can use <code>ExpectedAttributeValue</code> in one of two different
            ways:
            
             <ul> <li> 
            <para>
            Use <code>AttributeValueList</code> to specify one or more values to compare against
            an attribute. Use <code>ComparisonOperator</code> to specify how you want to perform
            the comparison. If the comparison evaluates to true, then the conditional operation
            succeeds.
            </para>
             </li> <li> 
            <para>
            Use <code>Value</code> to specify a value that DynamoDB will compare against an attribute.
            If the values match, then <code>ExpectedAttributeValue</code> evaluates to true and
            the conditional operation succeeds. Optionally, you can also set <code>Exists</code>
            to false, indicating that you <i>do not</i> expect to find the attribute value in
            the table. In this case, the conditional operation succeeds only if the comparison
            evaluates to false.
            </para>
             </li> </ul> 
            <para>
             <code>Value</code> and <code>Exists</code> are incompatible with <code>AttributeValueList</code>
            and <code>ComparisonOperator</code>. Note that if you use both sets of parameters
            at once, DynamoDB will return a <code>ValidationException</code> exception.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.#ctor(Amazon.DynamoDBv2.Model.AttributeValue)">
            <summary>
            Instantiates ExpectedAttributeValue with the parameterized properties
            </summary>
            <param name="value">Represents the data for the expected attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.#ctor(System.Boolean)">
            <summary>
            Instantiates ExpectedAttributeValue with the parameterized properties
            </summary>
            <param name="exists">Causes DynamoDB to evaluate the value before attempting a conditional operation: <ul> <li> If <code>Exists</code> is <code>true</code>, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a <code>ConditionalCheckFailedException</code>. </li> <li> If <code>Exists</code> is <code>false</code>, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a <code>ConditionalCheckFailedException</code>. </li> </ul> The default setting for <code>Exists</code> is <code>true</code>. If you supply a <code>Value</code> all by itself, DynamoDB assumes the attribute exists: You don't have to set <code>Exists</code> to <code>true</code>, because it is implied. DynamoDB returns a <code>ValidationException</code> if: <ul> <li>  <code>Exists</code> is <code>true</code> but there is no <code>Value</code> to check. (You expect a value to exist, but don't specify what that value is.) </li> <li>  <code>Exists</code> is <code>false</code> but you also provide a <code>Value</code>. (You cannot expect an attribute to have a value, while also expecting it not to exist.) </li> </ul></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.AttributeValueList">
            <summary>
            Gets and sets the property AttributeValueList. 
            <para>
            One or more values to evaluate against the supplied attribute. The number of values
            in the list depends on the <code>ComparisonOperator</code> being used.
            </para>
             
            <para>
            For type Number, value comparisons are numeric.
            </para>
             
            <para>
            String value comparisons for greater than, equals, or less than are based on ASCII
            character code values. For example, <code>a</code> is greater than <code>A</code>,
            and <code>a</code> is greater than <code>B</code>. For a list of code values, see
            <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
            </para>
             
            <para>
            For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares
            binary values.
            </para>
             
            <para>
            For information on specifying data types in JSON, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html">JSON
            Data Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.ComparisonOperator">
            <summary>
            Gets and sets the property ComparisonOperator. 
            <para>
            A comparator for evaluating attributes in the <code>AttributeValueList</code>. For
            example, equals, greater than, less than, etc.
            </para>
             
            <para>
            The following comparison operators are available:
            </para>
             
            <para>
             <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
            | IN | BETWEEN</code> 
            </para>
             
            <para>
            The following are descriptions of each comparison operator.
            </para>
             <ul> <li> 
            <para>
             <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including
            lists and maps.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, Binary, String Set, Number Set, or Binary Set. If
            an item contains an <code>AttributeValue</code> element of a different type than the
            one provided in the request, the value does not match. For example, <code>{"S":"6"}</code>
            does not equal <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not equal
            <code>{"NS":["6", "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including
            lists and maps.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item
            contains an <code>AttributeValue</code> of a different type than the one provided
            in the request, the value does not match. For example, <code>{"S":"6"}</code> does
            not equal <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not equal <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>LE</code> : Less than or equal. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>LT</code> : Less than. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code>
            element of a different type than the one provided in the request, the value does not
            match. For example, <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>.
            Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>GE</code> : Greater than or equal. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>GT</code> : Greater than. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If an item contains an
            <code>AttributeValue</code> element of a different type than the one provided in the
            request, the value does not match. For example, <code>{"S":"6"}</code> does not equal
            <code>{"N":"6"}</code>. Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6",
            "2", "1"]}</code>.
            </para>
              </li> <li> 
            <para>
             <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported
            for all data types, including lists and maps.
            </para>
             <note> 
            <para>
            This operator tests for the existence of an attribute, not its data type. If the data
            type of attribute "<code>a</code>" is null, and you evaluate it using <code>NOT_NULL</code>,
            the result is a Boolean <code>true</code>. This result is because the attribute "<code>a</code>"
            exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.
            </para>
             </note> </li> <li> 
            <para>
             <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported
            for all data types, including lists and maps.
            </para>
             <note> 
            <para>
            This operator tests for the nonexistence of an attribute, not its data type. If the
            data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NULL</code>,
            the result is a Boolean <code>false</code>. This is because the attribute "<code>a</code>"
            exists; its data type is not relevant to the <code>NULL</code> comparison operator.
            </para>
             </note> </li> <li> 
            <para>
             <code>CONTAINS</code> : Checks for a subsequence, or value in a set.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If the target attribute
            of the comparison is of type String, then the operator checks for a substring match.
            If the target attribute of the comparison is of type Binary, then the operator looks
            for a subsequence of the target that matches the input. If the target attribute of
            the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"),
            then the operator evaluates to true if it finds an exact match with any member of
            the set.
            </para>
             
            <para>
            CONTAINS is supported for lists: When evaluating "<code>a CONTAINS b</code>", "<code>a</code>"
            can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.
            </para>
             </li> <li> 
            <para>
             <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a
            value in a set.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            element of type String, Number, or Binary (not a set type). If the target attribute
            of the comparison is a String, then the operator checks for the absence of a substring
            match. If the target attribute of the comparison is Binary, then the operator checks
            for the absence of a subsequence of the target that matches the input. If the target
            attribute of the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"),
            then the operator evaluates to true if it <i>does not</i> find an exact match with
            any member of the set.
            </para>
             
            <para>
            NOT_CONTAINS is supported for lists: When evaluating "<code>a NOT CONTAINS b</code>",
            "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map,
            or a list.
            </para>
             </li> <li> 
            <para>
             <code>BEGINS_WITH</code> : Checks for a prefix. 
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain only one <code>AttributeValue</code>
            of type String or Binary (not a Number or a set type). The target attribute of the
            comparison must be of type String or Binary (not a Number or a set type).
            </para>
              </li> <li> 
            <para>
             <code>IN</code> : Checks for matching elements in a list.
            </para>
             
            <para>
             <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code>
            elements of type String, Number, or Binary. These attributes are compared against
            an existing attribute of an item. If any elements of the input are equal to the item
            attribute, the expression evaluates to true.
            </para>
             </li> <li> 
            <para>
             <code>BETWEEN</code> : Greater than or equal to the first value, and less than or
            equal to the second value. 
            </para>
             
            <para>
             <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements
            of the same type, either String, Number, or Binary (not a set type). A target attribute
            matches if the target value is greater than, or equal to, the first element and less
            than, or equal to, the second element. If an item contains an <code>AttributeValue</code>
            element of a different type than the one provided in the request, the value does not
            match. For example, <code>{"S":"6"}</code> does not compare to <code>{"N":"6"}</code>.
            Also, <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>
            
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.Exists">
            <summary>
            Gets and sets the property Exists. 
            <para>
            Causes DynamoDB to evaluate the value before attempting a conditional operation:
            </para>
             <ul> <li> 
            <para>
            If <code>Exists</code> is <code>true</code>, DynamoDB will check to see if that attribute
            value already exists in the table. If it is found, then the operation succeeds. If
            it is not found, the operation fails with a <code>ConditionalCheckFailedException</code>.
            </para>
             </li> <li> 
            <para>
            If <code>Exists</code> is <code>false</code>, DynamoDB assumes that the attribute
            value does not exist in the table. If in fact the value does not exist, then the assumption
            is valid and the operation succeeds. If the value is found, despite the assumption
            that it does not exist, the operation fails with a <code>ConditionalCheckFailedException</code>.
            </para>
             </li> </ul> 
            <para>
            The default setting for <code>Exists</code> is <code>true</code>. If you supply a
            <code>Value</code> all by itself, DynamoDB assumes the attribute exists: You don't
            have to set <code>Exists</code> to <code>true</code>, because it is implied.
            </para>
             
            <para>
            DynamoDB returns a <code>ValidationException</code> if:
            </para>
             <ul> <li> 
            <para>
             <code>Exists</code> is <code>true</code> but there is no <code>Value</code> to check.
            (You expect a value to exist, but don't specify what that value is.)
            </para>
             </li> <li> 
            <para>
             <code>Exists</code> is <code>false</code> but you also provide a <code>Value</code>.
            (You cannot expect an attribute to have a value, while also expecting it not to exist.)
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ExpectedAttributeValue.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            Represents the data for the expected attribute.
            </para>
             
            <para>
            Each attribute value is described as a name-value pair. The name is the data type,
            and the value is the data itself.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data
            Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            <summary>
             DynamoDBStreams exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.String)">
            <summary>
            Constructs a new ExpiredIteratorException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.Exception)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ExpiredIteratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ExpiredIteratorException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetItemRequest">
            <summary>
            Container for the parameters to the GetItem operation.
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GetItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GetItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Instantiates GetItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GetItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean)">
            <summary>
            Instantiates GetItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="consistentRead">Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.AttributesToGet">
            <summary>
            Gets and sets the property AttributesToGet. 
            <para>
            This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. 
            <para>
            Determines the read consistency model: If set to <code>true</code>, then the operation
            uses strongly consistent reads; otherwise, the operation uses eventually consistent
            reads.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            A map of attribute names to <code>AttributeValue</code> objects, representing the
            primary key of the item to retrieve.
            </para>
             
            <para>
            For the primary key, you must provide all of the attributes. For example, with a simple
            primary key, you only need to provide a value for the partition key. For a composite
            primary key, you must provide values for both the partition key and the sort key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.ProjectionExpression">
            <summary>
            Gets and sets the property ProjectionExpression. 
            <para>
            A string that identifies one or more attributes to retrieve from the table. These
            attributes can include scalars, sets, or elements of a JSON document. The attributes
            in the expression must be separated by commas.
            </para>
             
            <para>
            If no attribute names are specified, then all attributes will be returned. If any
            of the requested attributes are not found, they will not appear in the result.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table containing the requested item.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetItemResponse">
            <summary>
            Represents the output of a <code>GetItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>GetItem</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemResponse.Item">
            <summary>
            Gets and sets the property Item. 
            <para>
            A map of attribute names to <code>AttributeValue</code> objects, as specified by <code>ProjectionExpression</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetItemResponse.IsItemSet">
            <summary>
            This property is set to true if the property <seealso cref="P:Amazon.DynamoDBv2.Model.GetItemResponse.Item"/>
            is set; false otherwise.
            This property can be used to determine if the related property
            was returned by a service response or if the related property
            should be sent to the service during a service call.
            </summary>
            <returns>
            True if the related property was set or will be sent to a service; false otherwise.
            </returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetRecordsRequest">
            <summary>
            Container for the parameters to the GetRecords operation.
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetRecordsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of records to return from the shard. The upper limit is 1000.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetRecordsRequest.ShardIterator">
            <summary>
            Gets and sets the property ShardIterator. 
            <para>
            A shard iterator that was retrieved from a previous GetShardIterator operation. This
            iterator can be used to access the stream records in this shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetRecordsResponse">
            <summary>
            Represents the output of a <code>GetRecords</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetRecordsResponse.NextShardIterator">
            <summary>
            Gets and sets the property NextShardIterator. 
            <para>
            The next position in the shard from which to start sequentially reading stream records.
            If set to <code>null</code>, the shard has been closed and the requested iterator
            will not return any more data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetRecordsResponse.Records">
            <summary>
            Gets and sets the property Records. 
            <para>
            The stream records from the shard, which were retrieved using the shard iterator.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetShardIteratorRequest">
            <summary>
            Container for the parameters to the GetShardIterator operation.
            Returns a shard iterator. A shard iterator provides information about how to retrieve
            the stream records from within a shard. Use the shard iterator in a subsequent <code>GetRecords</code>
            request to read the stream records from the shard.
            
             <note> 
            <para>
            A shard iterator expires 15 minutes after it is returned to the requester.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetShardIteratorRequest.SequenceNumber">
            <summary>
            Gets and sets the property SequenceNumber. 
            <para>
            The sequence number of a stream record in the shard from which to start reading.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetShardIteratorRequest.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The identifier of the shard. The iterator will be returned for this shard ID.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetShardIteratorRequest.ShardIteratorType">
            <summary>
            Gets and sets the property ShardIteratorType. 
            <para>
            Determines how the shard iterator is used to start reading stream records from the
            shard:
            </para>
             <ul> <li> 
            <para>
             <code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the position denoted
            by a specific sequence number.
            </para>
             </li> <li> 
            <para>
             <code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the position denoted
            by a specific sequence number.
            </para>
             </li> <li> 
            <para>
             <code>TRIM_HORIZON</code> - Start reading at the last (untrimmed) stream record,
            which is the oldest record in the shard. In DynamoDB Streams, there is a 24 hour limit
            on data retention. Stream records whose age exceeds this limit are subject to removal
            (trimming) from the stream.
            </para>
             </li> <li> 
            <para>
             <code>LATEST</code> - Start reading just after the most recent stream record in the
            shard, so that you always read the most recent data in the shard.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetShardIteratorRequest.StreamArn">
            <summary>
            Gets and sets the property StreamArn. 
            <para>
            The Amazon Resource Name (ARN) for the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GetShardIteratorResponse">
            <summary>
            Represents the output of a <code>GetShardIterator</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GetShardIteratorResponse.ShardIterator">
            <summary>
            Gets and sets the property ShardIterator. 
            <para>
            The position in the shard from which to start reading stream records sequentially.
            A shard iterator specifies this position using the sequence number of a stream record
            in a shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalSecondaryIndex">
            <summary>
            Represents the properties of a global secondary index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndex.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index. The name must be unique among all other indexes
            on this table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndex.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndex.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the global secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndex.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for the specified global secondary
            index.
            </para>
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription">
            <summary>
            Represents the properties of a global secondary index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.Backfilling">
            <summary>
            Gets and sets the property Backfilling. 
            <para>
            Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process
            of reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items
            have been processed, the backfilling operation is complete and <code>Backfilling</code>
            is false.
            </para>
             <note> 
            <para>
            For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code>
            attribute does not appear in the <code>DescribeTable</code> output.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.IndexArn">
            <summary>
            Gets and sets the property IndexArn. 
            <para>
            The Amazon Resource Name (ARN) that uniquely identifies the index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.IndexSizeBytes">
            <summary>
            Gets and sets the property IndexSizeBytes. 
            <para>
            The total size of the specified index, in bytes. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.IndexStatus">
            <summary>
            Gets and sets the property IndexStatus. 
            <para>
            The current state of the global secondary index:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The index is being created.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - The index is being updated.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The index is being deleted.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The index is ready for use.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.ItemCount">
            <summary>
            Gets and sets the property ItemCount. 
            <para>
            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the global secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexDescription.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for the specified global secondary
            index.
            </para>
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexInfo">
            <summary>
            Represents the properties of a global secondary index for the table when the backup
            was created.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexInfo.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexInfo.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexInfo.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the global secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexInfo.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for the specified global secondary
            index. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexUpdate">
            <summary>
            Represents one of the following:
            
             <ul> <li> 
            <para>
            A new global secondary index to be added to an existing table.
            </para>
             </li> <li> 
            <para>
            New provisioned throughput parameters for an existing global secondary index.
            </para>
             </li> <li> 
            <para>
            An existing global secondary index to be removed from an existing table.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexUpdate.Create">
            <summary>
            Gets and sets the property Create. 
            <para>
            The parameters required for creating a global secondary index on an existing table:
            </para>
             <ul> <li> 
            <para>
             <code>IndexName </code> 
            </para>
             </li> <li> 
            <para>
             <code>KeySchema </code> 
            </para>
             </li> <li> 
            <para>
             <code>AttributeDefinitions </code> 
            </para>
             </li> <li> 
            <para>
             <code>Projection </code> 
            </para>
             </li> <li> 
            <para>
             <code>ProvisionedThroughput </code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexUpdate.Delete">
            <summary>
            Gets and sets the property Delete. 
            <para>
            The name of an existing global secondary index to be removed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalSecondaryIndexUpdate.Update">
            <summary>
            Gets and sets the property Update. 
            <para>
            The name of an existing global secondary index, along with new provisioned throughput
            settings to be applied to that index.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalTable">
            <summary>
            Represents the properties of a global table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTable.GlobalTableName">
            <summary>
            Gets and sets the property GlobalTableName. 
            <para>
            The global table name.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTable.ReplicationGroup">
            <summary>
            Gets and sets the property ReplicationGroup. 
            <para>
            The regions where the global table has replicas.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new GlobalTableAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of GlobalTableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of GlobalTableAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of GlobalTableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of GlobalTableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the GlobalTableAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalTableDescription">
            <summary>
            Contains details about the global table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTableDescription.CreationDateTime">
            <summary>
            Gets and sets the property CreationDateTime. 
            <para>
            The creation time of the global table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTableDescription.GlobalTableArn">
            <summary>
            Gets and sets the property GlobalTableArn. 
            <para>
            The unique identifier of the global table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTableDescription.GlobalTableName">
            <summary>
            Gets and sets the property GlobalTableName. 
            <para>
            The global table name.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTableDescription.GlobalTableStatus">
            <summary>
            Gets and sets the property GlobalTableStatus. 
            <para>
            The current state of the global table:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The global table is being created.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - The global table is being updated.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The global table is being deleted.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The global table is ready for use.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.GlobalTableDescription.ReplicationGroup">
            <summary>
            Gets and sets the property ReplicationGroup. 
            <para>
            The regions where the global table has replicas.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new GlobalTableNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of GlobalTableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of GlobalTableNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of GlobalTableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of GlobalTableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the GlobalTableNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Identity">
            <summary>
            Contains details about the type of identity that made the request.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Identity.PrincipalId">
            <summary>
            Gets and sets the property PrincipalId. 
            <para>
            A unique identifier for the entity that made the call. For Time To Live, the principalId
            is "dynamodb.amazonaws.com".
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Identity.Type">
            <summary>
            Gets and sets the property Type. 
            <para>
            The type of the identity. For Time To Live, the type is "Service".
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.String)">
            <summary>
            Constructs a new InternalServerErrorException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InternalServerErrorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.Exception)">
            <summary>
            Construct instance of InternalServerErrorException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalServerErrorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalServerErrorException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.InternalServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InternalServerErrorException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionMarshaller">
            <summary>
            AttributeDefinition Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionMarshaller.Marshall(Amazon.DynamoDBv2.Model.AttributeDefinition,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionUnmarshaller">
            <summary>
            Response Unmarshaller for AttributeDefinition Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#AttributeDefinition,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeDefinitionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueMarshaller">
            <summary>
            AttributeValue Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueMarshaller.Marshall(Amazon.DynamoDBv2.Model.AttributeValue,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUnmarshaller">
            <summary>
            Response Unmarshaller for AttributeValue Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#AttributeValue,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUpdateMarshaller">
            <summary>
            AttributeValueUpdate Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUpdateMarshaller.Marshall(Amazon.DynamoDBv2.Model.AttributeValueUpdate,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.AttributeValueUpdateMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for BackupDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#BackupDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDetailsUnmarshaller">
            <summary>
            Response Unmarshaller for BackupDetails Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDetailsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#BackupDetails,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDetailsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupDetailsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for BackupSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#BackupSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BackupSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemRequestMarshaller">
            <summary>
            BatchGetItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.BatchGetItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchGetItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchGetItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemRequestMarshaller">
            <summary>
            BatchWriteItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.BatchWriteItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchWriteItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.BatchWriteItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CapacityUnmarshaller">
            <summary>
            Response Unmarshaller for Capacity Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CapacityUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Capacity,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CapacityUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CapacityUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConditionMarshaller">
            <summary>
            Condition Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConditionMarshaller.Marshall(Amazon.DynamoDBv2.Model.Condition,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConditionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConsumedCapacityUnmarshaller">
            <summary>
            Response Unmarshaller for ConsumedCapacity Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConsumedCapacityUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ConsumedCapacity,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConsumedCapacityUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ConsumedCapacityUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ContinuousBackupsDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for ContinuousBackupsDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ContinuousBackupsDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ContinuousBackupsDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ContinuousBackupsDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ContinuousBackupsDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupRequestMarshaller">
            <summary>
            CreateBackup Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.CreateBackupRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateBackup operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateBackupResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalSecondaryIndexActionMarshaller">
            <summary>
            CreateGlobalSecondaryIndexAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalSecondaryIndexActionMarshaller.Marshall(Amazon.DynamoDBv2.Model.CreateGlobalSecondaryIndexAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalSecondaryIndexActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableRequestMarshaller">
            <summary>
            CreateGlobalTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.CreateGlobalTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateGlobalTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateGlobalTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateReplicaActionMarshaller">
            <summary>
            CreateReplicaAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateReplicaActionMarshaller.Marshall(Amazon.DynamoDBv2.Model.CreateReplicaAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateReplicaActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableRequestMarshaller">
            <summary>
            CreateTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.CreateTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.CreateTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupRequestMarshaller">
            <summary>
            DeleteBackup Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteBackupRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteBackup operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteBackupResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteGlobalSecondaryIndexActionMarshaller">
            <summary>
            DeleteGlobalSecondaryIndexAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteGlobalSecondaryIndexActionMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteGlobalSecondaryIndexAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteGlobalSecondaryIndexActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemRequestMarshaller">
            <summary>
            DeleteItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteReplicaActionMarshaller">
            <summary>
            DeleteReplicaAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteReplicaActionMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteReplicaAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteReplicaActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestMarshaller">
            <summary>
            DeleteRequest Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteRequest,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRequest Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#DeleteRequest,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteRequestUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableRequestMarshaller">
            <summary>
            DeleteTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DeleteTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DeleteTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupRequestMarshaller">
            <summary>
            DescribeBackup Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeBackupRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeBackup operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeBackupResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsRequestMarshaller">
            <summary>
            DescribeContinuousBackups Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeContinuousBackups operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeContinuousBackupsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableRequestMarshaller">
            <summary>
            DescribeGlobalTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeGlobalTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeGlobalTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller">
            <summary>
            DescribeLimits Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeLimitsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeLimits operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller">
            <summary>
            DescribeStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeStream operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableRequestMarshaller">
            <summary>
            DescribeTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveRequestMarshaller">
            <summary>
            DescribeTimeToLive Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeTimeToLive operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.DescribeTimeToLiveResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ExpectedAttributeValueMarshaller">
            <summary>
            ExpectedAttributeValue Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ExpectedAttributeValueMarshaller.Marshall(Amazon.DynamoDBv2.Model.ExpectedAttributeValue,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ExpectedAttributeValueMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemRequestMarshaller">
            <summary>
            GetItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.GetItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller">
            <summary>
            GetRecords Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.GetRecordsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRecords operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller">
            <summary>
            GetShardIterator Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.GetShardIteratorRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetShardIterator operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for GlobalSecondaryIndexDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#GlobalSecondaryIndexDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexInfoUnmarshaller">
            <summary>
            Response Unmarshaller for GlobalSecondaryIndexInfo Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexInfoUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#GlobalSecondaryIndexInfo,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexInfoUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexInfoUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexMarshaller">
            <summary>
            GlobalSecondaryIndex Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexMarshaller.Marshall(Amazon.DynamoDBv2.Model.GlobalSecondaryIndex,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexUpdateMarshaller">
            <summary>
            GlobalSecondaryIndexUpdate Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexUpdateMarshaller.Marshall(Amazon.DynamoDBv2.Model.GlobalSecondaryIndexUpdate,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalSecondaryIndexUpdateMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for GlobalTableDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#GlobalTableDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableUnmarshaller">
            <summary>
            Response Unmarshaller for GlobalTable Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#GlobalTable,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.GlobalTableUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.IdentityUnmarshaller">
            <summary>
            Response Unmarshaller for Identity Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.IdentityUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Identity,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.IdentityUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.IdentityUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ItemCollectionMetricsUnmarshaller">
            <summary>
            Response Unmarshaller for ItemCollectionMetrics Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ItemCollectionMetricsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ItemCollectionMetrics,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ItemCollectionMetricsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ItemCollectionMetricsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesMarshaller">
            <summary>
            KeysAndAttributes Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesMarshaller.Marshall(Amazon.DynamoDBv2.Model.KeysAndAttributes,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesUnmarshaller">
            <summary>
            Response Unmarshaller for KeysAndAttributes Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#KeysAndAttributes,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeysAndAttributesUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementMarshaller">
            <summary>
            KeySchemaElement Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementMarshaller.Marshall(Amazon.DynamoDBv2.Model.KeySchemaElement,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementUnmarshaller">
            <summary>
            Response Unmarshaller for KeySchemaElement Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#KeySchemaElement,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.KeySchemaElementUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsRequestMarshaller">
            <summary>
            ListBackups Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ListBackupsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListBackups operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListBackupsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesRequestMarshaller">
            <summary>
            ListGlobalTables Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ListGlobalTablesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListGlobalTables operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListGlobalTablesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller">
            <summary>
            ListStreams Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ListStreamsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListStreams operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesRequestMarshaller">
            <summary>
            ListTables Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ListTablesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTables operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTablesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceRequestMarshaller">
            <summary>
            ListTagsOfResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTagsOfResource operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ListTagsOfResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for LocalSecondaryIndexDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#LocalSecondaryIndexDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexInfoUnmarshaller">
            <summary>
            Response Unmarshaller for LocalSecondaryIndexInfo Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexInfoUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#LocalSecondaryIndexInfo,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexInfoUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexInfoUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexMarshaller">
            <summary>
            LocalSecondaryIndex Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexMarshaller.Marshall(Amazon.DynamoDBv2.Model.LocalSecondaryIndex,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.LocalSecondaryIndexMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionMarshaller">
            <summary>
            Projection Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionMarshaller.Marshall(Amazon.DynamoDBv2.Model.Projection,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionUnmarshaller">
            <summary>
            Response Unmarshaller for Projection Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Projection,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProjectionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for ProvisionedThroughputDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ProvisionedThroughputDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputMarshaller">
            <summary>
            ProvisionedThroughput Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputMarshaller.Marshall(Amazon.DynamoDBv2.Model.ProvisionedThroughput,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputUnmarshaller">
            <summary>
            Response Unmarshaller for ProvisionedThroughput Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ProvisionedThroughput,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ProvisionedThroughputUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemRequestMarshaller">
            <summary>
            PutItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.PutItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestMarshaller">
            <summary>
            PutRequest Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.PutRequest,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestUnmarshaller">
            <summary>
            Response Unmarshaller for PutRequest Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#PutRequest,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.PutRequestUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryRequestMarshaller">
            <summary>
            Query Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.QueryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Query operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.QueryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RecordUnmarshaller">
            <summary>
            Response Unmarshaller for Record Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RecordUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Record,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RecordUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RecordUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for ReplicaDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#ReplicaDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaMarshaller">
            <summary>
            Replica Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaMarshaller.Marshall(Amazon.DynamoDBv2.Model.Replica,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUnmarshaller">
            <summary>
            Response Unmarshaller for Replica Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Replica,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUpdateMarshaller">
            <summary>
            ReplicaUpdate Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUpdateMarshaller.Marshall(Amazon.DynamoDBv2.Model.ReplicaUpdate,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ReplicaUpdateMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for RestoreSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#RestoreSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupRequestMarshaller">
            <summary>
            RestoreTableFromBackup Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RestoreTableFromBackup operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.RestoreTableFromBackupResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanRequestMarshaller">
            <summary>
            Scan Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.ScanRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Scan operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ScanResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller">
            <summary>
            Response Unmarshaller for SequenceNumberRange Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#SequenceNumberRange,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ShardUnmarshaller">
            <summary>
            Response Unmarshaller for Shard Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ShardUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Shard,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ShardUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.ShardUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableDetailsUnmarshaller">
            <summary>
            Response Unmarshaller for SourceTableDetails Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableDetailsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#SourceTableDetails,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableDetailsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableDetailsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableFeatureDetailsUnmarshaller">
            <summary>
            Response Unmarshaller for SourceTableFeatureDetails Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableFeatureDetailsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#SourceTableFeatureDetails,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableFeatureDetailsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SourceTableFeatureDetailsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSEDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for SSEDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSEDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#SSEDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSEDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSEDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSESpecificationMarshaller">
            <summary>
            SSESpecification Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSESpecificationMarshaller.Marshall(Amazon.DynamoDBv2.Model.SSESpecification,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.SSESpecificationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for StreamDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#StreamDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamRecordUnmarshaller">
            <summary>
            Response Unmarshaller for StreamRecord Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamRecordUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#StreamRecord,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamRecordUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamRecordUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationMarshaller">
            <summary>
            StreamSpecification Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationMarshaller.Marshall(Amazon.DynamoDBv2.Model.StreamSpecification,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationUnmarshaller">
            <summary>
            Response Unmarshaller for StreamSpecification Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#StreamSpecification,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSpecificationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for StreamSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#StreamSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.StreamSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TableDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for TableDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TableDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#TableDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TableDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TableDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.DynamoDBv2.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller">
            <summary>
            TagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.TagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for TimeToLiveDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#TimeToLiveDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationMarshaller">
            <summary>
            TimeToLiveSpecification Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationMarshaller.Marshall(Amazon.DynamoDBv2.Model.TimeToLiveSpecification,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationUnmarshaller">
            <summary>
            Response Unmarshaller for TimeToLiveSpecification Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#TimeToLiveSpecification,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.TimeToLiveSpecificationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller">
            <summary>
            UntagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.UntagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UntagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalSecondaryIndexActionMarshaller">
            <summary>
            UpdateGlobalSecondaryIndexAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalSecondaryIndexActionMarshaller.Marshall(Amazon.DynamoDBv2.Model.UpdateGlobalSecondaryIndexAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalSecondaryIndexActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableRequestMarshaller">
            <summary>
            UpdateGlobalTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateGlobalTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateGlobalTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemRequestMarshaller">
            <summary>
            UpdateItem Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.UpdateItemRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateItem operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateItemResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableRequestMarshaller">
            <summary>
            UpdateTable Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.UpdateTableRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateTable operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTableResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveRequestMarshaller">
            <summary>
            UpdateTimeToLive Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateTimeToLive operation
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.UpdateTimeToLiveResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestMarshaller">
            <summary>
            WriteRequest Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestMarshaller.Marshall(Amazon.DynamoDBv2.Model.WriteRequest,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestUnmarshaller">
            <summary>
            Response Unmarshaller for WriteRequest Object
            </summary>  
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#DynamoDBv2#Model#WriteRequest,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Internal.MarshallTransformations.WriteRequestUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ItemCollectionMetrics">
            <summary>
            Information about item collections, if any, that were affected by the operation. <code>ItemCollectionMetrics</code>
            is only returned if the request asked for it. If the table does not have any local
            secondary indexes, this information is not returned in the response.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ItemCollectionMetrics.ItemCollectionKey">
            <summary>
            Gets and sets the property ItemCollectionKey. 
            <para>
            The partition key value of the item collection. This value is the same as the partition
            key value of the item.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ItemCollectionMetrics.SizeEstimateRangeGB">
            <summary>
            Gets and sets the property SizeEstimateRangeGB. 
            <para>
            An estimate of item collection size, in gigabytes. This value is a two-element array
            containing a lower bound and an upper bound for the estimate. The estimate includes
            the size of all the items in the table, plus the size of all attributes projected
            into all of the local secondary indexes on that table. Use this estimate to measure
            whether a local secondary index is approaching its size limit.
            </para>
             
            <para>
            The estimate is subject to change over time; therefore, do not rely on the precision
            or accuracy of the estimate.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new ItemCollectionSizeLimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ItemCollectionSizeLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of ItemCollectionSizeLimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ItemCollectionSizeLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ItemCollectionSizeLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ItemCollectionSizeLimitExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.KeysAndAttributes">
            <summary>
            Represents a set of primary keys and, for each key, the attributes to retrieve from
            the table.
            
             
            <para>
            For each primary key, you must provide <i>all</i> of the key attributes. For example,
            with a simple primary key, you only need to provide the partition key. For a composite
            primary key, you must provide <i>both</i> the partition key and the sort key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeysAndAttributes.AttributesToGet">
            <summary>
            Gets and sets the property AttributesToGet. 
            <para>
            This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy
            Conditional Parameters</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeysAndAttributes.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. 
            <para>
            The consistency of a read operation. If set to <code>true</code>, then a strongly
            consistent read is used; otherwise, an eventually consistent read is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeysAndAttributes.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeysAndAttributes.Keys">
            <summary>
            Gets and sets the property Keys. 
            <para>
            The primary key attribute values that define the items and the attributes associated
            with the items.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeysAndAttributes.ProjectionExpression">
            <summary>
            Gets and sets the property ProjectionExpression. 
            <para>
            A string that identifies one or more attributes to retrieve from the table. These
            attributes can include scalars, sets, or elements of a JSON document. The attributes
            in the <code>ProjectionExpression</code> must be separated by commas.
            </para>
             
            <para>
            If no attribute names are specified, then all attributes will be returned. If any
            of the requested attributes are not found, they will not appear in the result.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.KeySchemaElement">
            <summary>
            Represents <i>a single element</i> of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.
            
             
            <para>
            A <code>KeySchemaElement</code> represents exactly one attribute of the primary key.
            For example, a simple primary key would be represented by one <code>KeySchemaElement</code>
            (for the partition key). A composite primary key would require one <code>KeySchemaElement</code>
            for the partition key, and another <code>KeySchemaElement</code> for the sort key.
            </para>
             
            <para>
            A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested
            attribute). The data type must be one of String, Number, or Binary. The attribute
            cannot be nested within a List or a Map.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.KeySchemaElement.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.KeySchemaElement.#ctor(System.String,Amazon.DynamoDBv2.KeyType)">
            <summary>
            Instantiates KeySchemaElement with the parameterized properties
            </summary>
            <param name="attributeName">The name of a key attribute.</param>
            <param name="keyType">The role that this key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeySchemaElement.AttributeName">
            <summary>
            Gets and sets the property AttributeName. 
            <para>
            The name of a key attribute.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.KeySchemaElement.KeyType">
            <summary>
            Gets and sets the property KeyType. 
            <para>
            The role that this key attribute will assume:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LimitExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListBackupsRequest">
            <summary>
            Container for the parameters to the ListBackups operation.
            List backups associated with an AWS account. To list backups for a given table, specify
            <code>TableName</code>. <code>ListBackups</code> returns a paginated list of results
            with at most 1MB worth of items in a page. You can also specify a limit for the maximum
            number of entries to be returned in a page. 
            
             
            <para>
            In the request, start time is inclusive but end time is exclusive. Note that these
            limits are for the time at which the original backup was requested.
            </para>
             
            <para>
            You can call <code>ListBackups</code> a maximum of 5 times per second.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsRequest.ExclusiveStartBackupArn">
            <summary>
            Gets and sets the property ExclusiveStartBackupArn. 
            <para>
             <code>LastEvaluatedBackupARN</code> returned by the previous ListBackups call. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Maximum number of backups to return at once.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The backups from the table specified by TableName are listed. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsRequest.TimeRangeLowerBound">
            <summary>
            Gets and sets the property TimeRangeLowerBound. 
            <para>
            Only backups created after this time are listed. <code>TimeRangeLowerBound</code>
            is inclusive.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsRequest.TimeRangeUpperBound">
            <summary>
            Gets and sets the property TimeRangeUpperBound. 
            <para>
            Only backups created before this time are listed. <code>TimeRangeUpperBound</code>
            is exclusive. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListBackupsResponse">
            <summary>
            This is the response object from the ListBackups operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsResponse.BackupSummaries">
            <summary>
            Gets and sets the property BackupSummaries. 
            <para>
            List of <code>BackupSummary</code> objects.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListBackupsResponse.LastEvaluatedBackupArn">
            <summary>
            Gets and sets the property LastEvaluatedBackupArn. 
            <para>
            Last evaluated BackupARN.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListGlobalTablesRequest">
            <summary>
            Container for the parameters to the ListGlobalTables operation.
            Lists all global tables that have a replica in the specified region.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListGlobalTablesRequest.ExclusiveStartGlobalTableName">
            <summary>
            Gets and sets the property ExclusiveStartGlobalTableName. 
            <para>
            The first global table name that this operation will evaluate.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListGlobalTablesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of table names to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListGlobalTablesRequest.RegionName">
            <summary>
            Gets and sets the property RegionName. 
            <para>
            Lists the global tables in a specific region.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListGlobalTablesResponse">
            <summary>
            This is the response object from the ListGlobalTables operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListGlobalTablesResponse.GlobalTables">
            <summary>
            Gets and sets the property GlobalTables. 
            <para>
            List of global table names.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListGlobalTablesResponse.LastEvaluatedGlobalTableName">
            <summary>
            Gets and sets the property LastEvaluatedGlobalTableName. 
            <para>
            Last evaluated global table name.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListStreamsRequest">
            <summary>
            Container for the parameters to the ListStreams operation.
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListStreamsRequest.ExclusiveStartStreamArn">
            <summary>
            Gets and sets the property ExclusiveStartStreamArn. 
            <para>
            The ARN (Amazon Resource Name) of the first item that this operation will evaluate.
            Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous
            operation. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListStreamsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of streams to return. The upper limit is 100.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListStreamsRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            If this parameter is provided, then only the streams associated with this table name
            are returned.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListStreamsResponse">
            <summary>
            Represents the output of a <code>ListStreams</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListStreamsResponse.LastEvaluatedStreamArn">
            <summary>
            Gets and sets the property LastEvaluatedStreamArn. 
            <para>
            The stream ARN of the item where the operation stopped, inclusive of the previous
            result set. Use this value to start a new operation, excluding this value in the new
            request.
            </para>
             
            <para>
            If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has
            been processed and there is no more data to be retrieved.
            </para>
             
            <para>
            If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean
            that there is more data in the result set. The only way to know when you have reached
            the end of the result set is when <code>LastEvaluatedStreamArn</code> is empty.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListStreamsResponse.Streams">
            <summary>
            Gets and sets the property Streams. 
            <para>
            A list of stream descriptors associated with the current account and endpoint.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListTablesRequest">
            <summary>
            Container for the parameters to the ListTables operation.
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ListTablesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ListTablesRequest.#ctor(System.String)">
            <summary>
            Instantiates ListTablesRequest with the parameterized properties
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ListTablesRequest.#ctor(System.String,System.Int32)">
            <summary>
            Instantiates ListTablesRequest with the parameterized properties
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTablesRequest.ExclusiveStartTableName">
            <summary>
            Gets and sets the property ExclusiveStartTableName. 
            <para>
            The first table name that this operation will evaluate. Use the value that was returned
            for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain
            the next page of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTablesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            A maximum number of table names to return. If this parameter is not specified, the
            limit is 100.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListTablesResponse">
            <summary>
            Represents the output of a <code>ListTables</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTablesResponse.LastEvaluatedTableName">
            <summary>
            Gets and sets the property LastEvaluatedTableName. 
            <para>
            The name of the last table in the current page of results. Use this value as the <code>ExclusiveStartTableName</code>
            in a new request to obtain the next page of results, until all the table names are
            returned.
            </para>
             
            <para>
            If you do not receive a <code>LastEvaluatedTableName</code> value in the response,
            this means that there are no more table names to be retrieved.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTablesResponse.TableNames">
            <summary>
            Gets and sets the property TableNames. 
            <para>
            The names of the tables associated with the current account at the current endpoint.
            The maximum size of this array is 100.
            </para>
             
            <para>
            If <code>LastEvaluatedTableName</code> also appears in the output, you can use this
            value as the <code>ExclusiveStartTableName</code> parameter in a subsequent <code>ListTables</code>
            request and obtain the next page of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest">
            <summary>
            Container for the parameters to the ListTagsOfResource operation.
            List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to
            10 times per second, per account.
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            An optional string that, if supplied, must be copied from the output of a previous
            call to ListTagOfResource. When provided in this manner, this API fetches the next
            page of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource
            Name (ARN).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ListTagsOfResourceResponse">
            <summary>
            This is the response object from the ListTagsOfResource operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTagsOfResourceResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            If this value is returned, there are additional results to be displayed. To retrieve
            them, call ListTagsOfResource again, with NextToken set to this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ListTagsOfResourceResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags currently associated with the Amazon DynamoDB resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.LocalSecondaryIndex">
            <summary>
            Represents the properties of a local secondary index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndex.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the local secondary index. The name must be unique among all other indexes
            on this table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndex.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndex.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the local secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription">
            <summary>
            Represents the properties of a local secondary index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.IndexArn">
            <summary>
            Gets and sets the property IndexArn. 
            <para>
            The Amazon Resource Name (ARN) that uniquely identifies the index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            Represents the name of the local secondary index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.IndexSizeBytes">
            <summary>
            Gets and sets the property IndexSizeBytes. 
            <para>
            The total size of the specified index, in bytes. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.ItemCount">
            <summary>
            Gets and sets the property ItemCount. 
            <para>
            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexDescription.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the global secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.LocalSecondaryIndexInfo">
            <summary>
            Represents the properties of a local secondary index for the table when the backup
            was created.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexInfo.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            Represents the name of the local secondary index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexInfo.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The complete key schema for a local secondary index, which consists of one or more
            pairs of attribute names and key types:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.LocalSecondaryIndexInfo.Projection">
            <summary>
            Gets and sets the property Projection. 
            <para>
            Represents attributes that are copied (projected) from the table into the global secondary
            index. These are in addition to the primary key attributes and index key attributes,
            which are automatically projected. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Projection">
            <summary>
            Represents attributes that are copied (projected) from the table into an index. These
            are in addition to the primary key attributes and index key attributes, which are
            automatically projected.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Projection.NonKeyAttributes">
            <summary>
            Gets and sets the property NonKeyAttributes. 
            <para>
            Represents the non-key attribute names which will be projected into the index.
            </para>
             
            <para>
            For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed
            across all of the local secondary indexes, must not exceed 20. If you project the
            same attribute into two different indexes, this counts as two distinct attributes
            when determining the total.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Projection.ProjectionType">
            <summary>
            Gets and sets the property ProjectionType. 
            <para>
            The set of attributes that are projected into the index:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.
            </para>
             </li> <li> 
            <para>
             <code>INCLUDE</code> - Only the specified table attributes are projected into the
            index. The list of projected attributes are in <code>NonKeyAttributes</code>.
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> - All of the table attributes are projected into the index.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ProvisionedThroughput">
            <summary>
            Represents the provisioned throughput settings for a specified table or index. The
            settings can be modified using the <code>UpdateTable</code> operation.
            
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughput.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughput.#ctor(System.Int64,System.Int64)">
            <summary>
            Instantiates ProvisionedThroughput with the parameterized properties
            </summary>
            <param name="readCapacityUnits">The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="writeCapacityUnits">The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughput.ReadCapacityUnits">
            <summary>
            Gets and sets the property ReadCapacityUnits. 
            <para>
            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a <code>ThrottlingException</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying
            Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughput.WriteCapacityUnits">
            <summary>
            Gets and sets the property WriteCapacityUnits. 
            <para>
            The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying
            Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription">
            <summary>
            Represents the provisioned throughput settings for the table, consisting of read and
            write capacity units, along with data about increases and decreases.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription.LastDecreaseDateTime">
            <summary>
            Gets and sets the property LastDecreaseDateTime. 
            <para>
            The date and time of the last provisioned throughput decrease for this table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription.LastIncreaseDateTime">
            <summary>
            Gets and sets the property LastIncreaseDateTime. 
            <para>
            The date and time of the last provisioned throughput increase for this table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription.NumberOfDecreasesToday">
            <summary>
            Gets and sets the property NumberOfDecreasesToday. 
            <para>
            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription.ReadCapacityUnits">
            <summary>
            Gets and sets the property ReadCapacityUnits. 
            <para>
            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a <code>ThrottlingException</code>. Eventually consistent reads require less
            effort than strongly consistent reads, so a setting of 50 <code>ReadCapacityUnits</code>
            per second provides 100 eventually consistent <code>ReadCapacityUnits</code> per second.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ProvisionedThroughputDescription.WriteCapacityUnits">
            <summary>
            Gets and sets the property WriteCapacityUnits. 
            <para>
            The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.String)">
            <summary>
            Constructs a new ProvisionedThroughputExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ProvisionedThroughputExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.PutItemRequest">
            <summary>
            Container for the parameters to the PutItem operation.
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.PutItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.PutItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Instantiates PutItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.PutItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Instantiates PutItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ConditionalOperator">
            <summary>
            Gets and sets the property ConditionalOperator. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ConditionExpression">
            <summary>
            Gets and sets the property ConditionExpression. 
            <para>
            A condition that must be satisfied in order for a conditional <code>PutItem</code>
            operation to succeed.
            </para>
             
            <para>
            An expression can contain any of the following:
            </para>
             <ul> <li> 
            <para>
            Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains
            | begins_with | size</code> 
            </para>
             
            <para>
            These function names are case-sensitive.
            </para>
             </li> <li> 
            <para>
            Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN |
            IN </code> 
            </para>
             </li> <li> 
            <para>
             Logical operators: <code>AND | OR | NOT</code> 
            </para>
             </li> </ul> 
            <para>
            For more information on condition expressions, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.Expected">
            <summary>
            Gets and sets the property Expected. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. 
            <para>
            One or more values that can be substituted in an expression.
            </para>
             
            <para>
            Use the <b>:</b> (colon) character in an expression to dereference an attribute value.
            For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i>
            attribute was one of the following: 
            </para>
             
            <para>
             <code>Available | Backordered | Discontinued</code> 
            </para>
             
            <para>
            You would first need to specify <code>ExpressionAttributeValues</code> as follows:
            </para>
             
            <para>
             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"}
            }</code> 
            </para>
             
            <para>
            You could then use these values in an expression, such as this:
            </para>
             
            <para>
             <code>ProductStatus IN (:avail, :back, :disc)</code> 
            </para>
             
            <para>
            For more information on expression attribute values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.Item">
            <summary>
            Gets and sets the property Item. 
            <para>
            A map of attribute name/value pairs, one for each attribute. Only the primary key
            attributes are required; you can optionally provide other attribute name-value pairs
            for the item.
            </para>
             
            <para>
            You must provide all of the attributes for the primary key. For example, with a simple
            primary key, you only need to provide a value for the partition key. For a composite
            primary key, you must provide both values for both the partition key and the sort
            key.
            </para>
             
            <para>
            If you specify any attributes that are part of an index key, then the data types for
            those attributes must match those of the schema in the table's attribute definition.
            </para>
             
            <para>
            For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary
            Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ReturnItemCollectionMetrics">
            <summary>
            Gets and sets the property ReturnItemCollectionMetrics. 
            <para>
            Determines whether item collection metrics are returned. If set to <code>SIZE</code>,
            the response includes statistics about item collections, if any, that were modified
            during the operation are returned in the response. If set to <code>NONE</code> (the
            default), no statistics are returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.ReturnValues">
            <summary>
            Gets and sets the property ReturnValues. 
            <para>
            Use <code>ReturnValues</code> if you want to get the item attributes as they appeared
            before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>,
            the valid values are:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value
            is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)
            </para>
             </li> <li> 
            <para>
             <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value
            pair, then the content of the old item is returned.
            </para>
             </li> </ul> <note> 
            <para>
            The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
            <code>PutItem</code> does not recognize any values other than <code>NONE</code> or
            <code>ALL_OLD</code>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to contain the item.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.PutItemResponse">
            <summary>
            Represents the output of a <code>PutItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemResponse.Attributes">
            <summary>
            Gets and sets the property Attributes. 
            <para>
            The attribute values as they appeared before the <code>PutItem</code> operation, but
            only if <code>ReturnValues</code> is specified as <code>ALL_OLD</code> in the request.
            Each element consists of an attribute name and an attribute value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>PutItem</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutItemResponse.ItemCollectionMetrics">
            <summary>
            Gets and sets the property ItemCollectionMetrics. 
            <para>
            Information about item collections, if any, that were affected by the <code>PutItem</code>
            operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code>
            parameter was specified. If the table does not have any local secondary indexes, this
            information is not returned in the response.
            </para>
             
            <para>
            Each <code>ItemCollectionMetrics</code> element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>ItemCollectionKey</code> - The partition key value of the item collection.
            This is the same as the partition key value of the item itself.
            </para>
             </li> <li> 
            <para>
             <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes.
            This value is a two-element array containing a lower bound and an upper bound for
            the estimate. The estimate includes the size of all the items in the table, plus the
            size of all attributes projected into all of the local secondary indexes on that table.
            Use this estimate to measure whether a local secondary index is approaching its size
            limit.
            </para>
             
            <para>
            The estimate is subject to change over time; therefore, do not rely on the precision
            or accuracy of the estimate.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.PutRequest">
            <summary>
            Represents a request to perform a <code>PutItem</code> operation on an item.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.PutRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.PutRequest.#ctor(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Instantiates PutRequest with the parameterized properties
            </summary>
            <param name="item">A map of attribute name to attribute values, representing the primary key of an item to be processed by <code>PutItem</code>. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.PutRequest.Item">
            <summary>
            Gets and sets the property Item. 
            <para>
            A map of attribute name to attribute values, representing the primary key of an item
            to be processed by <code>PutItem</code>. All of the table's primary key attributes
            must be specified, and their data types must match those of the table's key schema.
            If any attributes are present in the item which are part of an index key schema for
            the table, their types must match the index key schema.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.QueryRequest">
            <summary>
            Container for the parameters to the Query operation.
            The <code>Query</code> operation finds items based on primary key values. You can
            query any table or secondary index that has a composite primary key (a partition key
            and a sort key). 
            
             
            <para>
            Use the <code>KeyConditionExpression</code> parameter to provide a specific value
            for the partition key. The <code>Query</code> operation will return all of the items
            from the table or index with that partition key value. You can optionally narrow the
            scope of the <code>Query</code> operation by specifying a sort key value and a comparison
            operator in <code>KeyConditionExpression</code>. To further refine the <code>Query</code>
            results, you can optionally provide a <code>FilterExpression</code>. A <code>FilterExpression</code>
            determines which items within the results should be returned to you. All of the other
            results are discarded. 
            </para>
             
            <para>
             A <code>Query</code> operation always returns a result set. If no matching items
            are found, the result set will be empty. Queries that do not return results consume
            the minimum number of read capacity units for that type of read operation. 
            </para>
             <note> 
            <para>
             DynamoDB calculates the number of read capacity units consumed based on item size,
            not on the amount of data that is returned to an application. The number of capacity
            units consumed will be the same whether you request all of the attributes (the default
            behavior) or just some of them (using a projection expression). The number will also
            be the same whether or not you use a <code>FilterExpression</code>. 
            </para>
             </note> 
            <para>
             <code>Query</code> results are always sorted by the sort key value. If the data type
            of the sort key is Number, the results are returned in numeric order; otherwise, the
            results are returned in order of UTF-8 bytes. By default, the sort order is ascending.
            To reverse the order, set the <code>ScanIndexForward</code> parameter to false. 
            </para>
             
            <para>
             A single <code>Query</code> operation will read up to the maximum number of items
            set (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>FilterExpression</code> is applied after a <code>Query</code> finishes, but
            before the results are returned. A <code>FilterExpression</code> cannot contain partition
            key or sort key attributes. You need to specify those attributes in the <code>KeyConditionExpression</code>.
            
            </para>
             <note> 
            <para>
             A <code>Query</code> operation can return an empty result set and a <code>LastEvaluatedKey</code>
            if all the items read for the page of results are filtered out. 
            </para>
             </note> 
            <para>
            You can query a table, a local secondary index, or a global secondary index. For a
            query on a table or on a local secondary index, you can set the <code>ConsistentRead</code>
            parameter to <code>true</code> and obtain a strongly consistent result. Global secondary
            indexes support eventually consistent reads only, so do not specify <code>ConsistentRead</code>
            when querying a global secondary index.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.QueryRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.QueryRequest.#ctor(System.String)">
            <summary>
            Instantiates QueryRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the requested items.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.AttributesToGet">
            <summary>
            Gets and sets the property AttributesToGet. 
            <para>
            This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ConditionalOperator">
            <summary>
            Gets and sets the property ConditionalOperator. 
            <para>
            This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. 
            <para>
            Determines the read consistency model: If set to <code>true</code>, then the operation
            uses strongly consistent reads; otherwise, the operation uses eventually consistent
            reads.
            </para>
             
            <para>
            Strongly consistent reads are not supported on global secondary indexes. If you query
            a global secondary index with <code>ConsistentRead</code> set to <code>true</code>,
            you will receive a <code>ValidationException</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ExclusiveStartKey">
            <summary>
            Gets and sets the property ExclusiveStartKey. 
            <para>
            The primary key of the first item that this operation will evaluate. Use the value
            that was returned for <code>LastEvaluatedKey</code> in the previous operation.
            </para>
             
            <para>
            The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary.
            No set data types are allowed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. 
            <para>
            One or more values that can be substituted in an expression.
            </para>
             
            <para>
            Use the <b>:</b> (colon) character in an expression to dereference an attribute value.
            For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i>
            attribute was one of the following: 
            </para>
             
            <para>
             <code>Available | Backordered | Discontinued</code> 
            </para>
             
            <para>
            You would first need to specify <code>ExpressionAttributeValues</code> as follows:
            </para>
             
            <para>
             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"}
            }</code> 
            </para>
             
            <para>
            You could then use these values in an expression, such as this:
            </para>
             
            <para>
             <code>ProductStatus IN (:avail, :back, :disc)</code> 
            </para>
             
            <para>
            For more information on expression attribute values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.FilterExpression">
            <summary>
            Gets and sets the property FilterExpression. 
            <para>
            A string that contains conditions that DynamoDB applies after the <code>Query</code>
            operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
            criteria are not returned.
            </para>
             
            <para>
            A <code>FilterExpression</code> does not allow key attributes. You cannot define a
            filter expression based on a partition key or a sort key.
            </para>
             <note> 
            <para>
            A <code>FilterExpression</code> is applied after the items have already been read;
            the process of filtering does not consume any additional read capacity units.
            </para>
             </note> 
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
            Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of an index to query. This index can be any local secondary index or global
            secondary index on the table. Note that if you use the <code>IndexName</code> parameter,
            you must also provide <code>TableName.</code> 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.KeyConditionExpression">
            <summary>
            Gets and sets the property KeyConditionExpression. 
            <para>
            The condition that specifies the key value(s) for items to be retrieved by the <code>Query</code>
            action.
            </para>
             
            <para>
            The condition must perform an equality test on a single partition key value.
            </para>
             
            <para>
            The condition can optionally perform one of several comparison tests on a single sort
            key value. This allows <code>Query</code> to retrieve one item with a given partition
            key value and sort key value, or several items that have the same partition key value
            but different sort key values.
            </para>
             
            <para>
            The partition key equality test is required, and must be specified in the following
            format:
            </para>
             
            <para>
             <code>partitionKeyName</code> <i>=</i> <code>:partitionkeyval</code> 
            </para>
             
            <para>
            If you also want to provide a condition for the sort key, it must be combined using
            <code>AND</code> with the condition for the sort key. Following is an example, using
            the <b>=</b> comparison operator for the sort key:
            </para>
             
            <para>
             <code>partitionKeyName</code> <code>=</code> <code>:partitionkeyval</code> <code>AND</code>
            <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> 
            </para>
             
            <para>
            Valid comparisons for the sort key condition are as follows:
            </para>
             <ul> <li> 
            <para>
             <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> - true if the sort
            key value is equal to <code>:sortkeyval</code>.
            </para>
             </li> <li> 
            <para>
             <code>sortKeyName</code> <code>&lt;</code> <code>:sortkeyval</code> - true if the
            sort key value is less than <code>:sortkeyval</code>.
            </para>
             </li> <li> 
            <para>
             <code>sortKeyName</code> <code>&lt;=</code> <code>:sortkeyval</code> - true if the
            sort key value is less than or equal to <code>:sortkeyval</code>.
            </para>
             </li> <li> 
            <para>
             <code>sortKeyName</code> <code>&gt;</code> <code>:sortkeyval</code> - true if the
            sort key value is greater than <code>:sortkeyval</code>.
            </para>
             </li> <li> 
            <para>
             <code>sortKeyName</code> <code>&gt;= </code> <code>:sortkeyval</code> - true if the
            sort key value is greater than or equal to <code>:sortkeyval</code>.
            </para>
             </li> <li> 
            <para>
             <code>sortKeyName</code> <code>BETWEEN</code> <code>:sortkeyval1</code> <code>AND</code>
            <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to
            <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.
            </para>
             </li> <li> 
            <para>
             <code>begins_with (</code> <code>sortKeyName</code>, <code>:sortkeyval</code> <code>)</code>
            - true if the sort key value begins with a particular operand. (You cannot use this
            function with a sort key that is of type Number.) Note that the function name <code>begins_with</code>
            is case-sensitive.
            </para>
             </li> </ul> 
            <para>
            Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as
            <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.
            </para>
             
            <para>
            You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace
            the names of the partition key and sort key with placeholder tokens. This option might
            be necessary if an attribute name conflicts with a DynamoDB reserved word. For example,
            the following <code>KeyConditionExpression</code> parameter causes an error because
            <i>Size</i> is a reserved word:
            </para>
             <ul> <li> 
            <para>
             <code>Size = :myval</code> 
            </para>
             </li> </ul> 
            <para>
            To work around this, define a placeholder (such a <code>#S</code>) to represent the
            attribute name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:
            </para>
             <ul> <li> 
            <para>
             <code>#S = :myval</code> 
            </para>
             </li> </ul> 
            <para>
            For a list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using
            Placeholders for Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.KeyConditions">
            <summary>
            Gets and sets the property KeyConditions. 
            <para>
            This is a legacy parameter. Use <code>KeyConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of items to evaluate (not necessarily the number of matching items).
            If DynamoDB processes the number of items up to the limit while processing the results,
            it stops the operation and returns the matching values up to that point, and a key
            in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
            pick up where you left off. Also, if the processed data set size exceeds 1 MB before
            DynamoDB reaches this limit, it stops the operation and returns the matching values
            up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
            operation to continue the operation. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query
            and Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ProjectionExpression">
            <summary>
            Gets and sets the property ProjectionExpression. 
            <para>
            A string that identifies one or more attributes to retrieve from the table. These
            attributes can include scalars, sets, or elements of a JSON document. The attributes
            in the expression must be separated by commas.
            </para>
             
            <para>
            If no attribute names are specified, then all attributes will be returned. If any
            of the requested attributes are not found, they will not appear in the result.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.QueryFilter">
            <summary>
            Gets and sets the property QueryFilter. 
            <para>
            This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.ScanIndexForward">
            <summary>
            Gets and sets the property ScanIndexForward. 
            <para>
            Specifies the order for index traversal: If <code>true</code> (default), the traversal
            is performed in ascending order; if <code>false</code>, the traversal is performed
            in descending order. 
            </para>
             
            <para>
            Items with the same partition key value are stored in sorted order by sort key. If
            the sort key data type is Number, the results are stored in numeric order. For type
            String, the results are stored in order of ASCII character code values. For type Binary,
            DynamoDB treats each byte of the binary data as unsigned.
            </para>
             
            <para>
            If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results
            in the order in which they are stored (by sort key value). This is the default behavior.
            If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results
            in reverse order by sort key value, and then returns the results to the client.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.Select">
            <summary>
            Gets and sets the property Select. 
            <para>
            The attributes to be returned in the result. You can retrieve all item attributes,
            specific item attributes, the count of matching items, or in the case of an index,
            some or all of the attributes projected into the index.
            </para>
             <ul> <li> 
            <para>
             <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified
            table or index. If you query a local secondary index, then for each matching item
            in the index DynamoDB will fetch the entire item from the parent table. If the index
            is configured to project all item attributes, then all of the data can be obtained
            from the local secondary index, and no fetching is required.
            </para>
             </li> <li> 
            <para>
             <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves
            all attributes that have been projected into the index. If the index is configured
            to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.
            </para>
             </li> <li> 
            <para>
             <code>COUNT</code> - Returns the number of matching items, rather than the matching
            items themselves.
            </para>
             </li> <li> 
            <para>
             <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>AttributesToGet</code>.
            This return value is equivalent to specifying <code>AttributesToGet</code> without
            specifying any value for <code>Select</code>.
            </para>
             
            <para>
            If you query or scan a local secondary index and request only attributes that are
            projected into that index, the operation will read only the index and not the table.
            If any of the requested attributes are not projected into the local secondary index,
            DynamoDB will fetch each of these attributes from the parent table. This extra fetching
            incurs additional throughput cost and latency.
            </para>
             
            <para>
            If you query or scan a global secondary index, you can only request attributes that
            are projected into the index. Global secondary index queries cannot fetch attributes
            from the parent table.
            </para>
             </li> </ul> 
            <para>
            If neither <code>Select</code> nor <code>AttributesToGet</code> are specified, DynamoDB
            defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code>
            when accessing an index. You cannot use both <code>Select</code> and <code>AttributesToGet</code>
            together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>.
            (This usage is equivalent to specifying <code>AttributesToGet</code> without any value
            for <code>Select</code>.)
            </para>
             <note> 
            <para>
            If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code>
            can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code>
            will return an error.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table containing the requested items.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.QueryResponse">
            <summary>
            Represents the output of a <code>Query</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>Query</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified For
            more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryResponse.Count">
            <summary>
            Gets and sets the property Count. 
            <para>
            The number of items in the response.
            </para>
             
            <para>
            If you used a <code>QueryFilter</code> in the request, then <code>Count</code> is
            the number of items returned after the filter was applied, and <code>ScannedCount</code>
            is the number of matching items before the filter was applied.
            </para>
             
            <para>
            If you did not use a filter in the request, then <code>Count</code> and <code>ScannedCount</code>
            are the same.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryResponse.Items">
            <summary>
            Gets and sets the property Items. 
            <para>
            An array of item attributes that match the query criteria. Each element in this array
            consists of an attribute name and the value for that attribute.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryResponse.LastEvaluatedKey">
            <summary>
            Gets and sets the property LastEvaluatedKey. 
            <para>
            The primary key of the item where the operation stopped, inclusive of the previous
            result set. Use this value to start a new operation, excluding this value in the new
            request.
            </para>
             
            <para>
            If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been
            processed and there is no more data to be retrieved.
            </para>
             
            <para>
            If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there
            is more data in the result set. The only way to know when you have reached the end
            of the result set is when <code>LastEvaluatedKey</code> is empty.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.QueryResponse.ScannedCount">
            <summary>
            Gets and sets the property ScannedCount. 
            <para>
            The number of items evaluated, before any <code>QueryFilter</code> is applied. A high
            <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates
            an inefficient <code>Query</code> operation. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count
            and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            If you did not use a filter in the request, then <code>ScannedCount</code> is the
            same as <code>Count</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Record">
            <summary>
            A description of a unique event within a stream.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.AwsRegion">
            <summary>
            Gets and sets the property AwsRegion. 
            <para>
            The region in which the <code>GetRecords</code> request was received.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.Dynamodb">
            <summary>
            Gets and sets the property Dynamodb. 
            <para>
            The main body of the stream record, containing all of the DynamoDB-specific fields.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.EventID">
            <summary>
            Gets and sets the property EventID. 
            <para>
            A globally unique identifier for the event that was recorded in this stream record.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.EventName">
            <summary>
            Gets and sets the property EventName. 
            <para>
            The type of data modification that was performed on the DynamoDB table:
            </para>
             <ul> <li> 
            <para>
             <code>INSERT</code> - a new item was added to the table.
            </para>
             </li> <li> 
            <para>
             <code>MODIFY</code> - one or more of an existing item's attributes were modified.
            </para>
             </li> <li> 
            <para>
             <code>REMOVE</code> - the item was deleted from the table
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.EventSource">
            <summary>
            Gets and sets the property EventSource. 
            <para>
            The AWS service from which the stream record originated. For DynamoDB Streams, this
            is <code>aws:dynamodb</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.EventVersion">
            <summary>
            Gets and sets the property EventVersion. 
            <para>
            The version number of the stream record format. This number is updated whenever the
            structure of <code>Record</code> is modified.
            </para>
             
            <para>
            Client applications must not assume that <code>eventVersion</code> will remain at
            a particular value, as this number is subject to change at any time. In general, <code>eventVersion</code>
            will only increase as the low-level DynamoDB Streams API evolves.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Record.UserIdentity">
            <summary>
            Gets and sets the property UserIdentity. 
            <para>
            Items that are deleted by the Time to Live process after expiration have the following
            fields: 
            </para>
             <ul> <li> 
            <para>
            Records[].userIdentity.type
            </para>
             
            <para>
            "Service"
            </para>
             </li> <li> 
            <para>
            Records[].userIdentity.principalId
            </para>
             
            <para>
            "dynamodb.amazonaws.com"
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Replica">
            <summary>
            Represents the properties of a replica.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Replica.RegionName">
            <summary>
            Gets and sets the property RegionName. 
            <para>
            The region where the replica needs to be created.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ReplicaAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ReplicaAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ReplicaAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReplicaAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReplicaAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ReplicaAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ReplicaDescription">
            <summary>
            Contains the details of the replica.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ReplicaDescription.RegionName">
            <summary>
            Gets and sets the property RegionName. 
            <para>
            The name of the region.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ReplicaNotFoundException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ReplicaNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ReplicaNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ReplicaNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReplicaNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReplicaNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ReplicaNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ReplicaNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ReplicaUpdate">
            <summary>
            Represents one of the following:
            
             <ul> <li> 
            <para>
            A new replica to be added to an existing global table.
            </para>
             </li> <li> 
            <para>
            New parameters for an existing replica.
            </para>
             </li> <li> 
            <para>
            An existing replica to be removed from an existing global table.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ReplicaUpdate.Create">
            <summary>
            Gets and sets the property Create. 
            <para>
            The parameters required for creating a replica on an existing global table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ReplicaUpdate.Delete">
            <summary>
            Gets and sets the property Delete. 
            <para>
            The name of the existing replica to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ResourceInUseException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ResourceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ResourceNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.RestoreSummary">
            <summary>
            Contains details for the restore.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreSummary.RestoreDateTime">
            <summary>
            Gets and sets the property RestoreDateTime. 
            <para>
            Point in time or source backup time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreSummary.RestoreInProgress">
            <summary>
            Gets and sets the property RestoreInProgress. 
            <para>
            Indicates if a restore is in progress or not.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreSummary.SourceBackupArn">
            <summary>
            Gets and sets the property SourceBackupArn. 
            <para>
            ARN of the backup from which the table was restored.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreSummary.SourceTableArn">
            <summary>
            Gets and sets the property SourceTableArn. 
            <para>
            ARN of the source table of the backup that is being restored.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest">
            <summary>
            Container for the parameters to the RestoreTableFromBackup operation.
            Creates a new table from an existing backup. Any number of users can execute up to
            10 concurrent restores in a given account. 
            
             
            <para>
            You can call <code>RestoreTableFromBackup</code> at a maximum rate of 10 times per
            second.
            </para>
             
            <para>
            You must manually set up the following on the restored table:
            </para>
             <ul> <li> 
            <para>
            Auto scaling policies
            </para>
             </li> <li> 
            <para>
            IAM policies
            </para>
             </li> <li> 
            <para>
            Cloudwatch metrics and alarms
            </para>
             </li> <li> 
            <para>
            Tags
            </para>
             </li> <li> 
            <para>
            Stream settings
            </para>
             </li> <li> 
            <para>
            Time to Live (TTL) settings
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest.BackupArn">
            <summary>
            Gets and sets the property BackupArn. 
            <para>
            The ARN associated with the backup.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest.TargetTableName">
            <summary>
            Gets and sets the property TargetTableName. 
            <para>
            The name of the new table to which the backup must be restored.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.RestoreTableFromBackupResponse">
            <summary>
            This is the response object from the RestoreTableFromBackup operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.RestoreTableFromBackupResponse.TableDescription">
            <summary>
            Gets and sets the property TableDescription. 
            <para>
            The description of the table created from an existing backup.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ScanRequest">
            <summary>
            Container for the parameters to the Scan operation.
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ScanRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.ScanRequest.#ctor(System.String)">
            <summary>
            Instantiates ScanRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.AttributesToGet">
            <summary>
            Gets and sets the property AttributesToGet. 
            <para>
            This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ConditionalOperator">
            <summary>
            Gets and sets the property ConditionalOperator. 
            <para>
            This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. 
            <para>
            A Boolean value that determines the read consistency model during the scan:
            </para>
             <ul> <li> 
            <para>
            If <code>ConsistentRead</code> is <code>false</code>, then the data returned from
            <code>Scan</code> might not contain the results from other recently completed write
            operations (PutItem, UpdateItem or DeleteItem).
            </para>
             </li> <li> 
            <para>
            If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations
            that completed before the <code>Scan</code> began are guaranteed to be contained in
            the <code>Scan</code> response.
            </para>
             </li> </ul> 
            <para>
            The default setting for <code>ConsistentRead</code> is <code>false</code>.
            </para>
             
            <para>
            The <code>ConsistentRead</code> parameter is not supported on global secondary indexes.
            If you scan a global secondary index with <code>ConsistentRead</code> set to true,
            you will receive a <code>ValidationException</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ExclusiveStartKey">
            <summary>
            Gets and sets the property ExclusiveStartKey. 
            <para>
            The primary key of the first item that this operation will evaluate. Use the value
            that was returned for <code>LastEvaluatedKey</code> in the previous operation.
            </para>
             
            <para>
            The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary.
            No set data types are allowed.
            </para>
             
            <para>
            In a parallel scan, a <code>Scan</code> request that includes <code>ExclusiveStartKey</code>
            must specify the same segment whose previous <code>Scan</code> returned the corresponding
            value of <code>LastEvaluatedKey</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. 
            <para>
            One or more values that can be substituted in an expression.
            </para>
             
            <para>
            Use the <b>:</b> (colon) character in an expression to dereference an attribute value.
            For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i>
            attribute was one of the following: 
            </para>
             
            <para>
             <code>Available | Backordered | Discontinued</code> 
            </para>
             
            <para>
            You would first need to specify <code>ExpressionAttributeValues</code> as follows:
            </para>
             
            <para>
             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"}
            }</code> 
            </para>
             
            <para>
            You could then use these values in an expression, such as this:
            </para>
             
            <para>
             <code>ProductStatus IN (:avail, :back, :disc)</code> 
            </para>
             
            <para>
            For more information on expression attribute values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.FilterExpression">
            <summary>
            Gets and sets the property FilterExpression. 
            <para>
            A string that contains conditions that DynamoDB applies after the <code>Scan</code>
            operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
            criteria are not returned.
            </para>
             <note> 
            <para>
            A <code>FilterExpression</code> is applied after the items have already been read;
            the process of filtering does not consume any additional read capacity units.
            </para>
             </note> 
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
            Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of a secondary index to scan. This index can be any local secondary index
            or global secondary index. Note that if you use the <code>IndexName</code> parameter,
            you must also provide <code>TableName</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of items to evaluate (not necessarily the number of matching items).
            If DynamoDB processes the number of items up to the limit while processing the results,
            it stops the operation and returns the matching values up to that point, and a key
            in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
            pick up where you left off. Also, if the processed data set size exceeds 1 MB before
            DynamoDB reaches this limit, it stops the operation and returns the matching values
            up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
            operation to continue the operation. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query
            and Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ProjectionExpression">
            <summary>
            Gets and sets the property ProjectionExpression. 
            <para>
            A string that identifies one or more attributes to retrieve from the specified table
            or index. These attributes can include scalars, sets, or elements of a JSON document.
            The attributes in the expression must be separated by commas.
            </para>
             
            <para>
            If no attribute names are specified, then all attributes will be returned. If any
            of the requested attributes are not found, they will not appear in the result.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.ScanFilter">
            <summary>
            Gets and sets the property ScanFilter. 
            <para>
            This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.Segment">
            <summary>
            Gets and sets the property Segment. 
            <para>
            For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual
            segment to be scanned by an application worker.
            </para>
             
            <para>
            Segment IDs are zero-based, so the first segment is always 0. For example, if you
            want to use four application threads to scan a table or an index, then the first thread
            specifies a <code>Segment</code> value of 0, the second thread specifies 1, and so
            on.
            </para>
             
            <para>
            The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code>
            request must be used as <code>ExclusiveStartKey</code> with the same segment ID in
            a subsequent <code>Scan</code> operation.
            </para>
             
            <para>
            The value for <code>Segment</code> must be greater than or equal to 0, and less than
            the value provided for <code>TotalSegments</code>.
            </para>
             
            <para>
            If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.Select">
            <summary>
            Gets and sets the property Select. 
            <para>
            The attributes to be returned in the result. You can retrieve all item attributes,
            specific item attributes, the count of matching items, or in the case of an index,
            some or all of the attributes projected into the index.
            </para>
             <ul> <li> 
            <para>
             <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified
            table or index. If you query a local secondary index, then for each matching item
            in the index DynamoDB will fetch the entire item from the parent table. If the index
            is configured to project all item attributes, then all of the data can be obtained
            from the local secondary index, and no fetching is required.
            </para>
             </li> <li> 
            <para>
             <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves
            all attributes that have been projected into the index. If the index is configured
            to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.
            </para>
             </li> <li> 
            <para>
             <code>COUNT</code> - Returns the number of matching items, rather than the matching
            items themselves.
            </para>
             </li> <li> 
            <para>
             <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>AttributesToGet</code>.
            This return value is equivalent to specifying <code>AttributesToGet</code> without
            specifying any value for <code>Select</code>.
            </para>
             
            <para>
            If you query or scan a local secondary index and request only attributes that are
            projected into that index, the operation will read only the index and not the table.
            If any of the requested attributes are not projected into the local secondary index,
            DynamoDB will fetch each of these attributes from the parent table. This extra fetching
            incurs additional throughput cost and latency.
            </para>
             
            <para>
            If you query or scan a global secondary index, you can only request attributes that
            are projected into the index. Global secondary index queries cannot fetch attributes
            from the parent table.
            </para>
             </li> </ul> 
            <para>
            If neither <code>Select</code> nor <code>AttributesToGet</code> are specified, DynamoDB
            defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code>
            when accessing an index. You cannot use both <code>Select</code> and <code>AttributesToGet</code>
            together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>.
            (This usage is equivalent to specifying <code>AttributesToGet</code> without any value
            for <code>Select</code>.)
            </para>
             <note> 
            <para>
            If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code>
            can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code>
            will return an error.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table containing the requested items; or, if you provide <code>IndexName</code>,
            the name of the table to which that index belongs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanRequest.TotalSegments">
            <summary>
            Gets and sets the property TotalSegments. 
            <para>
            For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the
            total number of segments into which the <code>Scan</code> operation will be divided.
            The value of <code>TotalSegments</code> corresponds to the number of application workers
            that will perform the parallel scan. For example, if you want to use four application
            threads to scan a table or an index, specify a <code>TotalSegments</code> value of
            4.
            </para>
             
            <para>
            The value for <code>TotalSegments</code> must be greater than or equal to 1, and less
            than or equal to 1000000. If you specify a <code>TotalSegments</code> value of 1,
            the <code>Scan</code> operation will be sequential rather than parallel.
            </para>
             
            <para>
            If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.ScanResponse">
            <summary>
            Represents the output of a <code>Scan</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>Scan</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanResponse.Count">
            <summary>
            Gets and sets the property Count. 
            <para>
            The number of items in the response.
            </para>
             
            <para>
            If you set <code>ScanFilter</code> in the request, then <code>Count</code> is the
            number of items returned after the filter was applied, and <code>ScannedCount</code>
            is the number of matching items before the filter was applied.
            </para>
             
            <para>
            If you did not use a filter in the request, then <code>Count</code> is the same as
            <code>ScannedCount</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanResponse.Items">
            <summary>
            Gets and sets the property Items. 
            <para>
            An array of item attributes that match the scan criteria. Each element in this array
            consists of an attribute name and the value for that attribute.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanResponse.LastEvaluatedKey">
            <summary>
            Gets and sets the property LastEvaluatedKey. 
            <para>
            The primary key of the item where the operation stopped, inclusive of the previous
            result set. Use this value to start a new operation, excluding this value in the new
            request.
            </para>
             
            <para>
            If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been
            processed and there is no more data to be retrieved.
            </para>
             
            <para>
            If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there
            is more data in the result set. The only way to know when you have reached the end
            of the result set is when <code>LastEvaluatedKey</code> is empty.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.ScanResponse.ScannedCount">
            <summary>
            Gets and sets the property ScannedCount. 
            <para>
            The number of items evaluated, before any <code>ScanFilter</code> is applied. A high
            <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates
            an inefficient <code>Scan</code> operation. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count
            and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            If you did not use a filter in the request, then <code>ScannedCount</code> is the
            same as <code>Count</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.SequenceNumberRange">
            <summary>
            The beginning and ending sequence numbers for the stream records contained within
            a shard.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SequenceNumberRange.EndingSequenceNumber">
            <summary>
            Gets and sets the property EndingSequenceNumber. 
            <para>
            The last sequence number.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SequenceNumberRange.StartingSequenceNumber">
            <summary>
            Gets and sets the property StartingSequenceNumber. 
            <para>
            The first sequence number.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Shard">
            <summary>
            A uniquely identified group of stream records within a stream.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Shard.ParentShardId">
            <summary>
            Gets and sets the property ParentShardId. 
            <para>
            The shard ID of the current shard's parent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Shard.SequenceNumberRange">
            <summary>
            Gets and sets the property SequenceNumberRange. 
            <para>
            The range of possible sequence numbers for the shard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Shard.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The system-generated identifier for this shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.SourceTableDetails">
            <summary>
            Contains the details of the table when the backup was created.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.ItemCount">
            <summary>
            Gets and sets the property ItemCount. 
            <para>
            Number of items in the table. Please note this is an approximate value. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            Schema of the table. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Read IOPs and Write IOPS on the table when the backup was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.TableArn">
            <summary>
            Gets and sets the property TableArn. 
            <para>
            ARN of the table for which backup was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.TableCreationDateTime">
            <summary>
            Gets and sets the property TableCreationDateTime. 
            <para>
            Time when the source table was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.TableId">
            <summary>
            Gets and sets the property TableId. 
            <para>
            Unique identifier for the table for which the backup was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table for which the backup was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableDetails.TableSizeBytes">
            <summary>
            Gets and sets the property TableSizeBytes. 
            <para>
            Size of the table in bytes. Please note this is an approximate value.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails">
            <summary>
            Contains the details of the features enabled on the table when the backup was created.
            For example, LSIs, GSIs, streams, TTL.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails.GlobalSecondaryIndexes">
            <summary>
            Gets and sets the property GlobalSecondaryIndexes. 
            <para>
            Represents the GSI properties for the table when the backup was created. It includes
            the IndexName, KeySchema, Projection and ProvisionedThroughput for the GSIs on the
            table at the time of backup. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails.LocalSecondaryIndexes">
            <summary>
            Gets and sets the property LocalSecondaryIndexes. 
            <para>
            Represents the LSI properties for the table when the backup was created. It includes
            the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails.SSEDescription">
            <summary>
            Gets and sets the property SSEDescription. 
            <para>
            The description of the server-side encryption status on the table when the backup
            was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails.StreamDescription">
            <summary>
            Gets and sets the property StreamDescription. 
            <para>
            Stream settings on the table when the backup was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SourceTableFeatureDetails.TimeToLiveDescription">
            <summary>
            Gets and sets the property TimeToLiveDescription. 
            <para>
            Time to Live settings on the table when the backup was created.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.SSEDescription">
            <summary>
            The description of the server-side encryption status on the specified table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SSEDescription.Status">
            <summary>
            Gets and sets the property Status. 
            <para>
            The current state of server-side encryption:
            </para>
             <ul> <li> 
            <para>
             <code>ENABLING</code> - Server-side encryption is being enabled.
            </para>
             </li> <li> 
            <para>
             <code>ENABLED</code> - Server-side encryption is enabled.
            </para>
             </li> <li> 
            <para>
             <code>DISABLING</code> - Server-side encryption is being disabled.
            </para>
             </li> <li> 
            <para>
             <code>DISABLED</code> - Server-side encryption is disabled.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.SSESpecification">
            <summary>
            Represents the settings used to enable server-side encryption.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.SSESpecification.Enabled">
            <summary>
            Gets and sets the property Enabled. 
            <para>
            Indicates whether server-side encryption is enabled (true) or disabled (false) on
            the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.StreamDescription">
            <summary>
            Represents all of the data describing a particular stream.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.CreationRequestDateTime">
            <summary>
            Gets and sets the property CreationRequestDateTime. 
            <para>
            The date and time when the request to create this stream was issued.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The key attribute(s) of the stream's DynamoDB table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.LastEvaluatedShardId">
            <summary>
            Gets and sets the property LastEvaluatedShardId. 
            <para>
            The shard ID of the item where the operation stopped, inclusive of the previous result
            set. Use this value to start a new operation, excluding this value in the new request.
            </para>
             
            <para>
            If <code>LastEvaluatedShardId</code> is empty, then the "last page" of results has
            been processed and there is currently no more data to be retrieved.
            </para>
             
            <para>
            If <code>LastEvaluatedShardId</code> is not empty, it does not necessarily mean that
            there is more data in the result set. The only way to know when you have reached the
            end of the result set is when <code>LastEvaluatedShardId</code> is empty.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.Shards">
            <summary>
            Gets and sets the property Shards. 
            <para>
            The shards that comprise the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.StreamArn">
            <summary>
            Gets and sets the property StreamArn. 
            <para>
            The Amazon Resource Name (ARN) for the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.StreamLabel">
            <summary>
            Gets and sets the property StreamLabel. 
            <para>
            A timestamp, in ISO 8601 format, for this stream.
            </para>
             
            <para>
            Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream,
            because it is possible that a stream from another table might have the same timestamp.
            However, the combination of the following three elements is guaranteed to be unique:
            </para>
             <ul> <li> 
            <para>
            the AWS customer ID.
            </para>
             </li> <li> 
            <para>
            the table name
            </para>
             </li> <li> 
            <para>
            the <code>StreamLabel</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.StreamStatus">
            <summary>
            Gets and sets the property StreamStatus. 
            <para>
            Indicates the current status of the stream:
            </para>
             <ul> <li> 
            <para>
             <code>ENABLING</code> - Streams is currently being enabled on the DynamoDB table.
            </para>
             </li> <li> 
            <para>
             <code>ENABLED</code> - the stream is enabled.
            </para>
             </li> <li> 
            <para>
             <code>DISABLING</code> - Streams is currently being disabled on the DynamoDB table.
            </para>
             </li> <li> 
            <para>
             <code>DISABLED</code> - the stream is disabled.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.StreamViewType">
            <summary>
            Gets and sets the property StreamViewType. 
            <para>
            Indicates the format of the records within this stream:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - only the key attributes of items that were modified in the
            DynamoDB table.
            </para>
             </li> <li> 
            <para>
             <code>NEW_IMAGE</code> - entire items from the table, as they appeared after they
            were modified.
            </para>
             </li> <li> 
            <para>
             <code>OLD_IMAGE</code> - entire items from the table, as they appeared before they
            were modified.
            </para>
             </li> <li> 
            <para>
             <code>NEW_AND_OLD_IMAGES</code> - both the new and the old images of the items from
            the table.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamDescription.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The DynamoDB table with which the stream is associated.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.StreamRecord">
            <summary>
            A description of a single data modification that was performed on an item in a DynamoDB
            table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.ApproximateCreationDateTime">
            <summary>
            Gets and sets the property ApproximateCreationDateTime. 
            <para>
            The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX
            epoch time</a> format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.Keys">
            <summary>
            Gets and sets the property Keys. 
            <para>
            The primary key attribute(s) for the DynamoDB item that was modified.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.NewImage">
            <summary>
            Gets and sets the property NewImage. 
            <para>
            The item in the DynamoDB table as it appeared after it was modified.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.OldImage">
            <summary>
            Gets and sets the property OldImage. 
            <para>
            The item in the DynamoDB table as it appeared before it was modified.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.SequenceNumber">
            <summary>
            Gets and sets the property SequenceNumber. 
            <para>
            The sequence number of the stream record.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.SizeBytes">
            <summary>
            Gets and sets the property SizeBytes. 
            <para>
            The size of the stream record, in bytes.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamRecord.StreamViewType">
            <summary>
            Gets and sets the property StreamViewType. 
            <para>
            The type of data from the modified DynamoDB item that was captured in this stream
            record:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - only the key attributes of the modified item.
            </para>
             </li> <li> 
            <para>
             <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.
            </para>
             </li> <li> 
            <para>
             <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.
            </para>
             </li> <li> 
            <para>
             <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.StreamSpecification">
            <summary>
            Represents the DynamoDB Streams configuration for a table in DynamoDB.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamSpecification.StreamEnabled">
            <summary>
            Gets and sets the property StreamEnabled. 
            <para>
            Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamSpecification.StreamViewType">
            <summary>
            Gets and sets the property StreamViewType. 
            <para>
             When an item in the table is modified, <code>StreamViewType</code> determines what
            information is written to the stream for this table. Valid values for <code>StreamViewType</code>
            are:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written
            to the stream.
            </para>
             </li> <li> 
            <para>
             <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is
            written to the stream.
            </para>
             </li> <li> 
            <para>
             <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified,
            is written to the stream.
            </para>
             </li> <li> 
            <para>
             <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item
            are written to the stream.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.StreamSummary">
            <summary>
            Represents all of the data describing a particular stream.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamSummary.StreamArn">
            <summary>
            Gets and sets the property StreamArn. 
            <para>
            The Amazon Resource Name (ARN) for the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamSummary.StreamLabel">
            <summary>
            Gets and sets the property StreamLabel. 
            <para>
            A timestamp, in ISO 8601 format, for this stream.
            </para>
             
            <para>
            Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream,
            because it is possible that a stream from another table might have the same timestamp.
            However, the combination of the following three elements is guaranteed to be unique:
            </para>
             <ul> <li> 
            <para>
            the AWS customer ID.
            </para>
             </li> <li> 
            <para>
            the table name
            </para>
             </li> <li> 
            <para>
            the <code>StreamLabel</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.StreamSummary.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The DynamoDB table with which the stream is associated.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TableAlreadyExistsException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new TableAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of TableAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TableAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TableDescription">
            <summary>
            Represents the properties of a table.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableDescription.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.AttributeDefinitions">
            <summary>
            Gets and sets the property AttributeDefinitions. 
            <para>
            An array of <code>AttributeDefinition</code> objects. Each of these objects describes
            one attribute in the table and index key schema.
            </para>
             
            <para>
            Each <code>AttributeDefinition</code> object in this array is composed of:
            </para>
             <ul> <li> 
            <para>
             <code>AttributeName</code> - The name of the attribute.
            </para>
             </li> <li> 
            <para>
             <code>AttributeType</code> - The data type for the attribute.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.CreationDateTime">
            <summary>
            Gets and sets the property CreationDateTime. 
            <para>
            The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX
            epoch time</a> format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.GlobalSecondaryIndexes">
            <summary>
            Gets and sets the property GlobalSecondaryIndexes. 
            <para>
            The global secondary indexes, if any, on the table. Each index is scoped to a given
            partition key value. Each element is composed of:
            </para>
             <ul> <li> 
            <para>
             <code>Backfilling</code> - If true, then the index is currently in the backfilling
            phase. Backfilling occurs only when a new global secondary index is added to the table;
            it is the process by which DynamoDB populates the new index with data from the table.
            (This attribute does not appear for indexes that were created during a <code>CreateTable</code>
            operation.)
            </para>
             </li> <li> 
            <para>
             <code>IndexName</code> - The name of the global secondary index.
            </para>
             </li> <li> 
            <para>
             <code>IndexSizeBytes</code> - The total size of the global secondary index, in bytes.
            DynamoDB updates this value approximately every six hours. Recent changes might not
            be reflected in this value. 
            </para>
             </li> <li> 
            <para>
             <code>IndexStatus</code> - The current status of the global secondary index:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The index is being created.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - The index is being updated.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The index is being deleted.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The index is ready for use.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>ItemCount</code> - The number of items in the global secondary index. DynamoDB
            updates this value approximately every six hours. Recent changes might not be reflected
            in this value. 
            </para>
             </li> <li> 
            <para>
             <code>KeySchema</code> - Specifies the complete index key schema. The attribute names
            in the key schema must be between 1 and 255 characters (inclusive). The key schema
            must begin with the same partition key as the table.
            </para>
             </li> <li> 
            <para>
             <code>Projection</code> - Specifies attributes that are copied (projected) from the
            table into the index. These are in addition to the primary key attributes and index
            key attributes, which are automatically projected. Each attribute specification is
            composed of:
            </para>
             <ul> <li> 
            <para>
             <code>ProjectionType</code> - One of the following:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.
            </para>
             </li> <li> 
            <para>
             <code>INCLUDE</code> - Only the specified table attributes are projected into the
            index. The list of projected attributes are in <code>NonKeyAttributes</code>.
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> - All of the table attributes are projected into the index.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that
            are projected into the secondary index. The total count of attributes provided in
            <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not
            exceed 20. If you project the same attribute into two different indexes, this counts
            as two distinct attributes when determining the total.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>ProvisionedThroughput</code> - The provisioned throughput settings for the
            global secondary index, consisting of read and write capacity units, along with data
            about increases and decreases. 
            </para>
             </li> </ul> 
            <para>
            If the table is in the <code>DELETING</code> state, no information about indexes will
            be returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.ItemCount">
            <summary>
            Gets and sets the property ItemCount. 
            <para>
            The number of items in the specified table. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.KeySchema">
            <summary>
            Gets and sets the property KeySchema. 
            <para>
            The primary key structure for the table. Each <code>KeySchemaElement</code> consists
            of:
            </para>
             <ul> <li> 
            <para>
             <code>AttributeName</code> - The name of the attribute.
            </para>
             </li> <li> 
            <para>
             <code>KeyType</code> - The role of the attribute:
            </para>
             <ul> <li> 
            <para>
             <code>HASH</code> - partition key
            </para>
             </li> <li> 
            <para>
             <code>RANGE</code> - sort key
            </para>
             </li> </ul> <note> 
            <para>
            The partition key of an item is also known as its <i>hash attribute</i>. The term
            "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.
            </para>
             
            <para>
            The sort key of an item is also known as its <i>range attribute</i>. The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.
            </para>
             </note> </li> </ul> 
            <para>
            For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary
            Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.LatestStreamArn">
            <summary>
            Gets and sets the property LatestStreamArn. 
            <para>
            The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this
            table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.LatestStreamLabel">
            <summary>
            Gets and sets the property LatestStreamLabel. 
            <para>
            A timestamp, in ISO 8601 format, for this stream.
            </para>
             
            <para>
            Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream,
            because it is possible that a stream from another table might have the same timestamp.
            However, the combination of the following three elements is guaranteed to be unique:
            </para>
             <ul> <li> 
            <para>
            the AWS customer ID.
            </para>
             </li> <li> 
            <para>
            the table name.
            </para>
             </li> <li> 
            <para>
            the <code>StreamLabel</code>.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.LocalSecondaryIndexes">
            <summary>
            Gets and sets the property LocalSecondaryIndexes. 
            <para>
            Represents one or more local secondary indexes on the table. Each index is scoped
            to a given partition key value. Tables with one or more local secondary indexes are
            subject to an item collection size limit, where the amount of data within a given
            item collection cannot exceed 10 GB. Each element is composed of:
            </para>
             <ul> <li> 
            <para>
             <code>IndexName</code> - The name of the local secondary index.
            </para>
             </li> <li> 
            <para>
             <code>KeySchema</code> - Specifies the complete index key schema. The attribute names
            in the key schema must be between 1 and 255 characters (inclusive). The key schema
            must begin with the same partition key as the table.
            </para>
             </li> <li> 
            <para>
             <code>Projection</code> - Specifies attributes that are copied (projected) from the
            table into the index. These are in addition to the primary key attributes and index
            key attributes, which are automatically projected. Each attribute specification is
            composed of:
            </para>
             <ul> <li> 
            <para>
             <code>ProjectionType</code> - One of the following:
            </para>
             <ul> <li> 
            <para>
             <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.
            </para>
             </li> <li> 
            <para>
             <code>INCLUDE</code> - Only the specified table attributes are projected into the
            index. The list of projected attributes are in <code>NonKeyAttributes</code>.
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> - All of the table attributes are projected into the index.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that
            are projected into the secondary index. The total count of attributes provided in
            <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not
            exceed 20. If you project the same attribute into two different indexes, this counts
            as two distinct attributes when determining the total.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <code>IndexSizeBytes</code> - Represents the total size of the index, in bytes. DynamoDB
            updates this value approximately every six hours. Recent changes might not be reflected
            in this value.
            </para>
             </li> <li> 
            <para>
             <code>ItemCount</code> - Represents the number of items in the index. DynamoDB updates
            this value approximately every six hours. Recent changes might not be reflected in
            this value.
            </para>
             </li> </ul> 
            <para>
            If the table is in the <code>DELETING</code> state, no information about indexes will
            be returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            The provisioned throughput settings for the table, consisting of read and write capacity
            units, along with data about increases and decreases.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.RestoreSummary">
            <summary>
            Gets and sets the property RestoreSummary. 
            <para>
            Contains details for the restore.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.SSEDescription">
            <summary>
            Gets and sets the property SSEDescription. 
            <para>
            The description of the server-side encryption status on the specified table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.StreamSpecification">
            <summary>
            Gets and sets the property StreamSpecification. 
            <para>
            The current DynamoDB Streams configuration for the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.TableArn">
            <summary>
            Gets and sets the property TableArn. 
            <para>
            The Amazon Resource Name (ARN) that uniquely identifies the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.TableId">
            <summary>
            Gets and sets the property TableId. 
            <para>
            Unique identifier for the table for which the backup was created. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.TableSizeBytes">
            <summary>
            Gets and sets the property TableSizeBytes. 
            <para>
            The total size of the specified table, in bytes. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TableDescription.TableStatus">
            <summary>
            Gets and sets the property TableStatus. 
            <para>
            The current state of the table:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The table is being created.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - The table is being updated.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The table is being deleted.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The table is ready for use.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TableInUseException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.String)">
            <summary>
            Constructs a new TableInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TableInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of TableInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TableInUseException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            <summary>
             DynamoDB exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new TableNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of TableNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TableNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TableNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TableNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.Tag">
            <summary>
            Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single
            DynamoDB table. 
            
             
            <para>
             AWS-assigned tag names and values are automatically assigned the aws: prefix, which
            the user cannot assign. AWS-assigned tag names do not count towards the tag limit
            of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report.
            You cannot backdate the application of a tag. 
            </para>
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            The key of the tag.Tag keys are case sensitive. Each DynamoDB table can only have
            up to one tag with the same key. If you try to add an existing tag (same key), the
            existing tag value will be updated to the new value. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The value of the tag. Tag values are case-sensitive and can be null.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TagResourceRequest">
            <summary>
            Container for the parameters to the TagResource operation.
            Associate a set of tags with an Amazon DynamoDB resource. You can then activate these
            user-defined tags so that they appear on the Billing and Cost Management console for
            cost allocation tracking. You can call TagResource up to 5 times per second, per account.
            
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            Identifies the Amazon DynamoDB resource to which tags should be added. This value
            is an Amazon Resource Name (ARN).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TagResourceRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags to be assigned to the Amazon DynamoDB resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TagResourceResponse">
            <summary>
            This is the response object from the TagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TimeToLiveDescription">
            <summary>
            The description of the Time to Live (TTL) status on the specified table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TimeToLiveDescription.AttributeName">
            <summary>
            Gets and sets the property AttributeName. 
            <para>
             The name of the Time to Live attribute for items in the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TimeToLiveDescription.TimeToLiveStatus">
            <summary>
            Gets and sets the property TimeToLiveStatus. 
            <para>
             The Time to Live status for the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TimeToLiveSpecification">
            <summary>
            Represents the settings used to enable or disable Time to Live for the specified table.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TimeToLiveSpecification.AttributeName">
            <summary>
            Gets and sets the property AttributeName. 
            <para>
            The name of the Time to Live attribute used to store the expiration time for items
            in the table.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.TimeToLiveSpecification.Enabled">
            <summary>
            Gets and sets the property Enabled. 
            <para>
            Indicates whether Time To Live is to be enabled (true) or disabled (false) on the
            table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            <summary>
             DynamoDBStreams exception
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.String)">
            <summary>
            Constructs a new TrimmedDataAccessException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TrimmedDataAccessException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.Exception)">
            <summary>
            Construct instance of TrimmedDataAccessException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TrimmedDataAccessException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TrimmedDataAccessException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.TrimmedDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TrimmedDataAccessException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UntagResourceRequest">
            <summary>
            Container for the parameters to the UntagResource operation.
            Removes the association of tags from an Amazon DynamoDB resource. You can call UntagResource
            up to 5 times per second, per account. 
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UntagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon DyanamoDB resource the tags will be removed from. This value is an Amazon
            Resource Name (ARN).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UntagResourceRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            A list of tag keys. Existing tags of the resource whose keys are members of this list
            will be removed from the Amazon DynamoDB resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UntagResourceResponse">
            <summary>
            This is the response object from the UntagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateGlobalSecondaryIndexAction">
            <summary>
            Represents the new provisioned throughput settings to be applied to a global secondary
            index.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateGlobalSecondaryIndexAction.IndexName">
            <summary>
            Gets and sets the property IndexName. 
            <para>
            The name of the global secondary index to be updated.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateGlobalSecondaryIndexAction.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            Represents the provisioned throughput settings for the specified global secondary
            index.
            </para>
             
            <para>
            For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest">
            <summary>
            Container for the parameters to the UpdateGlobalTable operation.
            Adds or removes replicas in the specified global table. The global table must already
            exist to be able to use this operation. Any replica to be added must be empty, must
            have the same name as the global table, must have the same key schema, must have DynamoDB
            Streams enabled, and cannot have any local secondary indexes (LSIs).
            
             <note> 
            <para>
            Although you can use <code>UpdateGlobalTable</code> to add replicas and remove replicas
            in a single request, for simplicity we recommend that you issue separate requests
            for adding or removing replicas.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest.GlobalTableName">
            <summary>
            Gets and sets the property GlobalTableName. 
            <para>
            The global table name.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest.ReplicaUpdates">
            <summary>
            Gets and sets the property ReplicaUpdates. 
            <para>
            A list of regions that should be added or removed from the global table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateGlobalTableResponse">
            <summary>
            This is the response object from the UpdateGlobalTable operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateGlobalTableResponse.GlobalTableDescription">
            <summary>
            Gets and sets the property GlobalTableDescription. 
            <para>
            Contains the details of the global table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateItemRequest">
            <summary>
            Container for the parameters to the UpdateItem operation.
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.UpdateItemRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.UpdateItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate})">
            <summary>
            Instantiates UpdateItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.UpdateItemRequest.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Instantiates UpdateItemRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation. </li> <li>  <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation. </li> <li>  <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation. </li> <li>  <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation. </li> </ul> There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.AttributeUpdates">
            <summary>
            Gets and sets the property AttributeUpdates. 
            <para>
            This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ConditionalOperator">
            <summary>
            Gets and sets the property ConditionalOperator. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ConditionExpression">
            <summary>
            Gets and sets the property ConditionExpression. 
            <para>
            A condition that must be satisfied in order for a conditional update to succeed.
            </para>
             
            <para>
            An expression can contain any of the following:
            </para>
             <ul> <li> 
            <para>
            Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains
            | begins_with | size</code> 
            </para>
             
            <para>
            These function names are case-sensitive.
            </para>
             </li> <li> 
            <para>
            Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN |
            IN </code> 
            </para>
             </li> <li> 
            <para>
             Logical operators: <code>AND | OR | NOT</code> 
            </para>
             </li> </ul> 
            <para>
            For more information on condition expressions, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.Expected">
            <summary>
            Gets and sets the property Expected. 
            <para>
            This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more
            information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a>
            in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ExpressionAttributeNames">
            <summary>
            Gets and sets the property ExpressionAttributeNames. 
            <para>
            One or more substitution tokens for attribute names in an expression. The following
            are some use cases for using <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
            To access an attribute whose name conflicts with a DynamoDB reserved word.
            </para>
             </li> <li> 
            <para>
            To create a placeholder for repeating occurrences of an attribute name in an expression.
            </para>
             </li> <li> 
            <para>
            To prevent special characters in an attribute name from being misinterpreted in an
            expression.
            </para>
             </li> </ul> 
            <para>
            Use the <b>#</b> character in an expression to dereference an attribute name. For
            example, consider the following attribute name:
            </para>
             <ul> <li> 
            <para>
             <code>Percentile</code> 
            </para>
             </li> </ul> 
            <para>
            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
            Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you
            could specify the following for <code>ExpressionAttributeNames</code>:
            </para>
             <ul> <li> 
            <para>
             <code>{"#P":"Percentile"}</code> 
            </para>
             </li> </ul> 
            <para>
            You could then use this substitution in an expression, as in this example:
            </para>
             <ul> <li> 
            <para>
             <code>#P = :val</code> 
            </para>
             </li> </ul> <note> 
            <para>
            Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>,
            which are placeholders for the actual value at runtime.
            </para>
             </note> 
            <para>
            For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing
            Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ExpressionAttributeValues">
            <summary>
            Gets and sets the property ExpressionAttributeValues. 
            <para>
            One or more values that can be substituted in an expression.
            </para>
             
            <para>
            Use the <b>:</b> (colon) character in an expression to dereference an attribute value.
            For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i>
            attribute was one of the following: 
            </para>
             
            <para>
             <code>Available | Backordered | Discontinued</code> 
            </para>
             
            <para>
            You would first need to specify <code>ExpressionAttributeValues</code> as follows:
            </para>
             
            <para>
             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"}
            }</code> 
            </para>
             
            <para>
            You could then use these values in an expression, such as this:
            </para>
             
            <para>
             <code>ProductStatus IN (:avail, :back, :disc)</code> 
            </para>
             
            <para>
            For more information on expression attribute values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying
            Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            The primary key of the item to be updated. Each element consists of an attribute name
            and a value for that attribute.
            </para>
             
            <para>
            For the primary key, you must provide all of the attributes. For example, with a simple
            primary key, you only need to provide a value for the partition key. For a composite
            primary key, you must provide values for both the partition key and the sort key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ReturnConsumedCapacity">
            <summary>
            Gets and sets the property ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ReturnItemCollectionMetrics">
            <summary>
            Gets and sets the property ReturnItemCollectionMetrics. 
            <para>
            Determines whether item collection metrics are returned. If set to <code>SIZE</code>,
            the response includes statistics about item collections, if any, that were modified
            during the operation are returned in the response. If set to <code>NONE</code> (the
            default), no statistics are returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.ReturnValues">
            <summary>
            Gets and sets the property ReturnValues. 
            <para>
            Use <code>ReturnValues</code> if you want to get the item attributes as they appear
            before or after they are updated. For <code>UpdateItem</code>, the valid values are:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value
            is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)
            </para>
             </li> <li> 
            <para>
             <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared
            before the UpdateItem operation.
            </para>
             </li> <li> 
            <para>
             <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared
            before the UpdateItem operation.
            </para>
             </li> <li> 
            <para>
             <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear
            after the UpdateItem operation.
            </para>
             </li> <li> 
            <para>
             <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after
            the UpdateItem operation.
            </para>
             </li> </ul> 
            <para>
            There is no additional cost associated with requesting a return value aside from the
            small network and processing overhead of receiving a larger response. No read capacity
            units are consumed.
            </para>
             
            <para>
            The values returned are strongly consistent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table containing the item to update.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemRequest.UpdateExpression">
            <summary>
            Gets and sets the property UpdateExpression. 
            <para>
            An expression that defines one or more attributes to be updated, the action to be
            performed on them, and new value(s) for them.
            </para>
             
            <para>
            The following action values are available for <code>UpdateExpression</code>.
            </para>
             <ul> <li> 
            <para>
             <code>SET</code> - Adds one or more attributes and values to an item. If any of these
            attribute already exist, they are replaced by the new values. You can also use <code>SET</code>
            to add or subtract from an attribute that is of type Number. For example: <code>SET
            myNum = myNum + :val</code> 
            </para>
             
            <para>
             <code>SET</code> supports the following functions:
            </para>
             <ul> <li> 
            <para>
             <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute
            at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise,
            it evaluates to path. You can use this function to avoid overwriting an attribute
            that may already be present in the item.
            </para>
             </li> <li> 
            <para>
             <code>list_append (operand, operand)</code> - evaluates to a list with a new element
            added to it. You can append the new element to the start or the end of the list by
            reversing the order of the operands.
            </para>
             </li> </ul> 
            <para>
            These function names are case-sensitive.
            </para>
             </li> <li> 
            <para>
             <code>REMOVE</code> - Removes one or more attributes from an item.
            </para>
             </li> <li> 
            <para>
             <code>ADD</code> - Adds the specified value to the item, if the attribute does not
            already exist. If the attribute does exist, then the behavior of <code>ADD</code>
            depends on the data type of the attribute:
            </para>
             <ul> <li> 
            <para>
            If the existing attribute is a number, and if <code>Value</code> is also a number,
            then <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code>
            is a negative number, then it is subtracted from the existing attribute.
            </para>
             <note> 
            <para>
            If you use <code>ADD</code> to increment or decrement a number value for an item that
            doesn't exist before the update, DynamoDB uses <code>0</code> as the initial value.
            </para>
             
            <para>
            Similarly, if you use <code>ADD</code> for an existing item to increment or decrement
            an attribute value that doesn't exist before the update, DynamoDB uses <code>0</code>
            as the initial value. For example, suppose that the item you want to update doesn't
            have an attribute named <i>itemcount</i>, but you decide to <code>ADD</code> the number
            <code>3</code> to this attribute anyway. DynamoDB will create the <i>itemcount</i>
            attribute, set its initial value to <code>0</code>, and finally add <code>3</code>
            to it. The result will be a new <i>itemcount</i> attribute in the item, with a value
            of <code>3</code>.
            </para>
             </note> </li> <li> 
            <para>
            If the existing data type is a set and if <code>Value</code> is also a set, then <code>Value</code>
            is added to the existing set. For example, if the attribute value is the set <code>[1,2]</code>,
            and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute
            value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code> action is specified
            for a set attribute and the attribute type specified does not match the existing set
            type. 
            </para>
             
            <para>
            Both sets must have the same primitive data type. For example, if the existing data
            type is a set of strings, the <code>Value</code> must also be a set of strings.
            </para>
             </li> </ul> <important> 
            <para>
            The <code>ADD</code> action only supports Number and set data types. In addition,
            <code>ADD</code> can only be used on top-level attributes, not nested attributes.
            </para>
             </important> </li> <li> 
            <para>
             <code>DELETE</code> - Deletes an element from a set.
            </para>
             
            <para>
            If a set of values is specified, then those values are subtracted from the old set.
            For example, if the attribute value was the set <code>[a,b,c]</code> and the <code>DELETE</code>
            action specifies <code>[a,c]</code>, then the final attribute value is <code>[b]</code>.
            Specifying an empty set is an error.
            </para>
             <important> 
            <para>
            The <code>DELETE</code> action only supports set data types. In addition, <code>DELETE</code>
            can only be used on top-level attributes, not nested attributes.
            </para>
             </important> </li> </ul> 
            <para>
            You can have many actions in a single expression, such as the following: <code>SET
            a=:value1, b=:value2 DELETE :value3, :value4, :value5</code> 
            </para>
             
            <para>
            For more information on update expressions, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying
            Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateItemResponse">
            <summary>
            Represents the output of an <code>UpdateItem</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemResponse.Attributes">
            <summary>
            Gets and sets the property Attributes. 
            <para>
            A map of attribute values as they appear before or after the <code>UpdateItem</code>
            operation, as determined by the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            The <code>Attributes</code> map is only present if <code>ReturnValues</code> was specified
            as something other than <code>NONE</code> in the request. Each element represents
            one attribute.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemResponse.ConsumedCapacity">
            <summary>
            Gets and sets the property ConsumedCapacity. 
            <para>
            The capacity units consumed by the <code>UpdateItem</code> operation. The data returned
            includes the total provisioned throughput consumed, along with statistics for the
            table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
            only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
            Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateItemResponse.ItemCollectionMetrics">
            <summary>
            Gets and sets the property ItemCollectionMetrics. 
            <para>
            Information about item collections, if any, that were affected by the <code>UpdateItem</code>
            operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code>
            parameter was specified. If the table does not have any local secondary indexes, this
            information is not returned in the response.
            </para>
             
            <para>
            Each <code>ItemCollectionMetrics</code> element consists of:
            </para>
             <ul> <li> 
            <para>
             <code>ItemCollectionKey</code> - The partition key value of the item collection.
            This is the same as the partition key value of the item itself.
            </para>
             </li> <li> 
            <para>
             <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes.
            This value is a two-element array containing a lower bound and an upper bound for
            the estimate. The estimate includes the size of all the items in the table, plus the
            size of all attributes projected into all of the local secondary indexes on that table.
            Use this estimate to measure whether a local secondary index is approaching its size
            limit.
            </para>
             
            <para>
            The estimate is subject to change over time; therefore, do not rely on the precision
            or accuracy of the estimate.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateTableRequest">
            <summary>
            Container for the parameters to the UpdateTable operation.
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.UpdateTableRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.UpdateTableRequest.#ctor(System.String,Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            Instantiates UpdateTableRequest with the parameterized properties
            </summary>
            <param name="tableName">The name of the table to be updated.</param>
            <param name="provisionedThroughput">The new provisioned throughput settings for the specified table or index.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableRequest.AttributeDefinitions">
            <summary>
            Gets and sets the property AttributeDefinitions. 
            <para>
            An array of attributes that describe the key schema for the table and indexes. If
            you are adding a new global secondary index to the table, <code>AttributeDefinitions</code>
            must include the key element(s) of the new index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableRequest.GlobalSecondaryIndexUpdates">
            <summary>
            Gets and sets the property GlobalSecondaryIndexUpdates. 
            <para>
            An array of one or more global secondary indexes for the table. For each index in
            the array, you can request one action:
            </para>
             <ul> <li> 
            <para>
             <code>Create</code> - add a new global secondary index to the table.
            </para>
             </li> <li> 
            <para>
             <code>Update</code> - modify the provisioned throughput settings of an existing global
            secondary index.
            </para>
             </li> <li> 
            <para>
             <code>Delete</code> - remove a global secondary index from the table.
            </para>
             </li> </ul> 
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing
            Global Secondary Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableRequest.ProvisionedThroughput">
            <summary>
            Gets and sets the property ProvisionedThroughput. 
            <para>
            The new provisioned throughput settings for the specified table or index.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableRequest.StreamSpecification">
            <summary>
            Gets and sets the property StreamSpecification. 
            <para>
            Represents the DynamoDB Streams configuration for the table.
            </para>
             <note> 
            <para>
            You will receive a <code>ResourceInUseException</code> if you attempt to enable a
            stream on a table that already has a stream, or if you attempt to disable a stream
            on a table which does not have a stream.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to be updated.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateTableResponse">
            <summary>
            Represents the output of an <code>UpdateTable</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTableResponse.TableDescription">
            <summary>
            Gets and sets the property TableDescription. 
            <para>
            Represents the properties of the table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest">
            <summary>
            Container for the parameters to the UpdateTimeToLive operation.
            The UpdateTimeToLive method will enable or disable TTL for the specified table. A
            successful <code>UpdateTimeToLive</code> call returns the current <code>TimeToLiveSpecification</code>;
            it may take up to one hour for the change to fully process. Any additional <code>UpdateTimeToLive</code>
            calls for the same table during this one hour duration result in a <code>ValidationException</code>.
            
            
             
            <para>
            TTL compares the current time in epoch time format to the time stored in the TTL attribute
            of an item. If the epoch time value stored in the attribute is less than the current
            time, the item is marked as expired and subsequently deleted.
            </para>
             <note> 
            <para>
             The epoch time format is the number of seconds elapsed since 12:00:00 AM January
            1st, 1970 UTC. 
            </para>
             </note> 
            <para>
            DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput
            for other data operations. 
            </para>
             <important> 
            <para>
            DynamoDB typically deletes expired items within two days of expiration. The exact
            duration within which an item gets deleted after expiration is specific to the nature
            of the workload. Items that have expired and not been deleted will still show up in
            reads, queries, and scans.
            </para>
             </important> 
            <para>
            As items are deleted, they are removed from any Local Secondary Index and Global Secondary
            Index immediately in the same eventually consistent way as a standard delete operation.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">Time
            To Live</a> in the Amazon DynamoDB Developer Guide. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest.TableName">
            <summary>
            Gets and sets the property TableName. 
            <para>
            The name of the table to be configured.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest.TimeToLiveSpecification">
            <summary>
            Gets and sets the property TimeToLiveSpecification. 
            <para>
            Represents the settings used to enable or disable Time to Live for the specified table.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.UpdateTimeToLiveResponse">
            <summary>
            This is the response object from the UpdateTimeToLive operation.
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.UpdateTimeToLiveResponse.TimeToLiveSpecification">
            <summary>
            Gets and sets the property TimeToLiveSpecification. 
            <para>
            Represents the output of an <code>UpdateTimeToLive</code> operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.Model.WriteRequest">
            <summary>
            Represents an operation to perform - either <code>DeleteItem</code> or <code>PutItem</code>.
            You can only request one of these operations, not both, in a single <code>WriteRequest</code>.
            If you do need to perform both of these operations, you will need to provide two separate
            <code>WriteRequest</code> objects.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.WriteRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.WriteRequest.#ctor(Amazon.DynamoDBv2.Model.PutRequest)">
            <summary>
            Instantiates WriteRequest with the parameterized properties
            </summary>
            <param name="putRequest">A request to perform a <code>PutItem</code> operation.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.Model.WriteRequest.#ctor(Amazon.DynamoDBv2.Model.DeleteRequest)">
            <summary>
            Instantiates WriteRequest with the parameterized properties
            </summary>
            <param name="deleteRequest">A request to perform a <code>DeleteItem</code> operation.</param>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.WriteRequest.DeleteRequest">
            <summary>
            Gets and sets the property DeleteRequest. 
            <para>
            A request to perform a <code>DeleteItem</code> operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.DynamoDBv2.Model.WriteRequest.PutRequest">
            <summary>
            Gets and sets the property PutRequest. 
            <para>
            A request to perform a <code>PutItem</code> operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.DynamoDBv2.AttributeAction">
            <summary>
            Constants used for properties of type AttributeAction.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.AttributeAction.ADD">
            <summary>
            Constant ADD for AttributeAction
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.AttributeAction.DELETE">
            <summary>
            Constant DELETE for AttributeAction
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.AttributeAction.PUT">
            <summary>
            Constant PUT for AttributeAction
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AttributeAction.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AttributeAction.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.AttributeAction.op_Implicit(System.String)~Amazon.DynamoDBv2.AttributeAction">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.BackupStatus">
            <summary>
            Constants used for properties of type BackupStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.BackupStatus.AVAILABLE">
            <summary>
            Constant AVAILABLE for BackupStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.BackupStatus.CREATING">
            <summary>
            Constant CREATING for BackupStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.BackupStatus.DELETED">
            <summary>
            Constant DELETED for BackupStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.BackupStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.BackupStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.BackupStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.BackupStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ComparisonOperator">
            <summary>
            Constants used for properties of type ComparisonOperator.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.BEGINS_WITH">
            <summary>
            Constant BEGINS_WITH for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.BETWEEN">
            <summary>
            Constant BETWEEN for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.CONTAINS">
            <summary>
            Constant CONTAINS for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.EQ">
            <summary>
            Constant EQ for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.GE">
            <summary>
            Constant GE for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.GT">
            <summary>
            Constant GT for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.IN">
            <summary>
            Constant IN for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.LE">
            <summary>
            Constant LE for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.LT">
            <summary>
            Constant LT for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.NE">
            <summary>
            Constant NE for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.NOT_CONTAINS">
            <summary>
            Constant NOT_CONTAINS for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.NOT_NULL">
            <summary>
            Constant NOT_NULL for ComparisonOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ComparisonOperator.NULL">
            <summary>
            Constant NULL for ComparisonOperator
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ComparisonOperator.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ComparisonOperator.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ComparisonOperator.op_Implicit(System.String)~Amazon.DynamoDBv2.ComparisonOperator">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ConditionalOperator">
            <summary>
            Constants used for properties of type ConditionalOperator.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ConditionalOperator.AND">
            <summary>
            Constant AND for ConditionalOperator
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ConditionalOperator.OR">
            <summary>
            Constant OR for ConditionalOperator
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ConditionalOperator.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ConditionalOperator.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ConditionalOperator.op_Implicit(System.String)~Amazon.DynamoDBv2.ConditionalOperator">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ContinuousBackupsStatus">
            <summary>
            Constants used for properties of type ContinuousBackupsStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ContinuousBackupsStatus.DISABLED">
            <summary>
            Constant DISABLED for ContinuousBackupsStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ContinuousBackupsStatus.ENABLED">
            <summary>
            Constant ENABLED for ContinuousBackupsStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ContinuousBackupsStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ContinuousBackupsStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ContinuousBackupsStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.ContinuousBackupsStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.GlobalTableStatus">
            <summary>
            Constants used for properties of type GlobalTableStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.GlobalTableStatus.ACTIVE">
            <summary>
            Constant ACTIVE for GlobalTableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.GlobalTableStatus.CREATING">
            <summary>
            Constant CREATING for GlobalTableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.GlobalTableStatus.DELETING">
            <summary>
            Constant DELETING for GlobalTableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.GlobalTableStatus.UPDATING">
            <summary>
            Constant UPDATING for GlobalTableStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.GlobalTableStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.GlobalTableStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.GlobalTableStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.GlobalTableStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.IndexStatus">
            <summary>
            Constants used for properties of type IndexStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.IndexStatus.ACTIVE">
            <summary>
            Constant ACTIVE for IndexStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.IndexStatus.CREATING">
            <summary>
            Constant CREATING for IndexStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.IndexStatus.DELETING">
            <summary>
            Constant DELETING for IndexStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.IndexStatus.UPDATING">
            <summary>
            Constant UPDATING for IndexStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.IndexStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.IndexStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.IndexStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.IndexStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.KeyType">
            <summary>
            Constants used for properties of type KeyType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.KeyType.HASH">
            <summary>
            Constant HASH for KeyType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.KeyType.RANGE">
            <summary>
            Constant RANGE for KeyType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.KeyType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.KeyType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.KeyType.op_Implicit(System.String)~Amazon.DynamoDBv2.KeyType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ProjectionType">
            <summary>
            Constants used for properties of type ProjectionType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ProjectionType.ALL">
            <summary>
            Constant ALL for ProjectionType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ProjectionType.INCLUDE">
            <summary>
            Constant INCLUDE for ProjectionType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ProjectionType.KEYS_ONLY">
            <summary>
            Constant KEYS_ONLY for ProjectionType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ProjectionType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ProjectionType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ProjectionType.op_Implicit(System.String)~Amazon.DynamoDBv2.ProjectionType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ReturnConsumedCapacity">
            <summary>
            Constants used for properties of type ReturnConsumedCapacity.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnConsumedCapacity.INDEXES">
            <summary>
            Constant INDEXES for ReturnConsumedCapacity
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnConsumedCapacity.NONE">
            <summary>
            Constant NONE for ReturnConsumedCapacity
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnConsumedCapacity.TOTAL">
            <summary>
            Constant TOTAL for ReturnConsumedCapacity
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnConsumedCapacity.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnConsumedCapacity.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnConsumedCapacity.op_Implicit(System.String)~Amazon.DynamoDBv2.ReturnConsumedCapacity">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ReturnItemCollectionMetrics">
            <summary>
            Constants used for properties of type ReturnItemCollectionMetrics.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnItemCollectionMetrics.NONE">
            <summary>
            Constant NONE for ReturnItemCollectionMetrics
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnItemCollectionMetrics.SIZE">
            <summary>
            Constant SIZE for ReturnItemCollectionMetrics
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnItemCollectionMetrics.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnItemCollectionMetrics.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnItemCollectionMetrics.op_Implicit(System.String)~Amazon.DynamoDBv2.ReturnItemCollectionMetrics">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ReturnValue">
            <summary>
            Constants used for properties of type ReturnValue.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnValue.ALL_NEW">
            <summary>
            Constant ALL_NEW for ReturnValue
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnValue.ALL_OLD">
            <summary>
            Constant ALL_OLD for ReturnValue
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnValue.NONE">
            <summary>
            Constant NONE for ReturnValue
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnValue.UPDATED_NEW">
            <summary>
            Constant UPDATED_NEW for ReturnValue
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ReturnValue.UPDATED_OLD">
            <summary>
            Constant UPDATED_OLD for ReturnValue
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnValue.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnValue.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ReturnValue.op_Implicit(System.String)~Amazon.DynamoDBv2.ReturnValue">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ScalarAttributeType">
            <summary>
            Constants used for properties of type ScalarAttributeType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ScalarAttributeType.B">
            <summary>
            Constant B for ScalarAttributeType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ScalarAttributeType.N">
            <summary>
            Constant N for ScalarAttributeType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ScalarAttributeType.S">
            <summary>
            Constant S for ScalarAttributeType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ScalarAttributeType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ScalarAttributeType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ScalarAttributeType.op_Implicit(System.String)~Amazon.DynamoDBv2.ScalarAttributeType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.Select">
            <summary>
            Constants used for properties of type Select.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.Select.ALL_ATTRIBUTES">
            <summary>
            Constant ALL_ATTRIBUTES for Select
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.Select.ALL_PROJECTED_ATTRIBUTES">
            <summary>
            Constant ALL_PROJECTED_ATTRIBUTES for Select
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.Select.COUNT">
            <summary>
            Constant COUNT for Select
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.Select.SPECIFIC_ATTRIBUTES">
            <summary>
            Constant SPECIFIC_ATTRIBUTES for Select
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Select.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.Select.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.Select.op_Implicit(System.String)~Amazon.DynamoDBv2.Select">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.SSEStatus">
            <summary>
            Constants used for properties of type SSEStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SSEStatus.DISABLED">
            <summary>
            Constant DISABLED for SSEStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SSEStatus.DISABLING">
            <summary>
            Constant DISABLING for SSEStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SSEStatus.ENABLED">
            <summary>
            Constant ENABLED for SSEStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.SSEStatus.ENABLING">
            <summary>
            Constant ENABLING for SSEStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.SSEStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.SSEStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.SSEStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.SSEStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.StreamViewType">
            <summary>
            Constants used for properties of type StreamViewType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamViewType.KEYS_ONLY">
            <summary>
            Constant KEYS_ONLY for StreamViewType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamViewType.NEW_AND_OLD_IMAGES">
            <summary>
            Constant NEW_AND_OLD_IMAGES for StreamViewType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamViewType.NEW_IMAGE">
            <summary>
            Constant NEW_IMAGE for StreamViewType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamViewType.OLD_IMAGE">
            <summary>
            Constant OLD_IMAGE for StreamViewType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamViewType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamViewType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamViewType.op_Implicit(System.String)~Amazon.DynamoDBv2.StreamViewType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.TableStatus">
            <summary>
            Constants used for properties of type TableStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TableStatus.ACTIVE">
            <summary>
            Constant ACTIVE for TableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TableStatus.CREATING">
            <summary>
            Constant CREATING for TableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TableStatus.DELETING">
            <summary>
            Constant DELETING for TableStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TableStatus.UPDATING">
            <summary>
            Constant UPDATING for TableStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.TableStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.TableStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.TableStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.TableStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.TimeToLiveStatus">
            <summary>
            Constants used for properties of type TimeToLiveStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TimeToLiveStatus.DISABLED">
            <summary>
            Constant DISABLED for TimeToLiveStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TimeToLiveStatus.DISABLING">
            <summary>
            Constant DISABLING for TimeToLiveStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TimeToLiveStatus.ENABLED">
            <summary>
            Constant ENABLED for TimeToLiveStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.TimeToLiveStatus.ENABLING">
            <summary>
            Constant ENABLING for TimeToLiveStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.TimeToLiveStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.TimeToLiveStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.TimeToLiveStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.TimeToLiveStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.OperationType">
            <summary>
            Constants used for properties of type OperationType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.OperationType.INSERT">
            <summary>
            Constant INSERT for OperationType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.OperationType.MODIFY">
            <summary>
            Constant MODIFY for OperationType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.OperationType.REMOVE">
            <summary>
            Constant REMOVE for OperationType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.OperationType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.OperationType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.OperationType.op_Implicit(System.String)~Amazon.DynamoDBv2.OperationType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.ShardIteratorType">
            <summary>
            Constants used for properties of type ShardIteratorType.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ShardIteratorType.AFTER_SEQUENCE_NUMBER">
            <summary>
            Constant AFTER_SEQUENCE_NUMBER for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ShardIteratorType.AT_SEQUENCE_NUMBER">
            <summary>
            Constant AT_SEQUENCE_NUMBER for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ShardIteratorType.LATEST">
            <summary>
            Constant LATEST for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.ShardIteratorType.TRIM_HORIZON">
            <summary>
            Constant TRIM_HORIZON for ShardIteratorType
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ShardIteratorType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.ShardIteratorType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.ShardIteratorType.op_Implicit(System.String)~Amazon.DynamoDBv2.ShardIteratorType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.StreamStatus">
            <summary>
            Constants used for properties of type StreamStatus.
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamStatus.DISABLED">
            <summary>
            Constant DISABLED for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamStatus.DISABLING">
            <summary>
            Constant DISABLING for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamStatus.ENABLED">
            <summary>
            Constant ENABLED for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.DynamoDBv2.StreamStatus.ENABLING">
            <summary>
            Constant ENABLING for StreamStatus
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.DynamoDBv2.StreamStatus.op_Implicit(System.String)~Amazon.DynamoDBv2.StreamStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBClient">
             <summary>
             Implementation for accessing DynamoDB
            
             Amazon DynamoDB 
             <para>
             Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable
             performance with seamless scalability. DynamoDB lets you offload the administrative
             burdens of operating and scaling a distributed database, so that you don't have to
             worry about hardware provisioning, setup and configuration, replication, software
             patching, or cluster scaling.
             </para>
              
             <para>
             With DynamoDB, you can create database tables that can store and retrieve any amount
             of data, and serve any level of request traffic. You can scale up or scale down your
             tables' throughput capacity without downtime or performance degradation, and use the
             AWS Management Console to monitor resource utilization and performance metrics.
             </para>
              
             <para>
             DynamoDB automatically spreads the data and traffic for your tables over a sufficient
             number of servers to handle your throughput and storage requirements, while maintaining
             consistent and fast performance. All of your data is stored on solid state disks (SSDs)
             and automatically replicated across multiple Availability Zones in an AWS region,
             providing built-in high availability and data durability. 
             </para>
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor">
             <summary>
             Constructs AmazonDynamoDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonDynamoDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(Amazon.DynamoDBv2.AmazonDynamoDBConfig)">
             <summary>
             Constructs AmazonDynamoDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonDynamoDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.DynamoDBv2.AmazonDynamoDBConfig)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Credentials and an
            AmazonDynamoDBClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonDynamoDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String,Amazon.DynamoDBv2.AmazonDynamoDBConfig)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID, AWS Secret Key and an
            AmazonDynamoDBClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonDynamoDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.#ctor(System.String,System.String,System.String,Amazon.DynamoDBv2.AmazonDynamoDBConfig)">
            <summary>
            Constructs AmazonDynamoDBClient with AWS Access Key ID, AWS Secret Key and an
            AmazonDynamoDBClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonDynamoDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CustomizeRuntimePipeline(Amazon.Runtime.Internal.RuntimePipeline)">
            <summary>
            Customize the pipeline
            </summary>
            <param name="pipeline"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItem(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},Amazon.DynamoDBv2.ReturnConsumedCapacity)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="returnConsumedCapacity">A property of BatchGetItemRequest used to execute the BatchGetItem service method.</param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItem(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes})">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItem(Amazon.DynamoDBv2.Model.BatchGetItemRequest)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetItem service method.</param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItemAsync(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},Amazon.DynamoDBv2.ReturnConsumedCapacity,System.Threading.CancellationToken)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="returnConsumedCapacity">A property of BatchGetItemRequest used to execute the BatchGetItem service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItemAsync(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},System.Threading.CancellationToken)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchGetItemAsync(Amazon.DynamoDBv2.Model.BatchGetItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchGetItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchGetItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchWriteItem(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.WriteRequest}})">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following: <ul> <li>  <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement: <ul> <li>  <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key. </li> </ul> </li> <li>  <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement: <ul> <li>  <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. </li> </ul> </li> </ul></param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchWriteItem(Amazon.DynamoDBv2.Model.BatchWriteItemRequest)">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchWriteItem service method.</param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchWriteItemAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.WriteRequest}},System.Threading.CancellationToken)">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following: <ul> <li>  <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement: <ul> <li>  <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key. </li> </ul> </li> <li>  <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement: <ul> <li>  <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. </li> </ul> </li> </ul></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.BatchWriteItemAsync(Amazon.DynamoDBv2.Model.BatchWriteItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchWriteItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchWriteItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateBackup(Amazon.DynamoDBv2.Model.CreateBackupRequest)">
            <summary>
            Creates a backup for an existing table.
            
             
            <para>
             Each time you create an On-Demand Backup, the entire table data is backed up. There
            is no limit to the number of on-demand backups that can be taken. 
            </para>
             
            <para>
             When you create an On-Demand Backup, a time marker of the request is cataloged, and
            the backup is created asynchronously, by applying all changes until the time of the
            request to the last full table snapshot. Backup requests are processed instantaneously
            and become available for restore within minutes. 
            </para>
             
            <para>
            You can call <code>CreateBackup</code> at a maximum rate of 50 times per second.
            </para>
             
            <para>
            All backups in DynamoDB work without consuming any provisioned throughput on the table.
            </para>
             
            <para>
             If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed
            to contain all data committed to the table up to 14:24:00, and data committed after
            14:26:00 will not be. The backup may or may not contain data modifications made between
            14:24:00 and 14:26:00. On-Demand Backup does not support causal consistency. 
            </para>
             
            <para>
             Along with data, the following are also included on the backups: 
            </para>
             <ul> <li> 
            <para>
            Global secondary indexes (GSIs)
            </para>
             </li> <li> 
            <para>
            Local secondary indexes (LSIs)
            </para>
             </li> <li> 
            <para>
            Streams
            </para>
             </li> <li> 
            <para>
            Provisioned read and write capacity
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateBackup service method.</param>
            
            <returns>The response from the CreateBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException">
            Backups have not yet been enabled for this table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableInUseException">
            A table by that name is either being created or deleted.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateBackup">REST API Reference for CreateBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateBackupAsync(Amazon.DynamoDBv2.Model.CreateBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateBackup">REST API Reference for CreateBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateGlobalTable(Amazon.DynamoDBv2.Model.CreateGlobalTableRequest)">
            <summary>
            Creates a global table from an existing table. A global table creates a replication
            relationship between two or more DynamoDB tables with the same table name in the provided
            regions. 
            
             
            <para>
             Tables can only be added as the replicas of a global table group under the following
            conditions: 
            </para>
             <ul> <li> 
            <para>
             The tables must have the same name. 
            </para>
             </li> <li> 
            <para>
             The tables must contain no items. 
            </para>
             </li> <li> 
            <para>
             The tables must have the same hash key and sort key (if present). 
            </para>
             </li> <li> 
            <para>
             The tables must have DynamoDB Streams enabled (NEW_AND_OLD_IMAGES). 
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateGlobalTable service method.</param>
            
            <returns>The response from the CreateGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException">
            The specified global table already exists.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateGlobalTable">REST API Reference for CreateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateGlobalTableAsync(Amazon.DynamoDBv2.Model.CreateGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateGlobalTable">REST API Reference for CreateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateTable(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="attributeDefinitions">An array of attributes that describe the key schema for the table and indexes.</param>
            <param name="provisionedThroughput">Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation. For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateTable(Amazon.DynamoDBv2.Model.CreateTableRequest)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateTable service method.</param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateTableAsync(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},Amazon.DynamoDBv2.Model.ProvisionedThroughput,System.Threading.CancellationToken)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="attributeDefinitions">An array of attributes that describe the key schema for the table and indexes.</param>
            <param name="provisionedThroughput">Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation. For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.CreateTableAsync(Amazon.DynamoDBv2.Model.CreateTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteBackup(Amazon.DynamoDBv2.Model.DeleteBackupRequest)">
            <summary>
            Deletes an existing backup of a table.
            
             
            <para>
            You can call <code>DeleteBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteBackup service method.</param>
            
            <returns>The response from the DeleteBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteBackup">REST API Reference for DeleteBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteBackupAsync(Amazon.DynamoDBv2.Model.DeleteBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteBackup">REST API Reference for DeleteBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - The content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItem(Amazon.DynamoDBv2.Model.DeleteItemRequest)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteItem service method.</param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - The content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteItemAsync(Amazon.DynamoDBv2.Model.DeleteItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteTable(System.String)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="tableName">The name of the table to delete.</param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteTable(Amazon.DynamoDBv2.Model.DeleteTableRequest)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteTable service method.</param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="tableName">The name of the table to delete.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DeleteTableAsync(Amazon.DynamoDBv2.Model.DeleteTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeBackup(Amazon.DynamoDBv2.Model.DescribeBackupRequest)">
            <summary>
            Describes an existing backup of a table.
            
             
            <para>
            You can call <code>DescribeBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeBackup service method.</param>
            
            <returns>The response from the DescribeBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeBackup">REST API Reference for DescribeBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeBackupAsync(Amazon.DynamoDBv2.Model.DescribeBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeBackup">REST API Reference for DescribeBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeContinuousBackups(Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest)">
            <summary>
            Checks the status of the backup restore settings on the specified table. If backups
            are enabled, <code>ContinuousBackupsStatus</code> will bet set to ENABLED.
            
             
            <para>
            You can call <code>DescribeContinuousBackups</code> at a maximum rate of 10 times
            per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeContinuousBackups service method.</param>
            
            <returns>The response from the DescribeContinuousBackups service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeContinuousBackups">REST API Reference for DescribeContinuousBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeContinuousBackupsAsync(Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeContinuousBackups operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeContinuousBackups operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeContinuousBackups">REST API Reference for DescribeContinuousBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeGlobalTable(Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest)">
            <summary>
            Returns information about the specified global table.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeGlobalTable service method.</param>
            
            <returns>The response from the DescribeGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException">
            The specified global table does not exist.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeGlobalTable">REST API Reference for DescribeGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeGlobalTableAsync(Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeGlobalTable">REST API Reference for DescribeGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeLimits(Amazon.DynamoDBv2.Model.DescribeLimitsRequest)">
            <summary>
            Returns the current provisioned-capacity limits for your AWS account in a region,
            both for the region as a whole and for any one DynamoDB table that you create there.
            
             
            <para>
            When you establish an AWS account, the account has initial limits on the maximum read
            capacity units and write capacity units that you can provision across all of your
            DynamoDB tables in a given region. Also, there are per-table limits that apply when
            you create a table there. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            page in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            Although you can increase these limits by filing a case at <a href="https://console.aws.amazon.com/support/home#/">AWS
            Support Center</a>, obtaining the increase is not instantaneous. The <code>DescribeLimits</code>
            action lets you write code to compare the capacity you are currently using to those
            limits imposed by your account so that you have enough time to apply for an increase
            before you hit a limit.
            </para>
             
            <para>
            For example, you could use one of the AWS SDKs to do the following:
            </para>
             <ol> <li> 
            <para>
            Call <code>DescribeLimits</code> for a particular region to obtain your current account
            limits on provisioned capacity there.
            </para>
             </li> <li> 
            <para>
            Create a variable to hold the aggregate read capacity units provisioned for all your
            tables in that region, and one to hold the aggregate write capacity units. Zero them
            both.
            </para>
             </li> <li> 
            <para>
            Call <code>ListTables</code> to obtain a list of all your DynamoDB tables.
            </para>
             </li> <li> 
            <para>
            For each table name listed by <code>ListTables</code>, do the following:
            </para>
             <ul> <li> 
            <para>
            Call <code>DescribeTable</code> with the table name.
            </para>
             </li> <li> 
            <para>
            Use the data returned by <code>DescribeTable</code> to add the read capacity units
            and write capacity units provisioned for the table itself to your variables.
            </para>
             </li> <li> 
            <para>
            If the table has one or more global secondary indexes (GSIs), loop over these GSIs
            and add their provisioned capacity values to your variables as well.
            </para>
             </li> </ul> </li> <li> 
            <para>
            Report the account limits for that region returned by <code>DescribeLimits</code>,
            along with the total current provisioned capacity levels you have calculated.
            </para>
             </li> </ol> 
            <para>
            This will let you see whether you are getting close to your account-level limits.
            </para>
             
            <para>
            The per-table limits apply only when you are creating a new table. They restrict the
            sum of the provisioned capacity of the new table itself and all its global secondary
            indexes.
            </para>
             
            <para>
            For existing tables and their GSIs, DynamoDB will not let you increase provisioned
            capacity extremely rapidly, but the only upper limit that applies is that the aggregate
            provisioned capacity over all your tables and GSIs cannot exceed either of the per-account
            limits.
            </para>
             <note> 
            <para>
             <code>DescribeLimits</code> should only be called periodically. You can expect throttling
            errors if you call it more than once in a minute.
            </para>
             </note> 
            <para>
            The <code>DescribeLimits</code> Request element has no content.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            
            <returns>The response from the DescribeLimits service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeLimitsAsync(Amazon.DynamoDBv2.Model.DescribeLimitsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeLimits operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeLimits operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTable(System.String)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="tableName">The name of the table to describe.</param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTable(Amazon.DynamoDBv2.Model.DescribeTableRequest)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeTable service method.</param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="tableName">The name of the table to describe.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTableAsync(Amazon.DynamoDBv2.Model.DescribeTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTimeToLive(System.String)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="tableName">The name of the table to be described.</param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTimeToLive(Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeTimeToLive service method.</param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTimeToLiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="tableName">The name of the table to be described.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.DescribeTimeToLiveAsync(Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeTimeToLive operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeTimeToLive operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="consistentRead">Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItem(Amazon.DynamoDBv2.Model.GetItemRequest)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetItem service method.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="consistentRead">Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.GetItemAsync(Amazon.DynamoDBv2.Model.GetItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListBackups(Amazon.DynamoDBv2.Model.ListBackupsRequest)">
            <summary>
            List backups associated with an AWS account. To list backups for a given table, specify
            <code>TableName</code>. <code>ListBackups</code> returns a paginated list of results
            with at most 1MB worth of items in a page. You can also specify a limit for the maximum
            number of entries to be returned in a page. 
            
             
            <para>
            In the request, start time is inclusive but end time is exclusive. Note that these
            limits are for the time at which the original backup was requested.
            </para>
             
            <para>
            You can call <code>ListBackups</code> a maximum of 5 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListBackups service method.</param>
            
            <returns>The response from the ListBackups service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListBackups">REST API Reference for ListBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListBackupsAsync(Amazon.DynamoDBv2.Model.ListBackupsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListBackups operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListBackups operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListBackups">REST API Reference for ListBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListGlobalTables(Amazon.DynamoDBv2.Model.ListGlobalTablesRequest)">
            <summary>
            Lists all global tables that have a replica in the specified region.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListGlobalTables service method.</param>
            
            <returns>The response from the ListGlobalTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListGlobalTables">REST API Reference for ListGlobalTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListGlobalTablesAsync(Amazon.DynamoDBv2.Model.ListGlobalTablesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListGlobalTables operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListGlobalTables operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListGlobalTables">REST API Reference for ListGlobalTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTables">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTables(System.String)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTables(System.String,System.Int32)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTables(System.Int32)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTables(Amazon.DynamoDBv2.Model.ListTablesRequest)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTables service method.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTablesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTablesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTablesAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTablesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTablesAsync(Amazon.DynamoDBv2.Model.ListTablesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListTables operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListTables operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTagsOfResource(Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest)">
            <summary>
            List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to
            10 times per second, per account.
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsOfResource service method.</param>
            
            <returns>The response from the ListTagsOfResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTagsOfResource">REST API Reference for ListTagsOfResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ListTagsOfResourceAsync(Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListTagsOfResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListTagsOfResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTagsOfResource">REST API Reference for ListTagsOfResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItem(Amazon.DynamoDBv2.Model.PutItemRequest)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutItem service method.</param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.PutItemAsync(Amazon.DynamoDBv2.Model.PutItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Query(Amazon.DynamoDBv2.Model.QueryRequest)">
            <summary>
            The <code>Query</code> operation finds items based on primary key values. You can
            query any table or secondary index that has a composite primary key (a partition key
            and a sort key). 
            
             
            <para>
            Use the <code>KeyConditionExpression</code> parameter to provide a specific value
            for the partition key. The <code>Query</code> operation will return all of the items
            from the table or index with that partition key value. You can optionally narrow the
            scope of the <code>Query</code> operation by specifying a sort key value and a comparison
            operator in <code>KeyConditionExpression</code>. To further refine the <code>Query</code>
            results, you can optionally provide a <code>FilterExpression</code>. A <code>FilterExpression</code>
            determines which items within the results should be returned to you. All of the other
            results are discarded. 
            </para>
             
            <para>
             A <code>Query</code> operation always returns a result set. If no matching items
            are found, the result set will be empty. Queries that do not return results consume
            the minimum number of read capacity units for that type of read operation. 
            </para>
             <note> 
            <para>
             DynamoDB calculates the number of read capacity units consumed based on item size,
            not on the amount of data that is returned to an application. The number of capacity
            units consumed will be the same whether you request all of the attributes (the default
            behavior) or just some of them (using a projection expression). The number will also
            be the same whether or not you use a <code>FilterExpression</code>. 
            </para>
             </note> 
            <para>
             <code>Query</code> results are always sorted by the sort key value. If the data type
            of the sort key is Number, the results are returned in numeric order; otherwise, the
            results are returned in order of UTF-8 bytes. By default, the sort order is ascending.
            To reverse the order, set the <code>ScanIndexForward</code> parameter to false. 
            </para>
             
            <para>
             A single <code>Query</code> operation will read up to the maximum number of items
            set (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>FilterExpression</code> is applied after a <code>Query</code> finishes, but
            before the results are returned. A <code>FilterExpression</code> cannot contain partition
            key or sort key attributes. You need to specify those attributes in the <code>KeyConditionExpression</code>.
            
            </para>
             <note> 
            <para>
             A <code>Query</code> operation can return an empty result set and a <code>LastEvaluatedKey</code>
            if all the items read for the page of results are filtered out. 
            </para>
             </note> 
            <para>
            You can query a table, a local secondary index, or a global secondary index. For a
            query on a table or on a local secondary index, you can set the <code>ConsistentRead</code>
            parameter to <code>true</code> and obtain a strongly consistent result. Global secondary
            indexes support eventually consistent reads only, so do not specify <code>ConsistentRead</code>
            when querying a global secondary index.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Query service method.</param>
            
            <returns>The response from the Query service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Query">REST API Reference for Query Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.QueryAsync(Amazon.DynamoDBv2.Model.QueryRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Query operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Query operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Query">REST API Reference for Query Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.RestoreTableFromBackup(Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest)">
            <summary>
            Creates a new table from an existing backup. Any number of users can execute up to
            10 concurrent restores in a given account. 
            
             
            <para>
            You can call <code>RestoreTableFromBackup</code> at a maximum rate of 10 times per
            second.
            </para>
             
            <para>
            You must manually set up the following on the restored table:
            </para>
             <ul> <li> 
            <para>
            Auto scaling policies
            </para>
             </li> <li> 
            <para>
            IAM policies
            </para>
             </li> <li> 
            <para>
            Cloudwatch metrics and alarms
            </para>
             </li> <li> 
            <para>
            Tags
            </para>
             </li> <li> 
            <para>
            Stream settings
            </para>
             </li> <li> 
            <para>
            Time to Live (TTL) settings
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RestoreTableFromBackup service method.</param>
            
            <returns>The response from the RestoreTableFromBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableAlreadyExistsException">
            A table with the name already exists.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableInUseException">
            A table by that name is either being created or deleted.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/RestoreTableFromBackup">REST API Reference for RestoreTableFromBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.RestoreTableFromBackupAsync(Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the RestoreTableFromBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the RestoreTableFromBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/RestoreTableFromBackup">REST API Reference for RestoreTableFromBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Scan(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Scan(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Scan(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.Scan(Amazon.DynamoDBv2.Model.ScanRequest)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Scan service method.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ScanAsync(System.String,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ScanAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ScanAsync(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.ScanAsync(Amazon.DynamoDBv2.Model.ScanRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Scan operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Scan operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.TagResource(Amazon.DynamoDBv2.Model.TagResourceRequest)">
            <summary>
            Associate a set of tags with an Amazon DynamoDB resource. You can then activate these
            user-defined tags so that they appear on the Billing and Cost Management console for
            cost allocation tracking. You can call TagResource up to 5 times per second, per account.
            
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            
            <returns>The response from the TagResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.TagResourceAsync(Amazon.DynamoDBv2.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the TagResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the TagResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UntagResource(Amazon.DynamoDBv2.Model.UntagResourceRequest)">
            <summary>
            Removes the association of tags from an Amazon DynamoDB resource. You can call UntagResource
            up to 5 times per second, per account. 
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            
            <returns>The response from the UntagResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UntagResourceAsync(Amazon.DynamoDBv2.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UntagResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UntagResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateGlobalTable(Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest)">
            <summary>
            Adds or removes replicas in the specified global table. The global table must already
            exist to be able to use this operation. Any replica to be added must be empty, must
            have the same name as the global table, must have the same key schema, must have DynamoDB
            Streams enabled, and cannot have any local secondary indexes (LSIs).
            
             <note> 
            <para>
            Although you can use <code>UpdateGlobalTable</code> to add replicas and remove replicas
            in a single request, for simplicity we recommend that you issue separate requests
            for adding or removing replicas.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateGlobalTable service method.</param>
            
            <returns>The response from the UpdateGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException">
            The specified global table does not exist.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException">
            The specified replica is already part of the global table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ReplicaNotFoundException">
            The specified replica is no longer part of the global table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateGlobalTable">REST API Reference for UpdateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateGlobalTableAsync(Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateGlobalTable">REST API Reference for UpdateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate})">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation. </li> <li>  <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation. </li> <li>  <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation. </li> <li>  <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation. </li> </ul> There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItem(Amazon.DynamoDBv2.Model.UpdateItemRequest)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateItem service method.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},System.Threading.CancellationToken)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation. </li> <li>  <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation. </li> <li>  <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation. </li> <li>  <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation. </li> </ul> There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateItemAsync(Amazon.DynamoDBv2.Model.UpdateItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTable(System.String,Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="tableName">The name of the table to be updated.</param>
            <param name="provisionedThroughput">The new provisioned throughput settings for the specified table or index.</param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTable(Amazon.DynamoDBv2.Model.UpdateTableRequest)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateTable service method.</param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTableAsync(System.String,Amazon.DynamoDBv2.Model.ProvisionedThroughput,System.Threading.CancellationToken)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="tableName">The name of the table to be updated.</param>
            <param name="provisionedThroughput">The new provisioned throughput settings for the specified table or index.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTableAsync(Amazon.DynamoDBv2.Model.UpdateTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTimeToLive(Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest)">
            <summary>
            The UpdateTimeToLive method will enable or disable TTL for the specified table. A
            successful <code>UpdateTimeToLive</code> call returns the current <code>TimeToLiveSpecification</code>;
            it may take up to one hour for the change to fully process. Any additional <code>UpdateTimeToLive</code>
            calls for the same table during this one hour duration result in a <code>ValidationException</code>.
            
            
             
            <para>
            TTL compares the current time in epoch time format to the time stored in the TTL attribute
            of an item. If the epoch time value stored in the attribute is less than the current
            time, the item is marked as expired and subsequently deleted.
            </para>
             <note> 
            <para>
             The epoch time format is the number of seconds elapsed since 12:00:00 AM January
            1st, 1970 UTC. 
            </para>
             </note> 
            <para>
            DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput
            for other data operations. 
            </para>
             <important> 
            <para>
            DynamoDB typically deletes expired items within two days of expiration. The exact
            duration within which an item gets deleted after expiration is specific to the nature
            of the workload. Items that have expired and not been deleted will still show up in
            reads, queries, and scans.
            </para>
             </important> 
            <para>
            As items are deleted, they are removed from any Local Secondary Index and Global Secondary
            Index immediately in the same eventually consistent way as a standard delete operation.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">Time
            To Live</a> in the Amazon DynamoDB Developer Guide. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateTimeToLive service method.</param>
            
            <returns>The response from the UpdateTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTimeToLive">REST API Reference for UpdateTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBClient.UpdateTimeToLiveAsync(Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateTimeToLive operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateTimeToLive operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTimeToLive">REST API Reference for UpdateTimeToLive Operation</seealso>
        </member>
        <member name="T:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient">
             <summary>
             Implementation for accessing DynamoDBStreams
            
             Amazon DynamoDB 
             <para>
             Amazon DynamoDB Streams provides API actions for accessing streams and processing
             stream records. To learn more about application development with Streams, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">Capturing
             Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor">
             <summary>
             Constructs AmazonDynamoDBStreamsClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonDynamoDBStreamsClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig)">
             <summary>
             Constructs AmazonDynamoDBStreamsClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonDynamoDBStreamsClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Credentials and an
            AmazonDynamoDBStreamsClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonDynamoDBStreamsClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String,Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID, AWS Secret Key and an
            AmazonDynamoDBStreamsClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonDynamoDBStreamsClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.#ctor(System.String,System.String,System.String,Amazon.DynamoDBv2.AmazonDynamoDBStreamsConfig)">
            <summary>
            Constructs AmazonDynamoDBStreamsClient with AWS Access Key ID, AWS Secret Key and an
            AmazonDynamoDBStreamsClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonDynamoDBStreamsClient Configuration Object</param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.CustomizeRuntimePipeline(Amazon.Runtime.Internal.RuntimePipeline)">
            <summary>
            Customize the pipeline
            </summary>
            <param name="pipeline"></param>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.DescribeStream(System.String)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="streamArn">The Amazon Resource Name (ARN) for the stream.</param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.DescribeStream(Amazon.DynamoDBv2.Model.DescribeStreamRequest)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.DescribeStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="streamArn">The Amazon Resource Name (ARN) for the stream.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.DescribeStreamAsync(Amazon.DynamoDBv2.Model.DescribeStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeStream operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeStream operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetRecords(System.String)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="shardIterator">A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.</param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetRecords(Amazon.DynamoDBv2.Model.GetRecordsRequest)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetRecordsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="shardIterator">A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetRecordsAsync(Amazon.DynamoDBv2.Model.GetRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetRecords operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetRecords operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetShardIterator(Amazon.DynamoDBv2.Model.GetShardIteratorRequest)">
            <summary>
            Returns a shard iterator. A shard iterator provides information about how to retrieve
            the stream records from within a shard. Use the shard iterator in a subsequent <code>GetRecords</code>
            request to read the stream records from the shard.
            
             <note> 
            <para>
            A shard iterator expires 15 minutes after it is returned to the requester.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            
            <returns>The response from the GetShardIterator service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.GetShardIteratorAsync(Amazon.DynamoDBv2.Model.GetShardIteratorRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetShardIterator operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetShardIterator operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.ListStreams">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.ListStreams(Amazon.DynamoDBv2.Model.ListStreamsRequest)">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.ListStreamsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.AmazonDynamoDBStreamsClient.ListStreamsAsync(Amazon.DynamoDBv2.Model.ListStreamsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListStreams operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListStreams operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="T:Amazon.DynamoDBv2.IAmazonDynamoDB">
             <summary>
             Interface for accessing DynamoDB
            
             Amazon DynamoDB 
             <para>
             Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable
             performance with seamless scalability. DynamoDB lets you offload the administrative
             burdens of operating and scaling a distributed database, so that you don't have to
             worry about hardware provisioning, setup and configuration, replication, software
             patching, or cluster scaling.
             </para>
              
             <para>
             With DynamoDB, you can create database tables that can store and retrieve any amount
             of data, and serve any level of request traffic. You can scale up or scale down your
             tables' throughput capacity without downtime or performance degradation, and use the
             AWS Management Console to monitor resource utilization and performance metrics.
             </para>
              
             <para>
             DynamoDB automatically spreads the data and traffic for your tables over a sufficient
             number of servers to handle your throughput and storage requirements, while maintaining
             consistent and fast performance. All of your data is stored on solid state disks (SSDs)
             and automatically replicated across multiple Availability Zones in an AWS region,
             providing built-in high availability and data durability. 
             </para>
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItem(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},Amazon.DynamoDBv2.ReturnConsumedCapacity)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="returnConsumedCapacity">A property of BatchGetItemRequest used to execute the BatchGetItem service method.</param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItem(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes})">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItem(Amazon.DynamoDBv2.Model.BatchGetItemRequest)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetItem service method.</param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItemAsync(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},Amazon.DynamoDBv2.ReturnConsumedCapacity,System.Threading.CancellationToken)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="returnConsumedCapacity">A property of BatchGetItemRequest used to execute the BatchGetItem service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItemAsync(System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.KeysAndAttributes},System.Threading.CancellationToken)">
            <summary>
            The <code>BatchGetItem</code> operation returns the attributes of one or more items
            from one or more tables. You identify requested items by primary key.
            
             
            <para>
            A single operation can retrieve up to 16 MB of data, which can contain as many as
            100 items. <code>BatchGetItem</code> will return a partial result if the response
            size limit is exceeded, the table's provisioned throughput is exceeded, or an internal
            processing failure occurs. If a partial result is returned, the operation returns
            a value for <code>UnprocessedKeys</code>. You can use this value to retry the operation
            starting with the next item to get.
            </para>
             <important> 
            <para>
            If you request more than 100 items <code>BatchGetItem</code> will return a <code>ValidationException</code>
            with the message "Too many items requested for the BatchGetItem call".
            </para>
             </important> 
            <para>
            For example, if you ask to retrieve 100 items, but each individual item is 300 KB
            in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also
            returns an appropriate <code>UnprocessedKeys</code> value so you can get the next
            page of results. If desired, your application can include its own logic to assemble
            the pages of results into one data set.
            </para>
             
            <para>
            If <i>none</i> of the items can be processed due to insufficient provisioned throughput
            on all of the tables in the request, then <code>BatchGetItem</code> will return a
            <code>ProvisionedThroughputExceededException</code>. If <i>at least one</i> of the
            items is successfully processed, then <code>BatchGetItem</code> completes successfully,
            while returning the keys of the unread items in <code>UnprocessedKeys</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            By default, <code>BatchGetItem</code> performs eventually consistent reads on every
            table in the request. If you want strongly consistent reads instead, you can set <code>ConsistentRead</code>
            to <code>true</code> for any or all tables.
            </para>
             
            <para>
            In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
            parallel.
            </para>
             
            <para>
            When designing your application, keep in mind that DynamoDB does not return items
            in any particular order. To help parse the response by item, include the primary key
            values for the items in your request in the <code>ProjectionExpression</code> parameter.
            </para>
             
            <para>
            If a requested item does not exist, it is not returned in the result. Requests for
            nonexistent items consume the minimum read capacity units according to the type of
            read. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Capacity
            Units Calculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request. Each element in the map of items to retrieve consists of the following: <ul> <li>  <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used. </li> <li>  <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>: <ul> <li> To access an attribute whose name conflicts with a DynamoDB reserved word. </li> <li> To create a placeholder for repeating occurrences of an attribute name in an expression. </li> <li> To prevent special characters in an attribute name from being misinterpreted in an expression. </li> </ul> Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name: <ul> <li>  <code>Percentile</code>  </li> </ul> The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>: <ul> <li>  <code>{"#P":"Percentile"}</code>  </li> </ul> You could then use this substitution in an expression, as in this example: <ul> <li>  <code>#P = :val</code>  </li> </ul> <note> Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime. </note> For more information on expression attribute names, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value. </li> <li>  <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </li> <li>  <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.  </li> </ul></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchGetItemAsync(Amazon.DynamoDBv2.Model.BatchGetItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchGetItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchGetItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchGetItem">REST API Reference for BatchGetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchWriteItem(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.WriteRequest}})">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following: <ul> <li>  <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement: <ul> <li>  <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key. </li> </ul> </li> <li>  <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement: <ul> <li>  <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. </li> </ul> </li> </ul></param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchWriteItem(Amazon.DynamoDBv2.Model.BatchWriteItemRequest)">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchWriteItem service method.</param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchWriteItemAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.WriteRequest}},System.Threading.CancellationToken)">
            <summary>
            The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
            more tables. A single call to <code>BatchWriteItem</code> can write up to 16 MB of
            data, which can comprise as many as 25 put or delete requests. Individual items to
            be written can be as large as 400 KB.
            
             <note> 
            <para>
             <code>BatchWriteItem</code> cannot update items. To update items, use the <code>UpdateItem</code>
            action.
            </para>
             </note> 
            <para>
            The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
            in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as
            a whole is not. If any requested operations fail because the table's provisioned throughput
            is exceeded or an internal processing failure occurs, the failed operations are returned
            in the <code>UnprocessedItems</code> response parameter. You can investigate and optionally
            resend the requests. Typically, you would call <code>BatchWriteItem</code> in a loop.
            Each iteration would check for unprocessed items and submit a new <code>BatchWriteItem</code>
            request with those unprocessed items until all items have been processed.
            </para>
             
            <para>
            Note that if <i>none</i> of the items can be processed due to insufficient provisioned
            throughput on all of the tables in the request, then <code>BatchWriteItem</code> will
            return a <code>ProvisionedThroughputExceededException</code>.
            </para>
             <important> 
            <para>
            If DynamoDB returns any unprocessed items, you should retry the batch operation on
            those items. However, <i>we strongly recommend that you use an exponential backoff
            algorithm</i>. If you retry the batch operation immediately, the underlying read or
            write requests can still fail due to throttling on the individual tables. If you delay
            the batch operation using exponential backoff, the individual requests in the batch
            are much more likely to succeed.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
            Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             </important> 
            <para>
            With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts
            of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database
            into DynamoDB. In order to improve performance with these large-scale operations,
            <code>BatchWriteItem</code> does not behave in the same way as individual <code>PutItem</code>
            and <code>DeleteItem</code> calls would. For example, you cannot specify conditions
            on individual put and delete requests, and <code>BatchWriteItem</code> does not return
            deleted items in the response.
            </para>
             
            <para>
            If you use a programming language that supports concurrency, you can use threads to
            write items in parallel. Your application must include the necessary logic to manage
            the threads. With languages that don't support threading, you must update or delete
            the specified items one at a time. In both situations, <code>BatchWriteItem</code>
            performs the specified put and delete operations in parallel, giving you the power
            of the thread pool approach without having to introduce complexity into your application.
            </para>
             
            <para>
            Parallel processing reduces latency, but each specified put and delete request consumes
            the same number of write capacity units whether it is processed in parallel or not.
            Delete operations on nonexistent items consume one write capacity unit.
            </para>
             
            <para>
            If one or more of the following is true, DynamoDB rejects the entire batch write operation:
            </para>
             <ul> <li> 
            <para>
            One or more tables specified in the <code>BatchWriteItem</code> request does not exist.
            </para>
             </li> <li> 
            <para>
            Primary key attributes specified on an item in the request do not match those in the
            corresponding table's primary key schema.
            </para>
             </li> <li> 
            <para>
            You try to perform multiple operations on the same item in the same <code>BatchWriteItem</code>
            request. For example, you cannot put and delete the same item in the same <code>BatchWriteItem</code>
            request. 
            </para>
             </li> <li> 
            <para>
            There are more than 25 requests in the batch.
            </para>
             </li> <li> 
            <para>
            Any individual item in a batch exceeds 400 KB.
            </para>
             </li> <li> 
            <para>
            The total request size exceeds 16 MB.
            </para>
             </li> </ul>
            </summary>
            <param name="requestItems">A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following: <ul> <li>  <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement: <ul> <li>  <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key. </li> </ul> </li> <li>  <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement: <ul> <li>  <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. </li> </ul> </li> </ul></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchWriteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.BatchWriteItemAsync(Amazon.DynamoDBv2.Model.BatchWriteItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchWriteItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchWriteItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/BatchWriteItem">REST API Reference for BatchWriteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateBackup(Amazon.DynamoDBv2.Model.CreateBackupRequest)">
            <summary>
            Creates a backup for an existing table.
            
             
            <para>
             Each time you create an On-Demand Backup, the entire table data is backed up. There
            is no limit to the number of on-demand backups that can be taken. 
            </para>
             
            <para>
             When you create an On-Demand Backup, a time marker of the request is cataloged, and
            the backup is created asynchronously, by applying all changes until the time of the
            request to the last full table snapshot. Backup requests are processed instantaneously
            and become available for restore within minutes. 
            </para>
             
            <para>
            You can call <code>CreateBackup</code> at a maximum rate of 50 times per second.
            </para>
             
            <para>
            All backups in DynamoDB work without consuming any provisioned throughput on the table.
            </para>
             
            <para>
             If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed
            to contain all data committed to the table up to 14:24:00, and data committed after
            14:26:00 will not be. The backup may or may not contain data modifications made between
            14:24:00 and 14:26:00. On-Demand Backup does not support causal consistency. 
            </para>
             
            <para>
             Along with data, the following are also included on the backups: 
            </para>
             <ul> <li> 
            <para>
            Global secondary indexes (GSIs)
            </para>
             </li> <li> 
            <para>
            Local secondary indexes (LSIs)
            </para>
             </li> <li> 
            <para>
            Streams
            </para>
             </li> <li> 
            <para>
            Provisioned read and write capacity
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateBackup service method.</param>
            
            <returns>The response from the CreateBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ContinuousBackupsUnavailableException">
            Backups have not yet been enabled for this table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableInUseException">
            A table by that name is either being created or deleted.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateBackup">REST API Reference for CreateBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateBackupAsync(Amazon.DynamoDBv2.Model.CreateBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateBackup">REST API Reference for CreateBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateGlobalTable(Amazon.DynamoDBv2.Model.CreateGlobalTableRequest)">
            <summary>
            Creates a global table from an existing table. A global table creates a replication
            relationship between two or more DynamoDB tables with the same table name in the provided
            regions. 
            
             
            <para>
             Tables can only be added as the replicas of a global table group under the following
            conditions: 
            </para>
             <ul> <li> 
            <para>
             The tables must have the same name. 
            </para>
             </li> <li> 
            <para>
             The tables must contain no items. 
            </para>
             </li> <li> 
            <para>
             The tables must have the same hash key and sort key (if present). 
            </para>
             </li> <li> 
            <para>
             The tables must have DynamoDB Streams enabled (NEW_AND_OLD_IMAGES). 
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateGlobalTable service method.</param>
            
            <returns>The response from the CreateGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableAlreadyExistsException">
            The specified global table already exists.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateGlobalTable">REST API Reference for CreateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateGlobalTableAsync(Amazon.DynamoDBv2.Model.CreateGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateGlobalTable">REST API Reference for CreateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateTable(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="attributeDefinitions">An array of attributes that describe the key schema for the table and indexes.</param>
            <param name="provisionedThroughput">Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation. For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateTable(Amazon.DynamoDBv2.Model.CreateTableRequest)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateTable service method.</param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateTableAsync(System.String,System.Collections.Generic.List{Amazon.DynamoDBv2.Model.KeySchemaElement},System.Collections.Generic.List{Amazon.DynamoDBv2.Model.AttributeDefinition},Amazon.DynamoDBv2.Model.ProvisionedThroughput,System.Threading.CancellationToken)">
            <summary>
            The <code>CreateTable</code> operation adds a new table to your account. In an AWS
            account, table names must be unique within each region. That is, you can have two
            tables with same name if you create the tables in different regions.
            
             
            <para>
             <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code>
            request, DynamoDB immediately returns a response with a <code>TableStatus</code> of
            <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code>
            to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code>
            table. 
            </para>
             
            <para>
            You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code>
            operation. If you want to create multiple tables with secondary indexes on them, you
            must create the tables sequentially. Only one table with secondary indexes can be
            in the <code>CREATING</code> state at any given time.
            </para>
             
            <para>
            You can use the <code>DescribeTable</code> action to check the table status.
            </para>
            </summary>
            <param name="tableName">The name of the table to create.</param>
            <param name="keySchema">Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each <code>KeySchemaElement</code> in the array is composed of: <ul> <li>  <code>AttributeName</code> - The name of this key attribute. </li> <li>  <code>KeyType</code> - The role that the key attribute will assume: <ul> <li>  <code>HASH</code> - partition key </li> <li>  <code>RANGE</code> - sort key </li> </ul> </li> </ul> <note> The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. </note> For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="attributeDefinitions">An array of attributes that describe the key schema for the table and indexes.</param>
            <param name="provisionedThroughput">Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation. For current minimum and maximum provisioned throughput values, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.CreateTableAsync(Amazon.DynamoDBv2.Model.CreateTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/CreateTable">REST API Reference for CreateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteBackup(Amazon.DynamoDBv2.Model.DeleteBackupRequest)">
            <summary>
            Deletes an existing backup of a table.
            
             
            <para>
            You can call <code>DeleteBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteBackup service method.</param>
            
            <returns>The response from the DeleteBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteBackup">REST API Reference for DeleteBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteBackupAsync(Amazon.DynamoDBv2.Model.DeleteBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteBackup">REST API Reference for DeleteBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - The content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItem(Amazon.DynamoDBv2.Model.DeleteItemRequest)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteItem service method.</param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Deletes a single item in a table by primary key. You can perform a conditional delete
            operation that deletes the item if it exists, or if it has an expected attribute value.
            
             
            <para>
            In addition to deleting an item, you can also return the item's attribute values in
            the same operation, using the <code>ReturnValues</code> parameter.
            </para>
             
            <para>
            Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
            running it multiple times on the same item or attribute does <i>not</i> result in
            an error response.
            </para>
             
            <para>
            Conditional deletes are useful for deleting items only if specific conditions are
            met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item
            is not deleted.
            </para>
            </summary>
            <param name="tableName">The name of the table from which to delete the item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - The content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteItemAsync(Amazon.DynamoDBv2.Model.DeleteItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteItem">REST API Reference for DeleteItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteTable(System.String)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="tableName">The name of the table to delete.</param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteTable(Amazon.DynamoDBv2.Model.DeleteTableRequest)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteTable service method.</param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The <code>DeleteTable</code> operation deletes a table and all of its items. After
            a <code>DeleteTable</code> request, the specified table is in the <code>DELETING</code>
            state until DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code>
            state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code>
            states, then DynamoDB returns a <code>ResourceInUseException</code>. If the specified
            table does not exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
            table is already in the <code>DELETING</code> state, no error is returned. 
            
             <note> 
            <para>
            DynamoDB might continue to accept data read and write operations, such as <code>GetItem</code>
            and <code>PutItem</code>, on a table in the <code>DELETING</code> state until the
            table deletion is complete.
            </para>
             </note> 
            <para>
            When you delete a table, any indexes on that table are also deleted.
            </para>
             
            <para>
            If you have DynamoDB Streams enabled on the table, then the corresponding stream on
            that table goes into the <code>DISABLED</code> state, and the stream is automatically
            deleted after 24 hours.
            </para>
             
            <para>
            Use the <code>DescribeTable</code> action to check the status of the table. 
            </para>
            </summary>
            <param name="tableName">The name of the table to delete.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DeleteTableAsync(Amazon.DynamoDBv2.Model.DeleteTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DeleteTable">REST API Reference for DeleteTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeBackup(Amazon.DynamoDBv2.Model.DescribeBackupRequest)">
            <summary>
            Describes an existing backup of a table.
            
             
            <para>
            You can call <code>DescribeBackup</code> at a maximum rate of 10 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeBackup service method.</param>
            
            <returns>The response from the DescribeBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeBackup">REST API Reference for DescribeBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeBackupAsync(Amazon.DynamoDBv2.Model.DescribeBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeBackup">REST API Reference for DescribeBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeContinuousBackups(Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest)">
            <summary>
            Checks the status of the backup restore settings on the specified table. If backups
            are enabled, <code>ContinuousBackupsStatus</code> will bet set to ENABLED.
            
             
            <para>
            You can call <code>DescribeContinuousBackups</code> at a maximum rate of 10 times
            per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeContinuousBackups service method.</param>
            
            <returns>The response from the DescribeContinuousBackups service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeContinuousBackups">REST API Reference for DescribeContinuousBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeContinuousBackupsAsync(Amazon.DynamoDBv2.Model.DescribeContinuousBackupsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeContinuousBackups operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeContinuousBackups operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeContinuousBackups">REST API Reference for DescribeContinuousBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeGlobalTable(Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest)">
            <summary>
            Returns information about the specified global table.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeGlobalTable service method.</param>
            
            <returns>The response from the DescribeGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException">
            The specified global table does not exist.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeGlobalTable">REST API Reference for DescribeGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeGlobalTableAsync(Amazon.DynamoDBv2.Model.DescribeGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeGlobalTable">REST API Reference for DescribeGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeLimits(Amazon.DynamoDBv2.Model.DescribeLimitsRequest)">
            <summary>
            Returns the current provisioned-capacity limits for your AWS account in a region,
            both for the region as a whole and for any one DynamoDB table that you create there.
            
             
            <para>
            When you establish an AWS account, the account has initial limits on the maximum read
            capacity units and write capacity units that you can provision across all of your
            DynamoDB tables in a given region. Also, there are per-table limits that apply when
            you create a table there. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
            page in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
            Although you can increase these limits by filing a case at <a href="https://console.aws.amazon.com/support/home#/">AWS
            Support Center</a>, obtaining the increase is not instantaneous. The <code>DescribeLimits</code>
            action lets you write code to compare the capacity you are currently using to those
            limits imposed by your account so that you have enough time to apply for an increase
            before you hit a limit.
            </para>
             
            <para>
            For example, you could use one of the AWS SDKs to do the following:
            </para>
             <ol> <li> 
            <para>
            Call <code>DescribeLimits</code> for a particular region to obtain your current account
            limits on provisioned capacity there.
            </para>
             </li> <li> 
            <para>
            Create a variable to hold the aggregate read capacity units provisioned for all your
            tables in that region, and one to hold the aggregate write capacity units. Zero them
            both.
            </para>
             </li> <li> 
            <para>
            Call <code>ListTables</code> to obtain a list of all your DynamoDB tables.
            </para>
             </li> <li> 
            <para>
            For each table name listed by <code>ListTables</code>, do the following:
            </para>
             <ul> <li> 
            <para>
            Call <code>DescribeTable</code> with the table name.
            </para>
             </li> <li> 
            <para>
            Use the data returned by <code>DescribeTable</code> to add the read capacity units
            and write capacity units provisioned for the table itself to your variables.
            </para>
             </li> <li> 
            <para>
            If the table has one or more global secondary indexes (GSIs), loop over these GSIs
            and add their provisioned capacity values to your variables as well.
            </para>
             </li> </ul> </li> <li> 
            <para>
            Report the account limits for that region returned by <code>DescribeLimits</code>,
            along with the total current provisioned capacity levels you have calculated.
            </para>
             </li> </ol> 
            <para>
            This will let you see whether you are getting close to your account-level limits.
            </para>
             
            <para>
            The per-table limits apply only when you are creating a new table. They restrict the
            sum of the provisioned capacity of the new table itself and all its global secondary
            indexes.
            </para>
             
            <para>
            For existing tables and their GSIs, DynamoDB will not let you increase provisioned
            capacity extremely rapidly, but the only upper limit that applies is that the aggregate
            provisioned capacity over all your tables and GSIs cannot exceed either of the per-account
            limits.
            </para>
             <note> 
            <para>
             <code>DescribeLimits</code> should only be called periodically. You can expect throttling
            errors if you call it more than once in a minute.
            </para>
             </note> 
            <para>
            The <code>DescribeLimits</code> Request element has no content.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            
            <returns>The response from the DescribeLimits service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeLimitsAsync(Amazon.DynamoDBv2.Model.DescribeLimitsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeLimits operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeLimits operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTable(System.String)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="tableName">The name of the table to describe.</param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTable(Amazon.DynamoDBv2.Model.DescribeTableRequest)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeTable service method.</param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about the table, including the current status of the table, when
            it was created, the primary key schema, and any indexes on the table.
            
             <note> 
            <para>
            If you issue a <code>DescribeTable</code> request immediately after a <code>CreateTable</code>
            request, DynamoDB might return a <code>ResourceNotFoundException</code>. This is because
            <code>DescribeTable</code> uses an eventually consistent query, and the metadata for
            your table might not be available at that moment. Wait for a few seconds, and then
            try the <code>DescribeTable</code> request again.
            </para>
             </note>
            </summary>
            <param name="tableName">The name of the table to describe.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTableAsync(Amazon.DynamoDBv2.Model.DescribeTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTable">REST API Reference for DescribeTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTimeToLive(System.String)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="tableName">The name of the table to be described.</param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTimeToLive(Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeTimeToLive service method.</param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTimeToLiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gives a description of the Time to Live (TTL) status on the specified table.
            </summary>
            <param name="tableName">The name of the table to be described.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.DescribeTimeToLiveAsync(Amazon.DynamoDBv2.Model.DescribeTimeToLiveRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeTimeToLive operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeTimeToLive operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/DescribeTimeToLive">REST API Reference for DescribeTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="consistentRead">Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItem(Amazon.DynamoDBv2.Model.GetItemRequest)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetItem service method.</param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The <code>GetItem</code> operation returns a set of attributes for the item with the
            given primary key. If there is no matching item, <code>GetItem</code> does not return
            any data and there will be no <code>Item</code> element in the response.
            
             
            <para>
             <code>GetItem</code> provides an eventually consistent read by default. If your application
            requires a strongly consistent read, set <code>ConsistentRead</code> to <code>true</code>.
            Although a strongly consistent read might take more time than an eventually consistent
            read, it always returns the last updated value.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested item.</param>
            <param name="key">A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="consistentRead">Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.GetItemAsync(Amazon.DynamoDBv2.Model.GetItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/GetItem">REST API Reference for GetItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListBackups(Amazon.DynamoDBv2.Model.ListBackupsRequest)">
            <summary>
            List backups associated with an AWS account. To list backups for a given table, specify
            <code>TableName</code>. <code>ListBackups</code> returns a paginated list of results
            with at most 1MB worth of items in a page. You can also specify a limit for the maximum
            number of entries to be returned in a page. 
            
             
            <para>
            In the request, start time is inclusive but end time is exclusive. Note that these
            limits are for the time at which the original backup was requested.
            </para>
             
            <para>
            You can call <code>ListBackups</code> a maximum of 5 times per second.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListBackups service method.</param>
            
            <returns>The response from the ListBackups service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListBackups">REST API Reference for ListBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListBackupsAsync(Amazon.DynamoDBv2.Model.ListBackupsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListBackups operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListBackups operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListBackups">REST API Reference for ListBackups Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListGlobalTables(Amazon.DynamoDBv2.Model.ListGlobalTablesRequest)">
            <summary>
            Lists all global tables that have a replica in the specified region.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListGlobalTables service method.</param>
            
            <returns>The response from the ListGlobalTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListGlobalTables">REST API Reference for ListGlobalTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListGlobalTablesAsync(Amazon.DynamoDBv2.Model.ListGlobalTablesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListGlobalTables operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListGlobalTables operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListGlobalTables">REST API Reference for ListGlobalTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTables">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTables(System.String)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTables(System.String,System.Int32)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTables(System.Int32)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTables(Amazon.DynamoDBv2.Model.ListTablesRequest)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTables service method.</param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTablesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTablesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTablesAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="exclusiveStartTableName">The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</param>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTablesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an array of table names associated with the current account and endpoint.
            The output from <code>ListTables</code> is paginated, with each page returning a maximum
            of 100 table names.
            </summary>
            <param name="limit">A maximum number of table names to return. If this parameter is not specified, the limit is 100.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTables service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTablesAsync(Amazon.DynamoDBv2.Model.ListTablesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListTables operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListTables operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables">REST API Reference for ListTables Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTagsOfResource(Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest)">
            <summary>
            List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to
            10 times per second, per account.
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsOfResource service method.</param>
            
            <returns>The response from the ListTagsOfResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTagsOfResource">REST API Reference for ListTagsOfResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ListTagsOfResourceAsync(Amazon.DynamoDBv2.Model.ListTagsOfResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListTagsOfResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListTagsOfResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTagsOfResource">REST API Reference for ListTagsOfResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue})">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItem(Amazon.DynamoDBv2.Model.PutItemRequest)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutItem service method.</param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Threading.CancellationToken)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Creates a new item, or replaces an old item with a new item. If an item that has the
            same primary key as the new item already exists in the specified table, the new item
            completely replaces the existing item. You can perform a conditional put operation
            (add a new item if one with the specified primary key doesn't exist), or replace an
            existing item if it has certain attribute values. You can return the item's attribute
            values in the same operation, using the <code>ReturnValues</code> parameter.
            
             <important> 
            <para>
            This topic provides general information about the <code>PutItem</code> API.
            </para>
             
            <para>
            For information on how to call the <code>PutItem</code> API using the AWS SDK in specific
            languages, see the following:
            </para>
             <ul> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS Command Line Interface </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for .NET </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for C++ </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Go </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Java </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for JavaScript </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for PHP V3 </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem"> PutItem
            in the AWS SDK for Python </a> 
            </para>
             </li> <li> 
            <para>
             <a href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
            PutItem in the AWS SDK for Ruby V2 </a> 
            </para>
             </li> </ul> </important> 
            <para>
            When you add an item, the primary key attribute(s) are the only required attributes.
            Attribute values cannot be null. String and Binary type attributes must have lengths
            greater than zero. Set type attributes cannot be empty. Requests with empty values
            will be rejected with a <code>ValidationException</code> exception.
            </para>
             <note> 
            <para>
            To prevent a new item from replacing an existing item, use a conditional expression
            that contains the <code>attribute_not_exists</code> function with the name of the
            attribute being used as the partition key for the table. Since every record must contain
            that attribute, the <code>attribute_not_exists</code> function will only succeed if
            no matching item exists.
            </para>
             </note> 
            <para>
            For more information about <code>PutItem</code>, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
            with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="tableName">The name of the table to contain the item.</param>
            <param name="item">A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. For more information about primary keys, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>. Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned. </li> </ul> <note> The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>. </note></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.PutItemAsync(Amazon.DynamoDBv2.Model.PutItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/PutItem">REST API Reference for PutItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.Query(Amazon.DynamoDBv2.Model.QueryRequest)">
            <summary>
            The <code>Query</code> operation finds items based on primary key values. You can
            query any table or secondary index that has a composite primary key (a partition key
            and a sort key). 
            
             
            <para>
            Use the <code>KeyConditionExpression</code> parameter to provide a specific value
            for the partition key. The <code>Query</code> operation will return all of the items
            from the table or index with that partition key value. You can optionally narrow the
            scope of the <code>Query</code> operation by specifying a sort key value and a comparison
            operator in <code>KeyConditionExpression</code>. To further refine the <code>Query</code>
            results, you can optionally provide a <code>FilterExpression</code>. A <code>FilterExpression</code>
            determines which items within the results should be returned to you. All of the other
            results are discarded. 
            </para>
             
            <para>
             A <code>Query</code> operation always returns a result set. If no matching items
            are found, the result set will be empty. Queries that do not return results consume
            the minimum number of read capacity units for that type of read operation. 
            </para>
             <note> 
            <para>
             DynamoDB calculates the number of read capacity units consumed based on item size,
            not on the amount of data that is returned to an application. The number of capacity
            units consumed will be the same whether you request all of the attributes (the default
            behavior) or just some of them (using a projection expression). The number will also
            be the same whether or not you use a <code>FilterExpression</code>. 
            </para>
             </note> 
            <para>
             <code>Query</code> results are always sorted by the sort key value. If the data type
            of the sort key is Number, the results are returned in numeric order; otherwise, the
            results are returned in order of UTF-8 bytes. By default, the sort order is ascending.
            To reverse the order, set the <code>ScanIndexForward</code> parameter to false. 
            </para>
             
            <para>
             A single <code>Query</code> operation will read up to the maximum number of items
            set (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>FilterExpression</code> is applied after a <code>Query</code> finishes, but
            before the results are returned. A <code>FilterExpression</code> cannot contain partition
            key or sort key attributes. You need to specify those attributes in the <code>KeyConditionExpression</code>.
            
            </para>
             <note> 
            <para>
             A <code>Query</code> operation can return an empty result set and a <code>LastEvaluatedKey</code>
            if all the items read for the page of results are filtered out. 
            </para>
             </note> 
            <para>
            You can query a table, a local secondary index, or a global secondary index. For a
            query on a table or on a local secondary index, you can set the <code>ConsistentRead</code>
            parameter to <code>true</code> and obtain a strongly consistent result. Global secondary
            indexes support eventually consistent reads only, so do not specify <code>ConsistentRead</code>
            when querying a global secondary index.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Query service method.</param>
            
            <returns>The response from the Query service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Query">REST API Reference for Query Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.QueryAsync(Amazon.DynamoDBv2.Model.QueryRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Query operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Query operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Query">REST API Reference for Query Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.RestoreTableFromBackup(Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest)">
            <summary>
            Creates a new table from an existing backup. Any number of users can execute up to
            10 concurrent restores in a given account. 
            
             
            <para>
            You can call <code>RestoreTableFromBackup</code> at a maximum rate of 10 times per
            second.
            </para>
             
            <para>
            You must manually set up the following on the restored table:
            </para>
             <ul> <li> 
            <para>
            Auto scaling policies
            </para>
             </li> <li> 
            <para>
            IAM policies
            </para>
             </li> <li> 
            <para>
            Cloudwatch metrics and alarms
            </para>
             </li> <li> 
            <para>
            Tags
            </para>
             </li> <li> 
            <para>
            Stream settings
            </para>
             </li> <li> 
            <para>
            Time to Live (TTL) settings
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RestoreTableFromBackup service method.</param>
            
            <returns>The response from the RestoreTableFromBackup service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupInUseException">
            There is another ongoing conflicting backup control plane operation on the table.
            The backups is either being created, deleted or restored to a table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.BackupNotFoundException">
            Backup not found for the given BackupARN.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableAlreadyExistsException">
            A table with the name already exists.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableInUseException">
            A table by that name is either being created or deleted.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/RestoreTableFromBackup">REST API Reference for RestoreTableFromBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.RestoreTableFromBackupAsync(Amazon.DynamoDBv2.Model.RestoreTableFromBackupRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the RestoreTableFromBackup operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the RestoreTableFromBackup operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/RestoreTableFromBackup">REST API Reference for RestoreTableFromBackup Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.Scan(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.Scan(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.Scan(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition})">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.Scan(Amazon.DynamoDBv2.Model.ScanRequest)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Scan service method.</param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ScanAsync(System.String,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ScanAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ScanAsync(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.Condition},System.Threading.CancellationToken)">
            <summary>
            The <code>Scan</code> operation returns one or more items and item attributes by accessing
            every item in a table or a secondary index. To have DynamoDB return fewer items, you
            can provide a <code>FilterExpression</code> operation.
            
             
            <para>
            If the total number of scanned items exceeds the maximum data set size limit of 1
            MB, the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
            value to continue the scan in a subsequent operation. The results also include the
            number of items exceeding the limit. A scan can result in no table data meeting the
            filter criteria. 
            </para>
             
            <para>
            A single <code>Scan</code> operation will read up to the maximum number of items set
            (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then
            apply any filtering to the results using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code>
            is present in the response, you will need to paginate the result set. For more information,
            see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
            the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. 
            </para>
             
            <para>
             <code>Scan</code> operations proceed sequentially; however, for faster performance
            on a large table or secondary index, applications can request a parallel <code>Scan</code>
            operation by providing the <code>Segment</code> and <code>TotalSegments</code> parameters.
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
            Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
             
            <para>
             <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
            therefore, the result set might not include the changes to data in the table immediately
            before the operation began. If you need a consistent copy of the data, as of the time
            that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
            to <code>true</code>.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</param>
            <param name="attributesToGet">This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="scanFilter">This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Scan service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.ScanAsync(Amazon.DynamoDBv2.Model.ScanRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Scan operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Scan operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan">REST API Reference for Scan Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.TagResource(Amazon.DynamoDBv2.Model.TagResourceRequest)">
            <summary>
            Associate a set of tags with an Amazon DynamoDB resource. You can then activate these
            user-defined tags so that they appear on the Billing and Cost Management console for
            cost allocation tracking. You can call TagResource up to 5 times per second, per account.
            
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            
            <returns>The response from the TagResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.TagResourceAsync(Amazon.DynamoDBv2.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the TagResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the TagResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UntagResource(Amazon.DynamoDBv2.Model.UntagResourceRequest)">
            <summary>
            Removes the association of tags from an Amazon DynamoDB resource. You can call UntagResource
            up to 5 times per second, per account. 
            
             
            <para>
            For an overview on tagging DynamoDB resources, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
            for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            
            <returns>The response from the UntagResource service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UntagResourceAsync(Amazon.DynamoDBv2.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UntagResource operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UntagResource operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateGlobalTable(Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest)">
            <summary>
            Adds or removes replicas in the specified global table. The global table must already
            exist to be able to use this operation. Any replica to be added must be empty, must
            have the same name as the global table, must have the same key schema, must have DynamoDB
            Streams enabled, and cannot have any local secondary indexes (LSIs).
            
             <note> 
            <para>
            Although you can use <code>UpdateGlobalTable</code> to add replicas and remove replicas
            in a single request, for simplicity we recommend that you issue separate requests
            for adding or removing replicas.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateGlobalTable service method.</param>
            
            <returns>The response from the UpdateGlobalTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.GlobalTableNotFoundException">
            The specified global table does not exist.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ReplicaAlreadyExistsException">
            The specified replica is already part of the global table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ReplicaNotFoundException">
            The specified replica is no longer part of the global table.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TableNotFoundException">
            A table with the name <code>TableName</code> does not currently exist within the subscriber's
            account.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateGlobalTable">REST API Reference for UpdateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateGlobalTableAsync(Amazon.DynamoDBv2.Model.UpdateGlobalTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateGlobalTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateGlobalTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateGlobalTable">REST API Reference for UpdateGlobalTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate})">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItem(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},Amazon.DynamoDBv2.ReturnValue)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation. </li> <li>  <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation. </li> <li>  <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation. </li> <li>  <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation. </li> </ul> There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItem(Amazon.DynamoDBv2.Model.UpdateItemRequest)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateItem service method.</param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},System.Threading.CancellationToken)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItemAsync(System.String,System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValue},System.Collections.Generic.Dictionary{System.String,Amazon.DynamoDBv2.Model.AttributeValueUpdate},Amazon.DynamoDBv2.ReturnValue,System.Threading.CancellationToken)">
            <summary>
            Edits an existing item's attributes, or adds a new item to the table if it does not
            already exist. You can put, delete, or add attribute values. You can also perform
            a conditional update on an existing item (insert a new attribute name-value pair if
            it doesn't exist, or replace an existing name-value pair if it has certain expected
            attribute values).
            
             
            <para>
            You can also return the item's attribute values in the same <code>UpdateItem</code>
            operation using the <code>ReturnValues</code> parameter.
            </para>
            </summary>
            <param name="tableName">The name of the table containing the item to update.</param>
            <param name="key">The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</param>
            <param name="attributeUpdates">This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</param>
            <param name="returnValues">Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are: <ul> <li>  <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.) </li> <li>  <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation. </li> <li>  <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation. </li> <li>  <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation. </li> <li>  <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation. </li> </ul> There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateItem service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ConditionalCheckFailedException">
            A condition specified in the operation could not be evaluated.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ItemCollectionSizeLimitExceededException">
            An item collection is too large. This exception is only returned for tables that have
            one or more local secondary indexes.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ProvisionedThroughputExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateItemAsync(Amazon.DynamoDBv2.Model.UpdateItemRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateItem operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateItem operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateItem">REST API Reference for UpdateItem Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTable(System.String,Amazon.DynamoDBv2.Model.ProvisionedThroughput)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="tableName">The name of the table to be updated.</param>
            <param name="provisionedThroughput">The new provisioned throughput settings for the specified table or index.</param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTable(Amazon.DynamoDBv2.Model.UpdateTableRequest)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateTable service method.</param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTableAsync(System.String,Amazon.DynamoDBv2.Model.ProvisionedThroughput,System.Threading.CancellationToken)">
            <summary>
            Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
            Streams settings for a given table.
            
             
            <para>
            You can only perform one of the following operations at once:
            </para>
             <ul> <li> 
            <para>
            Modify the provisioned throughput settings of the table.
            </para>
             </li> <li> 
            <para>
            Enable or disable Streams on the table.
            </para>
             </li> <li> 
            <para>
            Remove a global secondary index from the table.
            </para>
             </li> <li> 
            <para>
            Create a new global secondary index on the table. Once the index begins backfilling,
            you can use <code>UpdateTable</code> to perform other operations.
            </para>
             </li> </ul> 
            <para>
             <code>UpdateTable</code> is an asynchronous operation; while it is executing, the
            table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
            <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
            When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
            operation is complete.
            </para>
            </summary>
            <param name="tableName">The name of the table to be updated.</param>
            <param name="provisionedThroughput">The new provisioned throughput settings for the specified table or index.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateTable service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTableAsync(Amazon.DynamoDBv2.Model.UpdateTableRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateTable operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateTable operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTable">REST API Reference for UpdateTable Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTimeToLive(Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest)">
            <summary>
            The UpdateTimeToLive method will enable or disable TTL for the specified table. A
            successful <code>UpdateTimeToLive</code> call returns the current <code>TimeToLiveSpecification</code>;
            it may take up to one hour for the change to fully process. Any additional <code>UpdateTimeToLive</code>
            calls for the same table during this one hour duration result in a <code>ValidationException</code>.
            
            
             
            <para>
            TTL compares the current time in epoch time format to the time stored in the TTL attribute
            of an item. If the epoch time value stored in the attribute is less than the current
            time, the item is marked as expired and subsequently deleted.
            </para>
             <note> 
            <para>
             The epoch time format is the number of seconds elapsed since 12:00:00 AM January
            1st, 1970 UTC. 
            </para>
             </note> 
            <para>
            DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput
            for other data operations. 
            </para>
             <important> 
            <para>
            DynamoDB typically deletes expired items within two days of expiration. The exact
            duration within which an item gets deleted after expiration is specific to the nature
            of the workload. Items that have expired and not been deleted will still show up in
            reads, queries, and scans.
            </para>
             </important> 
            <para>
            As items are deleted, they are removed from any Local Secondary Index and Global Secondary
            Index immediately in the same eventually consistent way as a standard delete operation.
            </para>
             
            <para>
            For more information, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">Time
            To Live</a> in the Amazon DynamoDB Developer Guide. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateTimeToLive service method.</param>
            
            <returns>The response from the UpdateTimeToLive service method, as returned by DynamoDB.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Up to 50 <code>CreateBackup</code> operations are allowed per second, per account.
            There is no limit to the number of daily on-demand backups that can be taken. 
            
             
            <para>
            Up to 10 simultaneous table operations are allowed per account. These operations include
            <code>CreateTable</code>, <code>UpdateTable</code>, <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
            and <code>RestoreTableFromBackup</code>. 
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
             
            <para>
            For tables with secondary indexes, only one of those tables can be in the <code>CREATING</code>
            state at any point in time. Do not attempt to create more than one such table simultaneously.
            </para>
             
            <para>
            The total limit of tables in the <code>ACTIVE</code> state is 250.
            </para>
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceInUseException">
            The operation conflicts with the resource's availability. For example, you attempted
            to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
            state.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent table or index. The resource might not
            be specified correctly, or its status might not be <code>ACTIVE</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTimeToLive">REST API Reference for UpdateTimeToLive Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDB.UpdateTimeToLiveAsync(Amazon.DynamoDBv2.Model.UpdateTimeToLiveRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the UpdateTimeToLive operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the UpdateTimeToLive operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/UpdateTimeToLive">REST API Reference for UpdateTimeToLive Operation</seealso>
        </member>
        <member name="T:Amazon.DynamoDBv2.IAmazonDynamoDBStreams">
             <summary>
             Interface for accessing DynamoDBStreams
            
             Amazon DynamoDB 
             <para>
             Amazon DynamoDB Streams provides API actions for accessing streams and processing
             stream records. To learn more about application development with Streams, see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">Capturing
             Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.DescribeStream(System.String)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="streamArn">The Amazon Resource Name (ARN) for the stream.</param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.DescribeStream(Amazon.DynamoDBv2.Model.DescribeStreamRequest)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.DescribeStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about a stream, including the current status of the stream, its
            Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB
            table.
            
             <note> 
            <para>
            You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.
            </para>
             </note> 
            <para>
            Each shard in the stream has a <code>SequenceNumberRange</code> associated with it.
            If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code>
            but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive
            more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code>
            are present, then that shard is closed and can no longer receive more data.
            </para>
            </summary>
            <param name="streamArn">The Amazon Resource Name (ARN) for the stream.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStream service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.DescribeStreamAsync(Amazon.DynamoDBv2.Model.DescribeStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DescribeStream operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DescribeStream operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetRecords(System.String)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="shardIterator">A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.</param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetRecords(Amazon.DynamoDBv2.Model.GetRecordsRequest)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetRecordsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the stream records from a given shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            stream records sequentially. If there are no stream records available in the portion
            of the shard that the iterator points to, <code>GetRecords</code> returns an empty
            list. Note that it might take multiple calls to get to a portion of the shard that
            contains stream records.
            </para>
             <note> 
            <para>
             <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records,
            whichever comes first.
            </para>
             </note>
            </summary>
            <param name="shardIterator">A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRecords service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.ExpiredIteratorException">
            The shard iterator has expired and can no longer be used to retrieve stream records.
            A shard iterator expires 15 minutes after it is retrieved using the <code>GetShardIterator</code>
            action.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.LimitExceededException">
            Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests
            that receive this exception. Your request is eventually successful, unless your retry
            queue is too large to finish. Reduce the frequency of requests and use exponential
            backoff. For more information, go to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries">Error
            Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetRecordsAsync(Amazon.DynamoDBv2.Model.GetRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetRecords operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetRecords operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetShardIterator(Amazon.DynamoDBv2.Model.GetShardIteratorRequest)">
            <summary>
            Returns a shard iterator. A shard iterator provides information about how to retrieve
            the stream records from within a shard. Use the shard iterator in a subsequent <code>GetRecords</code>
            request to read the stream records from the shard.
            
             <note> 
            <para>
            A shard iterator expires 15 minutes after it is returned to the requester.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            
            <returns>The response from the GetShardIterator service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.TrimmedDataAccessException">
            The operation attempted to read past the oldest stream record in a shard.
            
             
            <para>
            In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose
            age exceeds this limit are subject to removal (trimming) from the stream. You might
            receive a TrimmedDataAccessException if:
            </para>
             <ul> <li>
            <para>
            You request a shard iterator with a sequence number older than the trim point (24
            hours).
            </para>
             </li> <li>
            <para>
            You obtain a shard iterator, but before you use the iterator in a <code>GetRecords</code>
            request, a stream record in the shard exceeds the 24 hour period and is trimmed. This
            causes the iterator to access a record that no longer exists.
            </para>
             </li> </ul>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.GetShardIteratorAsync(Amazon.DynamoDBv2.Model.GetShardIteratorRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetShardIterator operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetShardIterator operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.ListStreams">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.ListStreams(Amazon.DynamoDBv2.Model.ListStreamsRequest)">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.ListStreamsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns an array of stream ARNs associated with the current account and endpoint.
            If the <code>TableName</code> parameter is present, then <code>ListStreams</code>
            will return only the streams ARNs for that table.
            
             <note> 
            <para>
            You can call <code>ListStreams</code> at a maximum rate of 5 times per second.
            </para>
             </note>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by DynamoDBStreams.</returns>
            <exception cref="T:Amazon.DynamoDBv2.Model.InternalServerErrorException">
            An error occurred on the server side.
            </exception>
            <exception cref="T:Amazon.DynamoDBv2.Model.ResourceNotFoundException">
            The operation tried to access a nonexistent stream.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.DynamoDBv2.IAmazonDynamoDBStreams.ListStreamsAsync(Amazon.DynamoDBv2.Model.ListStreamsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListStreams operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListStreams operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/streams-dynamodb-2012-08-10/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="T:Amazon.AWSConfigsDynamoDB">
            <summary>
            Configurations for accessing DynamoDB
            </summary>
        </member>
        <member name="F:Amazon.AWSConfigsDynamoDB.DynamoDBContextTableNamePrefixKey">
            <summary>
            Key for the DynamoDBContextTableNamePrefix property.
            <seealso cref="P:Amazon.AWSConfigsDynamoDB.DynamoDBContextTableNamePrefix"/>
            </summary>
        </member>
        <member name="P:Amazon.AWSConfigsDynamoDB.DynamoDBContextTableNamePrefix">
            <summary>
            Configures the default TableNamePrefix that the DynamoDBContext will use if
            not manually configured.
            Changes to this setting will only take effect in newly-constructed instances of
            DynamoDBContextConfig and DynamoDBContext.
            
            The setting can be configured through App.config, for example:
            <code>
            &lt;appSettings&gt;
              &lt;add key="AWS.DynamoDBContext.TableNamePrefix" value="Test-"/&gt;
            &lt;/appSettings&gt;
            </code>
            </summary>
        </member>
        <member name="P:Amazon.AWSConfigsDynamoDB.ConversionSchema">
            <summary>
            Conversion schema to use for converting .NET types to DynamoDB types.
            </summary>
        </member>
        <member name="P:Amazon.AWSConfigsDynamoDB.Context">
            <summary>
            Settings for DynamoDBContext.
            </summary>
        </member>
        <member name="T:Amazon.Util.DynamoDBContextConfig">
            <summary>
            Settings for DynamoDBContext.
            </summary>
        </member>
        <member name="P:Amazon.Util.DynamoDBContextConfig.TableNamePrefix">
            <summary>
            Configures the default TableNamePrefix that the DynamoDBContext will use if
            not manually configured.
            
            TableNamePrefix is used after TableAliases have been applied.
            </summary>
        </member>
        <member name="P:Amazon.Util.DynamoDBContextConfig.TableAliases">
            <summary>
            A string-to-string dictionary (From-Table to To-Table) used by DynamoDBContext to
            use a different table from one that is configured for a type.
            
            Remapping is done before applying TableNamePrefix.
            </summary>
        </member>
        <member name="P:Amazon.Util.DynamoDBContextConfig.TypeMappings">
            <summary>
            A Type-to-TypeMapping (type to TypeMapping defining its DynamoDB conversion) used by
            DynamoDBContext to modify or configure a particular type.
            </summary>
        </member>
        <member name="M:Amazon.Util.DynamoDBContextConfig.AddAlias(Amazon.Util.TableAlias)">
            <summary>
            Adds a TableAlias to the TableAliases property.
            An exception is thrown if there is already a TableAlias with the same FromTable configured.
            </summary>
            <param name="tableAlias"></param>
        </member>
        <member name="M:Amazon.Util.DynamoDBContextConfig.AddMapping(Amazon.Util.TypeMapping)">
            <summary>
            Adds a TypeMapping to the TypeMappings property.
            An exception is thrown if there is already a TypeMapping with the same Type configured.
            </summary>
            <param name="typeMapping"></param>
        </member>
        <member name="T:Amazon.Util.TableAlias">
            <summary>
            Single DynamoDB table alias
            </summary>
        </member>
        <member name="P:Amazon.Util.TableAlias.FromTable">
            <summary>
            Source table
            </summary>
        </member>
        <member name="P:Amazon.Util.TableAlias.ToTable">
            <summary>
            Destination table
            </summary>
        </member>
        <member name="M:Amazon.Util.TableAlias.#ctor">
            <summary>
            Initializes an empty TableAlias object
            </summary>
        </member>
        <member name="M:Amazon.Util.TableAlias.#ctor(System.String,System.String)">
            <summary>
            Initializes a TableAlias object with specific source and
            destination tables
            </summary>
            <param name="fromTable">Source table</param>
            <param name="toTable">Destination table</param>
        </member>
        <member name="T:Amazon.Util.TypeMapping">
            <summary>
            Single DynamoDB type mapping config
            </summary>
        </member>
        <member name="P:Amazon.Util.TypeMapping.Type">
            <summary>
            Type to which the mapping applies
            </summary>
        </member>
        <member name="P:Amazon.Util.TypeMapping.TargetTable">
            <summary>
            Target table for the type
            </summary>
        </member>
        <member name="P:Amazon.Util.TypeMapping.PropertyConfigs">
            <summary>
            A string-to-PropertyConfig dictionary (property name to PropertyConfig) describing
            how each property on the type should be treated.
            </summary>
        </member>
        <member name="M:Amazon.Util.TypeMapping.AddProperty(Amazon.Util.PropertyConfig)">
            <summary>
            Adds a PropertyConfig to the PropertyConfigs property.
            An exception is thrown if there is already a PropertyConfig with the same Name configured.
            </summary>
            <param name="propertyConfig"></param>
        </member>
        <member name="M:Amazon.Util.TypeMapping.#ctor(System.Type,System.String)">
            <summary>
            Initializes a TypeMapping object for a specific type and target table.
            </summary>
            <param name="type">Target type</param>
            <param name="targetTable">Target table</param>
        </member>
        <member name="T:Amazon.Util.PropertyConfig">
            <summary>
            Single DynamoDB property mapping config
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.Attribute">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.Ignore">
            <summary>
            Whether this property should be ignored by DynamoDBContext
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.Version">
            <summary>
            Whether this property should be treated as a version property
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.Converter">
            <summary>
            The type of converter that should be used on this property
            </summary>
        </member>
        <member name="P:Amazon.Util.PropertyConfig.StoreAsEpoch">
            <summary>
            Whether this property should be stored as epoch seconds integer.
            </summary>
        </member>
        <member name="M:Amazon.Util.PropertyConfig.#ctor(System.String)">
            <summary>
            Initializes a PropertyConfig object for a specific property
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Amazon.Util.DynamoDBSection">
            <summary>
            Root DynamoDB section
            </summary>
        </member>
        <member name="T:Amazon.Util.DynamoDBContextSection">
            <summary>
            DynamoDBContext section
            </summary>
        </member>
        <member name="T:Amazon.Util.TableAliasElement">
            <summary>
            Single DDB table alias
            </summary>
        </member>
        <member name="T:Amazon.Util.TableAliasesCollection">
            <summary>
            Collection of DDB table aliases
            </summary>
        </member>
        <member name="T:Amazon.Util.TypeMappingElement">
            <summary>
            Single DDB type mapping config
            </summary>
        </member>
        <member name="T:Amazon.Util.TypeMappingsCollection">
            <summary>
            Collection of DDB type mapping configs
            </summary>
        </member>
        <member name="T:Amazon.Util.PropertyConfigElement">
            <summary>
            Single DDB property mapping config
            </summary>
        </member>
        <member name="T:Amazon.Util.PropertyConfigsCollection">
            <summary>
            Collection of DDB property mapping configs
            </summary>
        </member>
    </members>
</doc>
